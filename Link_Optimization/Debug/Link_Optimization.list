
Link_Optimization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002124  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080022c4  080022c4  000122c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023ec  080023ec  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080023ec  080023ec  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023ec  080023ec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023ec  080023ec  000123ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023f0  080023f0  000123f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080023f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000074  08002468  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08002468  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000029bc  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e42  00000000  00000000  00022aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002b8  00000000  00000000  000238e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001d6  00000000  00000000  00023ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001086c  00000000  00000000  00023d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004fd6  00000000  00000000  000345e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00056a79  00000000  00000000  000395b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001254  00000000  00000000  00090034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  00091288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080022ac 	.word	0x080022ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080022ac 	.word	0x080022ac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <PID_Controller_X>:

// Current Position (measured process variable)
/*********xPos***************/


int PID_Controller_X(int xCmd, int xPos) {
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
    // Calculate error
    error_x = xCmd - xPos;
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	1ad3      	subs	r3, r2, r3
 8000608:	4a36      	ldr	r2, [pc, #216]	; (80006e4 <PID_Controller_X+0xec>)
 800060a:	6013      	str	r3, [r2, #0]
    // Calculate integral
    if(error_x != 0)
 800060c:	4b35      	ldr	r3, [pc, #212]	; (80006e4 <PID_Controller_X+0xec>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d060      	beq.n	80006d6 <PID_Controller_X+0xde>
    {
    integral_x += error_x * DT;
 8000614:	4b34      	ldr	r3, [pc, #208]	; (80006e8 <PID_Controller_X+0xf0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	ee07 3a90 	vmov	s15, r3
 800061c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000620:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <PID_Controller_X+0xec>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	ee07 3a90 	vmov	s15, r3
 8000628:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800062c:	4b2f      	ldr	r3, [pc, #188]	; (80006ec <PID_Controller_X+0xf4>)
 800062e:	edd3 7a00 	vldr	s15, [r3]
 8000632:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800063a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800063e:	ee17 2a90 	vmov	r2, s15
 8000642:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <PID_Controller_X+0xf0>)
 8000644:	601a      	str	r2, [r3, #0]
    // Calculate derivative
    derivative_x = (error_x - prev_error_x) / DT;
 8000646:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <PID_Controller_X+0xec>)
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	4b29      	ldr	r3, [pc, #164]	; (80006f0 <PID_Controller_X+0xf8>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	ee07 3a90 	vmov	s15, r3
 8000654:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000658:	4b24      	ldr	r3, [pc, #144]	; (80006ec <PID_Controller_X+0xf4>)
 800065a:	ed93 7a00 	vldr	s14, [r3]
 800065e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000666:	ee17 2a90 	vmov	r2, s15
 800066a:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <PID_Controller_X+0xfc>)
 800066c:	601a      	str	r2, [r3, #0]

    // Calculate PID output
    output_x = KP * error_x + KI * integral_x + KD * derivative_x;
 800066e:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <PID_Controller_X+0xec>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	ee07 3a90 	vmov	s15, r3
 8000676:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800067a:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <PID_Controller_X+0x100>)
 800067c:	edd3 7a00 	vldr	s15, [r3]
 8000680:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <PID_Controller_X+0xf0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	ee07 3a90 	vmov	s15, r3
 800068c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000690:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <PID_Controller_X+0x104>)
 8000692:	edd3 7a00 	vldr	s15, [r3]
 8000696:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800069a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <PID_Controller_X+0xfc>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	ee07 3a90 	vmov	s15, r3
 80006a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <PID_Controller_X+0x108>)
 80006ac:	edd3 7a00 	vldr	s15, [r3]
 80006b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006bc:	ee17 2a90 	vmov	r2, s15
 80006c0:	4b10      	ldr	r3, [pc, #64]	; (8000704 <PID_Controller_X+0x10c>)
 80006c2:	601a      	str	r2, [r3, #0]


    // Update previous error
    prev_error_x = error_x;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <PID_Controller_X+0xec>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a09      	ldr	r2, [pc, #36]	; (80006f0 <PID_Controller_X+0xf8>)
 80006ca:	6013      	str	r3, [r2, #0]

    TIM2->CCR1 = output_x;
 80006cc:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <PID_Controller_X+0x10c>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006d4:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 80006d6:	bf00      	nop
 80006d8:	4618      	mov	r0, r3
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	20000090 	.word	0x20000090
 80006e8:	20000098 	.word	0x20000098
 80006ec:	2000000c 	.word	0x2000000c
 80006f0:	20000094 	.word	0x20000094
 80006f4:	2000009c 	.word	0x2000009c
 80006f8:	20000000 	.word	0x20000000
 80006fc:	20000004 	.word	0x20000004
 8000700:	20000008 	.word	0x20000008
 8000704:	200000a0 	.word	0x200000a0

08000708 <Motor_Position>:
int x_Positioning;
int step_size_x;
int step_size_y;

void Motor_Position(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0


	TIM2->CCR1 = xPos;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <Motor_Position+0x24>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000714:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = yPos;
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <Motor_Position+0x28>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800071e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	20000010 	.word	0x20000010
 8000730:	20000014 	.word	0x20000014

08000734 <control_X>:


void control_X(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0


		step_size_x = (xCmd - xPos)/2;
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <control_X+0x34>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <control_X+0x38>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	0fda      	lsrs	r2, r3, #31
 8000744:	4413      	add	r3, r2
 8000746:	105b      	asrs	r3, r3, #1
 8000748:	461a      	mov	r2, r3
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <control_X+0x3c>)
 800074c:	601a      	str	r2, [r3, #0]
		xPos += step_size_x;
 800074e:	4b07      	ldr	r3, [pc, #28]	; (800076c <control_X+0x38>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4b07      	ldr	r3, [pc, #28]	; (8000770 <control_X+0x3c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4413      	add	r3, r2
 8000758:	4a04      	ldr	r2, [pc, #16]	; (800076c <control_X+0x38>)
 800075a:	6013      	str	r3, [r2, #0]




}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	200000c0 	.word	0x200000c0
 800076c:	20000010 	.word	0x20000010
 8000770:	200000a4 	.word	0x200000a4

08000774 <control_Y>:


void control_Y(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

		step_size_y = (yCmd - yPos)/2;
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <control_Y+0x34>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <control_Y+0x38>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	0fda      	lsrs	r2, r3, #31
 8000784:	4413      	add	r3, r2
 8000786:	105b      	asrs	r3, r3, #1
 8000788:	461a      	mov	r2, r3
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <control_Y+0x3c>)
 800078c:	601a      	str	r2, [r3, #0]
		yPos += step_size_y;
 800078e:	4b07      	ldr	r3, [pc, #28]	; (80007ac <control_Y+0x38>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <control_Y+0x3c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4413      	add	r3, r2
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <control_Y+0x38>)
 800079a:	6013      	str	r3, [r2, #0]


}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	200000c4 	.word	0x200000c4
 80007ac:	20000014 	.word	0x20000014
 80007b0:	200000a8 	.word	0x200000a8

080007b4 <Read_RSSI>:
int random_index(int min, int max) {
    return min + rand() % (max - min + 1);
}

uint32_t Read_RSSI() // Change return type to uint32_t
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	if(USART1->SR & SR_RXNE != 0)
 80007b8:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <Read_RSSI+0x80>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d00c      	beq.n	80007de <Read_RSSI+0x2a>
	{
		d = Uart1_Read();
 80007c4:	f000 fca4 	bl	8001110 <Uart1_Read>
 80007c8:	4603      	mov	r3, r0
 80007ca:	b25a      	sxtb	r2, r3
 80007cc:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <Read_RSSI+0x84>)
 80007ce:	701a      	strb	r2, [r3, #0]
		printf("<%i>\n\r", d);
 80007d0:	4b19      	ldr	r3, [pc, #100]	; (8000838 <Read_RSSI+0x84>)
 80007d2:	f993 3000 	ldrsb.w	r3, [r3]
 80007d6:	4619      	mov	r1, r3
 80007d8:	4818      	ldr	r0, [pc, #96]	; (800083c <Read_RSSI+0x88>)
 80007da:	f000 fe6d 	bl	80014b8 <iprintf>
	}
	RSSI_OLD = (rand() % (-50 - -70 + 1)) + -70;
 80007de:	f000 fd6b 	bl	80012b8 <rand>
 80007e2:	4601      	mov	r1, r0
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <Read_RSSI+0x8c>)
 80007e6:	fb83 2301 	smull	r2, r3, r3, r1
 80007ea:	109a      	asrs	r2, r3, #2
 80007ec:	17cb      	asrs	r3, r1, #31
 80007ee:	1ad2      	subs	r2, r2, r3
 80007f0:	4613      	mov	r3, r2
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	4413      	add	r3, r2
 80007f6:	00da      	lsls	r2, r3, #3
 80007f8:	1ad2      	subs	r2, r2, r3
 80007fa:	1a8a      	subs	r2, r1, r2
 80007fc:	f1a2 0346 	sub.w	r3, r2, #70	; 0x46
 8000800:	4a10      	ldr	r2, [pc, #64]	; (8000844 <Read_RSSI+0x90>)
 8000802:	6013      	str	r3, [r2, #0]
	RSSI_NEW = (rand() % (-50 - -70 + 1)) + -70;
 8000804:	f000 fd58 	bl	80012b8 <rand>
 8000808:	4601      	mov	r1, r0
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <Read_RSSI+0x8c>)
 800080c:	fb83 2301 	smull	r2, r3, r3, r1
 8000810:	109a      	asrs	r2, r3, #2
 8000812:	17cb      	asrs	r3, r1, #31
 8000814:	1ad2      	subs	r2, r2, r3
 8000816:	4613      	mov	r3, r2
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	4413      	add	r3, r2
 800081c:	00da      	lsls	r2, r3, #3
 800081e:	1ad2      	subs	r2, r2, r3
 8000820:	1a8a      	subs	r2, r1, r2
 8000822:	f1a2 0346 	sub.w	r3, r2, #70	; 0x46
 8000826:	4a08      	ldr	r2, [pc, #32]	; (8000848 <Read_RSSI+0x94>)
 8000828:	6013      	str	r3, [r2, #0]

    return rssi; // Return the rssi value
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <Read_RSSI+0x98>)
 800082c:	681b      	ldr	r3, [r3, #0]



}
 800082e:	4618      	mov	r0, r3
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40011000 	.word	0x40011000
 8000838:	200000ac 	.word	0x200000ac
 800083c:	080022c4 	.word	0x080022c4
 8000840:	30c30c31 	.word	0x30c30c31
 8000844:	200000b4 	.word	0x200000b4
 8000848:	200000b8 	.word	0x200000b8
 800084c:	200000b0 	.word	0x200000b0

08000850 <main>:




int main(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0

	uint16_t count = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	80fb      	strh	r3, [r7, #6]
	tim2_pa0_pa1_pwm_init();
 800085a:	f000 faab 	bl	8000db4 <tim2_pa0_pa1_pwm_init>
	tim2_pa0_pa1_pwm_set_dutycycle(1,50);
 800085e:	2132      	movs	r1, #50	; 0x32
 8000860:	2001      	movs	r0, #1
 8000862:	f000 fb5b 	bl	8000f1c <tim2_pa0_pa1_pwm_set_dutycycle>
	tim2_pa0_pa1_pwm_set_dutycycle(2,50);
 8000866:	2132      	movs	r1, #50	; 0x32
 8000868:	2002      	movs	r0, #2
 800086a:	f000 fb57 	bl	8000f1c <tim2_pa0_pa1_pwm_set_dutycycle>
	uart2_rxtx_init();
 800086e:	f000 fbb9 	bl	8000fe4 <uart2_rxtx_init>
	SysTick_Init();
 8000872:	f000 fa5f 	bl	8000d34 <SysTick_Init>
	kbhit();
 8000876:	f000 fb81 	bl	8000f7c <kbhit>
	Uart1_Init();
 800087a:	f000 fc5d 	bl	8001138 <Uart1_Init>
	SysTick_Handler();
 800087e:	f000 fa85 	bl	8000d8c <SysTick_Handler>
	RCC->AHB1ENR |= GPIOAEN;
 8000882:	4b25      	ldr	r3, [pc, #148]	; (8000918 <main+0xc8>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a24      	ldr	r2, [pc, #144]	; (8000918 <main+0xc8>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= (1U<<10);
 800088e:	4b23      	ldr	r3, [pc, #140]	; (800091c <main+0xcc>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a22      	ldr	r2, [pc, #136]	; (800091c <main+0xcc>)
 8000894:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000898:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 800089a:	4b20      	ldr	r3, [pc, #128]	; (800091c <main+0xcc>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a1f      	ldr	r2, [pc, #124]	; (800091c <main+0xcc>)
 80008a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80008a4:	6013      	str	r3, [r2, #0]

	printf("Welcome to Link Optimization\n\r");
 80008a6:	481e      	ldr	r0, [pc, #120]	; (8000920 <main+0xd0>)
 80008a8:	f000 fe06 	bl	80014b8 <iprintf>
	while(1)
	{

		if(heartbeat == true)	//Utilization of hardware clock SysTick by interrupt
 80008ac:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <main+0xd4>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d02d      	beq.n	8000912 <main+0xc2>
		{
			heartbeat = false;	//Sets conditional statement false which is set true in the interrupt handler
 80008b6:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <main+0xd4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
			count++;	//increments the counter
 80008bc:	88fb      	ldrh	r3, [r7, #6]
 80008be:	3301      	adds	r3, #1
 80008c0:	80fb      	strh	r3, [r7, #6]
			if((count % 50) == 0)	//Conditional statement that flashes LED2 every 50 ms
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	4a18      	ldr	r2, [pc, #96]	; (8000928 <main+0xd8>)
 80008c6:	fba2 1203 	umull	r1, r2, r2, r3
 80008ca:	0912      	lsrs	r2, r2, #4
 80008cc:	2132      	movs	r1, #50	; 0x32
 80008ce:	fb01 f202 	mul.w	r2, r1, r2
 80008d2:	1a9b      	subs	r3, r3, r2
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d105      	bne.n	80008e6 <main+0x96>
			{
			GPIOA->ODR ^= LED;
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <main+0xcc>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	4a0f      	ldr	r2, [pc, #60]	; (800091c <main+0xcc>)
 80008e0:	f083 0320 	eor.w	r3, r3, #32
 80008e4:	6153      	str	r3, [r2, #20]
			}
			Read_RSSI(); 	//Reads RSSI_NEW value
 80008e6:	f7ff ff65 	bl	80007b4 <Read_RSSI>
			control_X(); 	// First process of PID algorithm in X axis
 80008ea:	f7ff ff23 	bl	8000734 <control_X>
			PID_Controller_X(xCmd, xPos);
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <main+0xdc>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <main+0xe0>)
 80008f4:	6812      	ldr	r2, [r2, #0]
 80008f6:	4611      	mov	r1, r2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fe7d 	bl	80005f8 <PID_Controller_X>
//			printf("xPos: %i\n\r", xPos);
			Motor_Position();
 80008fe:	f7ff ff03 	bl	8000708 <Motor_Position>
			control_Y();
 8000902:	f7ff ff37 	bl	8000774 <control_Y>
//			printf("yPos: %i\n\r", yPos);

			if (!manual_mode) {
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <main+0xe4>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d101      	bne.n	8000912 <main+0xc2>
				Motor_Position(); 	//Debug process which gets stuck in this loop and stops all function
 800090e:	f7ff fefb 	bl	8000708 <Motor_Position>
			}

		}
	process_console();	//Parsing which reads a keyboard input for manually setting different functions
 8000912:	f000 f811 	bl	8000938 <process_console>
	{
 8000916:	e7c9      	b.n	80008ac <main+0x5c>
 8000918:	40023800 	.word	0x40023800
 800091c:	40020000 	.word	0x40020000
 8000920:	080022cc 	.word	0x080022cc
 8000924:	200000bc 	.word	0x200000bc
 8000928:	51eb851f 	.word	0x51eb851f
 800092c:	200000c0 	.word	0x200000c0
 8000930:	20000010 	.word	0x20000010
 8000934:	200000bd 	.word	0x200000bd

08000938 <process_console>:
uint8_t manual_mode = 0;
int xCmd = 0;
int yCmd = 0;

void process_console(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
	char cmd;
	char ch;
	uint16_t value;

	if(kbhit())
 800093e:	f000 fb1d 	bl	8000f7c <kbhit>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	f000 80ca 	beq.w	8000ade <process_console+0x1a6>
		{
			cmd = uart2_read();
 800094a:	f000 fb03 	bl	8000f54 <uart2_read>
 800094e:	4603      	mov	r3, r0
 8000950:	70fb      	strb	r3, [r7, #3]
			ch = uart2_read();	// dummy read of '='
 8000952:	f000 faff 	bl	8000f54 <uart2_read>
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
			value = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	80bb      	strh	r3, [r7, #4]
			ch = uart2_read();
 800095e:	f000 faf9 	bl	8000f54 <uart2_read>
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
			while (ch != 13) {
 8000966:	e00f      	b.n	8000988 <process_console+0x50>
				value = 10 * value + ch - '0';
 8000968:	88bb      	ldrh	r3, [r7, #4]
 800096a:	461a      	mov	r2, r3
 800096c:	0092      	lsls	r2, r2, #2
 800096e:	4413      	add	r3, r2
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	b29a      	uxth	r2, r3
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	b29b      	uxth	r3, r3
 8000978:	4413      	add	r3, r2
 800097a:	b29b      	uxth	r3, r3
 800097c:	3b30      	subs	r3, #48	; 0x30
 800097e:	80bb      	strh	r3, [r7, #4]
				ch = uart2_read();
 8000980:	f000 fae8 	bl	8000f54 <uart2_read>
 8000984:	4603      	mov	r3, r0
 8000986:	71fb      	strb	r3, [r7, #7]
			while (ch != 13) {
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	2b0d      	cmp	r3, #13
 800098c:	d1ec      	bne.n	8000968 <process_console+0x30>
			}

		    switch(cmd) {
 800098e:	78fb      	ldrb	r3, [r7, #3]
 8000990:	3b58      	subs	r3, #88	; 0x58
 8000992:	2b21      	cmp	r3, #33	; 0x21
 8000994:	f200 80a3 	bhi.w	8000ade <process_console+0x1a6>
 8000998:	a201      	add	r2, pc, #4	; (adr r2, 80009a0 <process_console+0x68>)
 800099a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800099e:	bf00      	nop
 80009a0:	08000ad7 	.word	0x08000ad7
 80009a4:	08000adf 	.word	0x08000adf
 80009a8:	08000adf 	.word	0x08000adf
 80009ac:	08000adf 	.word	0x08000adf
 80009b0:	08000adf 	.word	0x08000adf
 80009b4:	08000adf 	.word	0x08000adf
 80009b8:	08000adf 	.word	0x08000adf
 80009bc:	08000adf 	.word	0x08000adf
 80009c0:	08000adf 	.word	0x08000adf
 80009c4:	08000adf 	.word	0x08000adf
 80009c8:	08000adf 	.word	0x08000adf
 80009cc:	08000adf 	.word	0x08000adf
 80009d0:	08000a91 	.word	0x08000a91
 80009d4:	08000adf 	.word	0x08000adf
 80009d8:	08000adf 	.word	0x08000adf
 80009dc:	08000adf 	.word	0x08000adf
 80009e0:	08000a33 	.word	0x08000a33
 80009e4:	08000a6b 	.word	0x08000a6b
 80009e8:	08000adf 	.word	0x08000adf
 80009ec:	08000adf 	.word	0x08000adf
 80009f0:	08000adf 	.word	0x08000adf
 80009f4:	08000a29 	.word	0x08000a29
 80009f8:	08000adf 	.word	0x08000adf
 80009fc:	08000adf 	.word	0x08000adf
 8000a00:	08000a45 	.word	0x08000a45
 8000a04:	08000adf 	.word	0x08000adf
 8000a08:	08000adf 	.word	0x08000adf
 8000a0c:	08000adf 	.word	0x08000adf
 8000a10:	08000ab7 	.word	0x08000ab7
 8000a14:	08000adf 	.word	0x08000adf
 8000a18:	08000adf 	.word	0x08000adf
 8000a1c:	08000adf 	.word	0x08000adf
 8000a20:	08000ac9 	.word	0x08000ac9
 8000a24:	08000ad1 	.word	0x08000ad1
				case 'm':
					manual_mode = value;
 8000a28:	88bb      	ldrh	r3, [r7, #4]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ae8 <process_console+0x1b0>)
 8000a2e:	701a      	strb	r2, [r3, #0]
					break;
 8000a30:	e055      	b.n	8000ade <process_console+0x1a6>
				case 'h':
					heartbeat = value;
 8000a32:	88bb      	ldrh	r3, [r7, #4]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	bf14      	ite	ne
 8000a38:	2301      	movne	r3, #1
 8000a3a:	2300      	moveq	r3, #0
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4b2b      	ldr	r3, [pc, #172]	; (8000aec <process_console+0x1b4>)
 8000a40:	701a      	strb	r2, [r3, #0]
					break;
 8000a42:	e04c      	b.n	8000ade <process_console+0x1a6>
				case 'p':
					KP = value;
 8000a44:	88bb      	ldrh	r3, [r7, #4]
 8000a46:	ee07 3a90 	vmov	s15, r3
 8000a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a4e:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <process_console+0x1b8>)
 8000a50:	edc3 7a00 	vstr	s15, [r3]
					printf("KP: %i\n\r", KP);
 8000a54:	4b26      	ldr	r3, [pc, #152]	; (8000af0 <process_console+0x1b8>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fd75 	bl	8000548 <__aeabi_f2d>
 8000a5e:	4602      	mov	r2, r0
 8000a60:	460b      	mov	r3, r1
 8000a62:	4824      	ldr	r0, [pc, #144]	; (8000af4 <process_console+0x1bc>)
 8000a64:	f000 fd28 	bl	80014b8 <iprintf>
					break;
 8000a68:	e039      	b.n	8000ade <process_console+0x1a6>
				case 'i':
					KI = value;
 8000a6a:	88bb      	ldrh	r3, [r7, #4]
 8000a6c:	ee07 3a90 	vmov	s15, r3
 8000a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a74:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <process_console+0x1c0>)
 8000a76:	edc3 7a00 	vstr	s15, [r3]
					printf("KI: %i\n\r", KI);
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <process_console+0x1c0>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fd62 	bl	8000548 <__aeabi_f2d>
 8000a84:	4602      	mov	r2, r0
 8000a86:	460b      	mov	r3, r1
 8000a88:	481c      	ldr	r0, [pc, #112]	; (8000afc <process_console+0x1c4>)
 8000a8a:	f000 fd15 	bl	80014b8 <iprintf>
					break;
 8000a8e:	e026      	b.n	8000ade <process_console+0x1a6>
				case 'd':
					KD = value;
 8000a90:	88bb      	ldrh	r3, [r7, #4]
 8000a92:	ee07 3a90 	vmov	s15, r3
 8000a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a9a:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <process_console+0x1c8>)
 8000a9c:	edc3 7a00 	vstr	s15, [r3]
					printf("KD: %i\n\r", KD);
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <process_console+0x1c8>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fd4f 	bl	8000548 <__aeabi_f2d>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	460b      	mov	r3, r1
 8000aae:	4815      	ldr	r0, [pc, #84]	; (8000b04 <process_console+0x1cc>)
 8000ab0:	f000 fd02 	bl	80014b8 <iprintf>
					break;
 8000ab4:	e013      	b.n	8000ade <process_console+0x1a6>
				case 't':
					DT = value;
 8000ab6:	88bb      	ldrh	r3, [r7, #4]
 8000ab8:	ee07 3a90 	vmov	s15, r3
 8000abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <process_console+0x1d0>)
 8000ac2:	edc3 7a00 	vstr	s15, [r3]
					break;
 8000ac6:	e00a      	b.n	8000ade <process_console+0x1a6>
		        case 'x':	// command x=123<cr>
#if 0

#else
		        	xCmd = value;
 8000ac8:	88bb      	ldrh	r3, [r7, #4]
 8000aca:	4a10      	ldr	r2, [pc, #64]	; (8000b0c <process_console+0x1d4>)
 8000acc:	6013      	str	r3, [r2, #0]
#endif

		            break;
 8000ace:	e006      	b.n	8000ade <process_console+0x1a6>
		        case 'y':
#if 0

#else
		        	yCmd = value;
 8000ad0:	88bb      	ldrh	r3, [r7, #4]
 8000ad2:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <process_console+0x1d8>)
 8000ad4:	6013      	str	r3, [r2, #0]
#endif
		        case 'X':
		        	xPos = value;
 8000ad6:	88bb      	ldrh	r3, [r7, #4]
 8000ad8:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <process_console+0x1dc>)
 8000ada:	6013      	str	r3, [r2, #0]
		        	break;
 8000adc:	bf00      	nop

		    }

	}

}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000bd 	.word	0x200000bd
 8000aec:	200000bc 	.word	0x200000bc
 8000af0:	20000000 	.word	0x20000000
 8000af4:	080022ec 	.word	0x080022ec
 8000af8:	20000004 	.word	0x20000004
 8000afc:	080022f8 	.word	0x080022f8
 8000b00:	20000008 	.word	0x20000008
 8000b04:	08002304 	.word	0x08002304
 8000b08:	2000000c 	.word	0x2000000c
 8000b0c:	200000c0 	.word	0x200000c0
 8000b10:	200000c4 	.word	0x200000c4
 8000b14:	20000010 	.word	0x20000010

08000b18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return 1;
 8000b1c:	2301      	movs	r3, #1
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <_kill>:

int _kill(int pid, int sig)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b32:	f000 fd65 	bl	8001600 <__errno>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2216      	movs	r2, #22
 8000b3a:	601a      	str	r2, [r3, #0]
  return -1;
 8000b3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <_exit>:

void _exit (int status)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b50:	f04f 31ff 	mov.w	r1, #4294967295
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ffe7 	bl	8000b28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b5a:	e7fe      	b.n	8000b5a <_exit+0x12>

08000b5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	e00a      	b.n	8000b84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b6e:	f3af 8000 	nop.w
 8000b72:	4601      	mov	r1, r0
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	1c5a      	adds	r2, r3, #1
 8000b78:	60ba      	str	r2, [r7, #8]
 8000b7a:	b2ca      	uxtb	r2, r1
 8000b7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	3301      	adds	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	dbf0      	blt.n	8000b6e <_read+0x12>
  }

  return len;
 8000b8c:	687b      	ldr	r3, [r7, #4]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	60f8      	str	r0, [r7, #12]
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	e009      	b.n	8000bbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	60ba      	str	r2, [r7, #8]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f9f3 	bl	8000f9c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	697a      	ldr	r2, [r7, #20]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	dbf1      	blt.n	8000ba8 <_write+0x12>
  }
  return len;
 8000bc4:	687b      	ldr	r3, [r7, #4]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <_close>:

int _close(int file)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
 8000bee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bf6:	605a      	str	r2, [r3, #4]
  return 0;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <_isatty>:

int _isatty(int file)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c40:	4a14      	ldr	r2, [pc, #80]	; (8000c94 <_sbrk+0x5c>)
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <_sbrk+0x60>)
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d102      	bne.n	8000c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <_sbrk+0x64>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <_sbrk+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d207      	bcs.n	8000c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c68:	f000 fcca 	bl	8001600 <__errno>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	220c      	movs	r2, #12
 8000c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	e009      	b.n	8000c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7e:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	4a05      	ldr	r2, [pc, #20]	; (8000c9c <_sbrk+0x64>)
 8000c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20020000 	.word	0x20020000
 8000c98:	00000400 	.word	0x00000400
 8000c9c:	200000c8 	.word	0x200000c8
 8000ca0:	20000220 	.word	0x20000220

08000ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	db0b      	blt.n	8000cce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f003 021f 	and.w	r2, r3, #31
 8000cbc:	4907      	ldr	r1, [pc, #28]	; (8000cdc <__NVIC_EnableIRQ+0x38>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	095b      	lsrs	r3, r3, #5
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000e100 	.word	0xe000e100

08000ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db0a      	blt.n	8000d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	490c      	ldr	r1, [pc, #48]	; (8000d2c <__NVIC_SetPriority+0x4c>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d08:	e00a      	b.n	8000d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4908      	ldr	r1, [pc, #32]	; (8000d30 <__NVIC_SetPriority+0x50>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	3b04      	subs	r3, #4
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <SysTick_Init>:


//******************************************************************************************
// Initialize SysTick
//******************************************************************************************
void SysTick_Init(void){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	// The RCC feeds the Cortex System Timer (SysTick) external clock with the AHB clock
	// (HCLK) divided by 8. The SysTick can work either with this clock or with the Cortex clock
	// (HCLK), configurable in the SysTick Control and Status Register.

	//  SysTick Control and Status Register
	SysTick->CTRL = 0;										// Disable SysTick IRQ and SysTick Counter
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <SysTick_Init+0x50>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]

	// SysTick Reload Value Register - Note: HCLK = 80MHz (no divide by 8)
	SysTick->LOAD = 16000000 / 50;    // 1ms, Default clock
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <SysTick_Init+0x50>)
 8000d40:	4a11      	ldr	r2, [pc, #68]	; (8000d88 <SysTick_Init+0x54>)
 8000d42:	605a      	str	r2, [r3, #4]

	// SysTick Current Value Register
	SysTick->VAL = 0;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <SysTick_Init+0x50>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]

	NVIC_SetPriority(SysTick_IRQn, 1);		// Set Priority to 1
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f7ff ffc6 	bl	8000ce0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(SysTick_IRQn);					// Enable EXTI0_1 interrupt in NVIC
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295
 8000d58:	f7ff ffa4 	bl	8000ca4 <__NVIC_EnableIRQ>

	// Enables SysTick exception request
	// 1 = counting down to zero asserts the SysTick exception request
	// 0 = counting down to zero does not assert the SysTick exception request
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <SysTick_Init+0x50>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a08      	ldr	r2, [pc, #32]	; (8000d84 <SysTick_Init+0x50>)
 8000d62:	f043 0302 	orr.w	r3, r3, #2
 8000d66:	6013      	str	r3, [r2, #0]

	// Select processor clock
	// 1 = processor clock;  0 = external clock
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <SysTick_Init+0x50>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <SysTick_Init+0x50>)
 8000d6e:	f043 0304 	orr.w	r3, r3, #4
 8000d72:	6013      	str	r3, [r2, #0]

	// Enable SysTick IRQ and SysTick Timer
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <SysTick_Init+0x50>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a02      	ldr	r2, [pc, #8]	; (8000d84 <SysTick_Init+0x50>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	e000e010 	.word	0xe000e010
 8000d88:	0004e200 	.word	0x0004e200

08000d8c <SysTick_Handler>:


//******************************************************************************************
// SysTick Interrupt Handler
//******************************************************************************************
void SysTick_Handler(void){
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
	msTicks++;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <SysTick_Handler+0x20>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	3301      	adds	r3, #1
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <SysTick_Handler+0x20>)
 8000d98:	6013      	str	r3, [r2, #0]
	heartbeat = true;
 8000d9a:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <SysTick_Handler+0x24>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	701a      	strb	r2, [r3, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	200000cc 	.word	0x200000cc
 8000db0:	200000bc 	.word	0x200000bc

08000db4 <tim2_pa0_pa1_pwm_init>:
#define TIM2EN			(1U<<0)
#define CR1_CEN			(1U<<0)


void tim2_pa0_pa1_pwm_init(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
	/*******GPIO Configuration*********/
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000db8:	4b56      	ldr	r3, [pc, #344]	; (8000f14 <tim2_pa0_pa1_pwm_init+0x160>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	4a55      	ldr	r2, [pc, #340]	; (8000f14 <tim2_pa0_pa1_pwm_init+0x160>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	6313      	str	r3, [r2, #48]	; 0x30
	/*set PA0 and PA1 modes to alternate function mode*/
	/*PA0*/
	GPIOA->MODER &= ~(1U<<0);
 8000dc4:	4b54      	ldr	r3, [pc, #336]	; (8000f18 <tim2_pa0_pa1_pwm_init+0x164>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a53      	ldr	r2, [pc, #332]	; (8000f18 <tim2_pa0_pa1_pwm_init+0x164>)
 8000dca:	f023 0301 	bic.w	r3, r3, #1
 8000dce:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<1);
 8000dd0:	4b51      	ldr	r3, [pc, #324]	; (8000f18 <tim2_pa0_pa1_pwm_init+0x164>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a50      	ldr	r2, [pc, #320]	; (8000f18 <tim2_pa0_pa1_pwm_init+0x164>)
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	6013      	str	r3, [r2, #0]

	/*PA1*/
	GPIOA->MODER &= ~(1U<<2);
 8000ddc:	4b4e      	ldr	r3, [pc, #312]	; (8000f18 <tim2_pa0_pa1_pwm_init+0x164>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a4d      	ldr	r2, [pc, #308]	; (8000f18 <tim2_pa0_pa1_pwm_init+0x164>)
 8000de2:	f023 0304 	bic.w	r3, r3, #4
 8000de6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<3);
 8000de8:	4b4b      	ldr	r3, [pc, #300]	; (8000f18 <tim2_pa0_pa1_pwm_init+0x164>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a4a      	ldr	r2, [pc, #296]	; (8000f18 <tim2_pa0_pa1_pwm_init+0x164>)
 8000dee:	f043 0308 	orr.w	r3, r3, #8
 8000df2:	6013      	str	r3, [r2, #0]

	/*set alternate function type to TIM2 (AF01 0001)*/
	/*Set AFR for PA0*/
	GPIOA->AFR[0] |= (1U<<0);
 8000df4:	4b48      	ldr	r3, [pc, #288]	; (8000f18 <tim2_pa0_pa1_pwm_init+0x164>)
 8000df6:	6a1b      	ldr	r3, [r3, #32]
 8000df8:	4a47      	ldr	r2, [pc, #284]	; (8000f18 <tim2_pa0_pa1_pwm_init+0x164>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<1);
 8000e00:	4b45      	ldr	r3, [pc, #276]	; (8000f18 <tim2_pa0_pa1_pwm_init+0x164>)
 8000e02:	6a1b      	ldr	r3, [r3, #32]
 8000e04:	4a44      	ldr	r2, [pc, #272]	; (8000f18 <tim2_pa0_pa1_pwm_init+0x164>)
 8000e06:	f023 0302 	bic.w	r3, r3, #2
 8000e0a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<2);
 8000e0c:	4b42      	ldr	r3, [pc, #264]	; (8000f18 <tim2_pa0_pa1_pwm_init+0x164>)
 8000e0e:	6a1b      	ldr	r3, [r3, #32]
 8000e10:	4a41      	ldr	r2, [pc, #260]	; (8000f18 <tim2_pa0_pa1_pwm_init+0x164>)
 8000e12:	f023 0304 	bic.w	r3, r3, #4
 8000e16:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<3);
 8000e18:	4b3f      	ldr	r3, [pc, #252]	; (8000f18 <tim2_pa0_pa1_pwm_init+0x164>)
 8000e1a:	6a1b      	ldr	r3, [r3, #32]
 8000e1c:	4a3e      	ldr	r2, [pc, #248]	; (8000f18 <tim2_pa0_pa1_pwm_init+0x164>)
 8000e1e:	f023 0308 	bic.w	r3, r3, #8
 8000e22:	6213      	str	r3, [r2, #32]

	/*Set AFR for PA1*/
	GPIOA->AFR[0] |= (1U<<4);
 8000e24:	4b3c      	ldr	r3, [pc, #240]	; (8000f18 <tim2_pa0_pa1_pwm_init+0x164>)
 8000e26:	6a1b      	ldr	r3, [r3, #32]
 8000e28:	4a3b      	ldr	r2, [pc, #236]	; (8000f18 <tim2_pa0_pa1_pwm_init+0x164>)
 8000e2a:	f043 0310 	orr.w	r3, r3, #16
 8000e2e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<5);
 8000e30:	4b39      	ldr	r3, [pc, #228]	; (8000f18 <tim2_pa0_pa1_pwm_init+0x164>)
 8000e32:	6a1b      	ldr	r3, [r3, #32]
 8000e34:	4a38      	ldr	r2, [pc, #224]	; (8000f18 <tim2_pa0_pa1_pwm_init+0x164>)
 8000e36:	f023 0320 	bic.w	r3, r3, #32
 8000e3a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<6);
 8000e3c:	4b36      	ldr	r3, [pc, #216]	; (8000f18 <tim2_pa0_pa1_pwm_init+0x164>)
 8000e3e:	6a1b      	ldr	r3, [r3, #32]
 8000e40:	4a35      	ldr	r2, [pc, #212]	; (8000f18 <tim2_pa0_pa1_pwm_init+0x164>)
 8000e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e46:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<7);
 8000e48:	4b33      	ldr	r3, [pc, #204]	; (8000f18 <tim2_pa0_pa1_pwm_init+0x164>)
 8000e4a:	6a1b      	ldr	r3, [r3, #32]
 8000e4c:	4a32      	ldr	r2, [pc, #200]	; (8000f18 <tim2_pa0_pa1_pwm_init+0x164>)
 8000e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e52:	6213      	str	r3, [r2, #32]
	/*******Tim2 Configuration*********/
	/*Enable clock access to TIM2*/
	RCC->APB1ENR |= TIM2EN;
 8000e54:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <tim2_pa0_pa1_pwm_init+0x160>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	4a2e      	ldr	r2, [pc, #184]	; (8000f14 <tim2_pa0_pa1_pwm_init+0x160>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	6413      	str	r3, [r2, #64]	; 0x40
	/*set timer prescaler*/
	TIM2->PSC = 80;  // 16 000 000 no divider = 16 000 000
 8000e60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e64:	2250      	movs	r2, #80	; 0x50
 8000e66:	629a      	str	r2, [r3, #40]	; 0x28
	/*set auto reload value*/
	TIM2->ARR = 3250 - 1; //16 000 000 / 100 = 160 000
 8000e68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e6c:	f640 42b1 	movw	r2, #3249	; 0xcb1
 8000e70:	62da      	str	r2, [r3, #44]	; 0x2c
	/*reset the timer count*/
	TIM2->CNT = 0;
 8000e72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e76:	2200      	movs	r2, #0
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24
	/*Set PA1 (channel 2) and PA0 (channel 1) to 110 : PWM mode 1 finding OC1M (CH1) and OC2M (CH2) in the reference manual under CCMR1*/
	/*PA0*/
	TIM2->CCMR1 &= ~(1U<<4);
 8000e7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e84:	f023 0310 	bic.w	r3, r3, #16
 8000e88:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=  (1U<<5);
 8000e8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e94:	f043 0320 	orr.w	r3, r3, #32
 8000e98:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=  (1U<<6);
 8000e9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea8:	6193      	str	r3, [r2, #24]
	/*PA1*/
	TIM2->CCMR1 &= ~(1U<<12);
 8000eaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000eb8:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=  (1U<<13);
 8000eba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ec8:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=  (1U<<14);
 8000eca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed8:	6193      	str	r3, [r2, #24]
	/*Enable ch1 and ch2 search CCER in the reference manual*/
	/*Channel 1*/
	TIM2->CCER |= (1U<<0);
 8000eda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6213      	str	r3, [r2, #32]
	/*Channel 2*/
	TIM2->CCER |= (1U<<4);
 8000eea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eee:	6a1b      	ldr	r3, [r3, #32]
 8000ef0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ef4:	f043 0310 	orr.w	r3, r3, #16
 8000ef8:	6213      	str	r3, [r2, #32]
	/*enable timer find timx_cr1 in the reference manual and enable CEN (counter enable)*/
	TIM2->CR1 |= CR1_CEN;
 8000efa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6013      	str	r3, [r2, #0]

}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020000 	.word	0x40020000

08000f1c <tim2_pa0_pa1_pwm_set_dutycycle>:



void tim2_pa0_pa1_pwm_set_dutycycle(uint8_t ch, uint32_t dutycycle)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
	/*Select Channel*/
	switch(ch)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d002      	beq.n	8000f34 <tim2_pa0_pa1_pwm_set_dutycycle+0x18>
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d005      	beq.n	8000f3e <tim2_pa0_pa1_pwm_set_dutycycle+0x22>
			break;
		case 2:
			TIM2->CCR2 = dutycycle;
			break;
		default:
			break;
 8000f32:	e009      	b.n	8000f48 <tim2_pa0_pa1_pwm_set_dutycycle+0x2c>
			TIM2->CCR1 = dutycycle;
 8000f34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000f3c:	e004      	b.n	8000f48 <tim2_pa0_pa1_pwm_set_dutycycle+0x2c>
			TIM2->CCR2 = dutycycle;
 8000f3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 8000f46:	bf00      	nop
	}

}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <uart2_read>:
void uart2_write(int ch);



char uart2_read(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
	/*make sure the transmit data register is not empty RXNE flag*/
	while(!(USART2->SR & SR_RXNE)){}	//to read a register we use the & operation
 8000f58:	bf00      	nop
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <uart2_read+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0320 	and.w	r3, r3, #32
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d0f9      	beq.n	8000f5a <uart2_read+0x6>

	/* read data */
	return USART2->DR;
 8000f66:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <uart2_read+0x24>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	b2db      	uxtb	r3, r3
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40004400 	.word	0x40004400

08000f7c <kbhit>:

char kbhit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
	/*make sure the transmit data register is not empty RXNE flag*/
	//to read a register we use the & operation

	return (USART2->SR & SR_RXNE);
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <kbhit+0x1c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	f003 0320 	and.w	r3, r3, #32
 8000f8a:	b2db      	uxtb	r3, r3
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40004400 	.word	0x40004400

08000f9c <__io_putchar>:


int __io_putchar(int ch) //allows printf to function calling the uart2_write(ch)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f000 f805 	bl	8000fb4 <uart2_write>
	return ch;
 8000faa:	687b      	ldr	r3, [r7, #4]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <uart2_write>:


void uart2_write(int ch)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	/*make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}	//to read a register we use the & operation
 8000fbc:	bf00      	nop
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <uart2_write+0x2c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d0f9      	beq.n	8000fbe <uart2_write+0xa>
	/*write to transmit data register*/

	USART2->DR = (ch & 0xFF);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <uart2_write+0x2c>)
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	6053      	str	r3, [r2, #4]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40004400 	.word	0x40004400

08000fe4 <uart2_rxtx_init>:

void uart2_rxtx_init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	/* ************* configure uart gpio pin ************/
	 //1. enable clock access to gpio a
	RCC->AHB1ENR |= GPIOAEN;
 8000fe8:	4b32      	ldr	r3, [pc, #200]	; (80010b4 <uart2_rxtx_init+0xd0>)
 8000fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fec:	4a31      	ldr	r2, [pc, #196]	; (80010b4 <uart2_rxtx_init+0xd0>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	6313      	str	r3, [r2, #48]	; 0x30
	 // 2. set PA2 mode to alternate function mode
	GPIOA->MODER &= ~(1U<<4);
 8000ff4:	4b30      	ldr	r3, [pc, #192]	; (80010b8 <uart2_rxtx_init+0xd4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a2f      	ldr	r2, [pc, #188]	; (80010b8 <uart2_rxtx_init+0xd4>)
 8000ffa:	f023 0310 	bic.w	r3, r3, #16
 8000ffe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8001000:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <uart2_rxtx_init+0xd4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a2c      	ldr	r2, [pc, #176]	; (80010b8 <uart2_rxtx_init+0xd4>)
 8001006:	f043 0320 	orr.w	r3, r3, #32
 800100a:	6013      	str	r3, [r2, #0]
	 // 3. set PA2 alternate function type to UART_TX (AF07)
	GPIOA->AFR[0] |= (1U<<8);
 800100c:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <uart2_rxtx_init+0xd4>)
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	4a29      	ldr	r2, [pc, #164]	; (80010b8 <uart2_rxtx_init+0xd4>)
 8001012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001016:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <uart2_rxtx_init+0xd4>)
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	4a26      	ldr	r2, [pc, #152]	; (80010b8 <uart2_rxtx_init+0xd4>)
 800101e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001022:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8001024:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <uart2_rxtx_init+0xd4>)
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	4a23      	ldr	r2, [pc, #140]	; (80010b8 <uart2_rxtx_init+0xd4>)
 800102a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800102e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 8001030:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <uart2_rxtx_init+0xd4>)
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	4a20      	ldr	r2, [pc, #128]	; (80010b8 <uart2_rxtx_init+0xd4>)
 8001036:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800103a:	6213      	str	r3, [r2, #32]


	// 2. set PA3 mode to alternate function mode
	GPIOA->MODER &= ~(1U<<6);
 800103c:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <uart2_rxtx_init+0xd4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a1d      	ldr	r2, [pc, #116]	; (80010b8 <uart2_rxtx_init+0xd4>)
 8001042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001046:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<7);
 8001048:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <uart2_rxtx_init+0xd4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a1a      	ldr	r2, [pc, #104]	; (80010b8 <uart2_rxtx_init+0xd4>)
 800104e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001052:	6013      	str	r3, [r2, #0]
	// 3. set PA3 alternate function type to UART_RX (AF07)
	GPIOA->AFR[0] |= (1U<<12);
 8001054:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <uart2_rxtx_init+0xd4>)
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	4a17      	ldr	r2, [pc, #92]	; (80010b8 <uart2_rxtx_init+0xd4>)
 800105a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800105e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 8001060:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <uart2_rxtx_init+0xd4>)
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	4a14      	ldr	r2, [pc, #80]	; (80010b8 <uart2_rxtx_init+0xd4>)
 8001066:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800106a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <uart2_rxtx_init+0xd4>)
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	4a11      	ldr	r2, [pc, #68]	; (80010b8 <uart2_rxtx_init+0xd4>)
 8001072:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001076:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <uart2_rxtx_init+0xd4>)
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <uart2_rxtx_init+0xd4>)
 800107e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001082:	6213      	str	r3, [r2, #32]
	/************** configure uart gpio pin ************/
	//Enable clock access to uart2
	RCC->APB1ENR |= UART2EN;
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <uart2_rxtx_init+0xd0>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <uart2_rxtx_init+0xd0>)
 800108a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108e:	6413      	str	r3, [r2, #64]	; 0x40
	//configure baudrate (there is an equation which is the bus frequency)
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8001090:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001094:	4909      	ldr	r1, [pc, #36]	; (80010bc <uart2_rxtx_init+0xd8>)
 8001096:	480a      	ldr	r0, [pc, #40]	; (80010c0 <uart2_rxtx_init+0xdc>)
 8001098:	f000 f814 	bl	80010c4 <uart_set_baudrate>
	//configure the transfer direction
	USART2->CR1 = CR1_TE | CR1_RE;
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <uart2_rxtx_init+0xdc>)
 800109e:	220c      	movs	r2, #12
 80010a0:	60da      	str	r2, [r3, #12]
	//enable uart module
	USART2->CR1 |= CR1_UE;		//the OR operator (|) keeps all 32 bits the same and only changes 13
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <uart2_rxtx_init+0xdc>)
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <uart2_rxtx_init+0xdc>)
 80010a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010ac:	60d3      	str	r3, [r2, #12]
								//if the = operator is used than it will set all but 13 to zero and change only 13


}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020000 	.word	0x40020000
 80010bc:	00f42400 	.word	0x00f42400
 80010c0:	40004400 	.word	0x40004400

080010c4 <uart_set_baudrate>:




static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_BD(PeriphClk,BaudRate);
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	68b8      	ldr	r0, [r7, #8]
 80010d4:	f000 f808 	bl	80010e8 <compute_uart_BD>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	609a      	str	r2, [r3, #8]
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <compute_uart_BD>:


static uint16_t compute_uart_BD(uint32_t PeriphClk, uint32_t BaudRate)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	085a      	lsrs	r2, r3, #1
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	441a      	add	r2, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001100:	b29b      	uxth	r3, r3
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <Uart1_Read>:




char Uart1_Read(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
	while(!(USART1->SR & SR_RXNE)){}
 8001114:	bf00      	nop
 8001116:	4b07      	ldr	r3, [pc, #28]	; (8001134 <Uart1_Read+0x24>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0320 	and.w	r3, r3, #32
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0f9      	beq.n	8001116 <Uart1_Read+0x6>

	return USART1->DR;
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <Uart1_Read+0x24>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	b2db      	uxtb	r3, r3
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40011000 	.word	0x40011000

08001138 <Uart1_Init>:

	USART1->DR = (ch & 0xFF);
}

void Uart1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
/* ENABLE CLOCK TO GPIOA */
	RCC->AHB1ENR |= GPIOAEN; //CLOCK ACCESS TO GPIOA
 800113c:	4b32      	ldr	r3, [pc, #200]	; (8001208 <Uart1_Init+0xd0>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001140:	4a31      	ldr	r2, [pc, #196]	; (8001208 <Uart1_Init+0xd0>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	6313      	str	r3, [r2, #48]	; 0x30


/*PA 9 TX */
	GPIOA->MODER &=	~(1U<<18); //SET BIT 18 TO ZERO
 8001148:	4b30      	ldr	r3, [pc, #192]	; (800120c <Uart1_Init+0xd4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a2f      	ldr	r2, [pc, #188]	; (800120c <Uart1_Init+0xd4>)
 800114e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001152:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<19); //SET BIT 19 TO 1
 8001154:	4b2d      	ldr	r3, [pc, #180]	; (800120c <Uart1_Init+0xd4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a2c      	ldr	r2, [pc, #176]	; (800120c <Uart1_Init+0xd4>)
 800115a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800115e:	6013      	str	r3, [r2, #0]
/* SET AFRH TO 07 0111 */
	GPIOA->AFR[1] |=  (1U<<4);
 8001160:	4b2a      	ldr	r3, [pc, #168]	; (800120c <Uart1_Init+0xd4>)
 8001162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001164:	4a29      	ldr	r2, [pc, #164]	; (800120c <Uart1_Init+0xd4>)
 8001166:	f043 0310 	orr.w	r3, r3, #16
 800116a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=  (1U<<5);
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <Uart1_Init+0xd4>)
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	4a26      	ldr	r2, [pc, #152]	; (800120c <Uart1_Init+0xd4>)
 8001172:	f043 0320 	orr.w	r3, r3, #32
 8001176:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=  (1U<<6);
 8001178:	4b24      	ldr	r3, [pc, #144]	; (800120c <Uart1_Init+0xd4>)
 800117a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117c:	4a23      	ldr	r2, [pc, #140]	; (800120c <Uart1_Init+0xd4>)
 800117e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001182:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1U<<7);
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <Uart1_Init+0xd4>)
 8001186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001188:	4a20      	ldr	r2, [pc, #128]	; (800120c <Uart1_Init+0xd4>)
 800118a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800118e:	6253      	str	r3, [r2, #36]	; 0x24




/*PA 10 RX */
	GPIOA->MODER &= ~(1U<<20);	//SET BIT 20 TO 0
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <Uart1_Init+0xd4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a1d      	ldr	r2, [pc, #116]	; (800120c <Uart1_Init+0xd4>)
 8001196:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800119a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<21);	//SET BIT 21 TO 1
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <Uart1_Init+0xd4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a1a      	ldr	r2, [pc, #104]	; (800120c <Uart1_Init+0xd4>)
 80011a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011a6:	6013      	str	r3, [r2, #0]
/* SET AFRH TO 07 0111 */
	GPIOA->AFR[1] |=  (1U<<8);
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <Uart1_Init+0xd4>)
 80011aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ac:	4a17      	ldr	r2, [pc, #92]	; (800120c <Uart1_Init+0xd4>)
 80011ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=  (1U<<9);
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <Uart1_Init+0xd4>)
 80011b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b8:	4a14      	ldr	r2, [pc, #80]	; (800120c <Uart1_Init+0xd4>)
 80011ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011be:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=  (1U<<10);
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <Uart1_Init+0xd4>)
 80011c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c4:	4a11      	ldr	r2, [pc, #68]	; (800120c <Uart1_Init+0xd4>)
 80011c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ca:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1U<<11);
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <Uart1_Init+0xd4>)
 80011ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d0:	4a0e      	ldr	r2, [pc, #56]	; (800120c <Uart1_Init+0xd4>)
 80011d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80011d6:	6253      	str	r3, [r2, #36]	; 0x24

/*ENABLE CLOCK ACCESS TO UART1*/
	RCC->APB2ENR |= UARTEN;
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <Uart1_Init+0xd0>)
 80011da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011dc:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <Uart1_Init+0xd0>)
 80011de:	f043 0310 	orr.w	r3, r3, #16
 80011e2:	6453      	str	r3, [r2, #68]	; 0x44

/*BAUDRATE CONFIGURE*/
	uart_set_baudrate(USART1, APB2_CLK, UART_BAUDRATE);
 80011e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011e8:	4909      	ldr	r1, [pc, #36]	; (8001210 <Uart1_Init+0xd8>)
 80011ea:	480a      	ldr	r0, [pc, #40]	; (8001214 <Uart1_Init+0xdc>)
 80011ec:	f000 f814 	bl	8001218 <uart_set_baudrate>

/* configure Transfer direction*/
	USART1->CR1 = CR1_TE | CR1_RE;
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <Uart1_Init+0xdc>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	60da      	str	r2, [r3, #12]
/* configure uart module*/
	USART1->CR1 |= CR1_UE;
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <Uart1_Init+0xdc>)
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	4a06      	ldr	r2, [pc, #24]	; (8001214 <Uart1_Init+0xdc>)
 80011fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001200:	60d3      	str	r3, [r2, #12]


}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800
 800120c:	40020000 	.word	0x40020000
 8001210:	00f42400 	.word	0x00f42400
 8001214:	40011000 	.word	0x40011000

08001218 <uart_set_baudrate>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_BD(PeriphClk,BaudRate);
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	68b8      	ldr	r0, [r7, #8]
 8001228:	f000 f808 	bl	800123c <compute_uart_BD>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	609a      	str	r2, [r3, #8]
}
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <compute_uart_BD>:


static uint16_t compute_uart_BD(uint32_t PeriphClk, uint32_t BaudRate)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	085a      	lsrs	r2, r3, #1
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	441a      	add	r2, r3
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	fbb2 f3f3 	udiv	r3, r2, r3
 8001254:	b29b      	uxth	r3, r3
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001264:	480d      	ldr	r0, [pc, #52]	; (800129c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001266:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001268:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800126c:	480c      	ldr	r0, [pc, #48]	; (80012a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800126e:	490d      	ldr	r1, [pc, #52]	; (80012a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001270:	4a0d      	ldr	r2, [pc, #52]	; (80012a8 <LoopForever+0xe>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001274:	e002      	b.n	800127c <LoopCopyDataInit>

08001276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127a:	3304      	adds	r3, #4

0800127c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800127c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001280:	d3f9      	bcc.n	8001276 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001284:	4c0a      	ldr	r4, [pc, #40]	; (80012b0 <LoopForever+0x16>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001288:	e001      	b.n	800128e <LoopFillZerobss>

0800128a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800128c:	3204      	adds	r2, #4

0800128e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001290:	d3fb      	bcc.n	800128a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001292:	f000 f9bb 	bl	800160c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001296:	f7ff fadb 	bl	8000850 <main>

0800129a <LoopForever>:

LoopForever:
  b LoopForever
 800129a:	e7fe      	b.n	800129a <LoopForever>
  ldr   r0, =_estack
 800129c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80012a8:	080023f4 	.word	0x080023f4
  ldr r2, =_sbss
 80012ac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80012b0:	2000021c 	.word	0x2000021c

080012b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012b4:	e7fe      	b.n	80012b4 <ADC_IRQHandler>
	...

080012b8 <rand>:
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <rand+0x5c>)
 80012ba:	b510      	push	{r4, lr}
 80012bc:	681c      	ldr	r4, [r3, #0]
 80012be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80012c0:	b9b3      	cbnz	r3, 80012f0 <rand+0x38>
 80012c2:	2018      	movs	r0, #24
 80012c4:	f000 fa34 	bl	8001730 <malloc>
 80012c8:	4602      	mov	r2, r0
 80012ca:	6320      	str	r0, [r4, #48]	; 0x30
 80012cc:	b920      	cbnz	r0, 80012d8 <rand+0x20>
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <rand+0x60>)
 80012d0:	4812      	ldr	r0, [pc, #72]	; (800131c <rand+0x64>)
 80012d2:	2152      	movs	r1, #82	; 0x52
 80012d4:	f000 f9c2 	bl	800165c <__assert_func>
 80012d8:	4911      	ldr	r1, [pc, #68]	; (8001320 <rand+0x68>)
 80012da:	4b12      	ldr	r3, [pc, #72]	; (8001324 <rand+0x6c>)
 80012dc:	e9c0 1300 	strd	r1, r3, [r0]
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <rand+0x70>)
 80012e2:	6083      	str	r3, [r0, #8]
 80012e4:	230b      	movs	r3, #11
 80012e6:	8183      	strh	r3, [r0, #12]
 80012e8:	2100      	movs	r1, #0
 80012ea:	2001      	movs	r0, #1
 80012ec:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80012f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80012f2:	480e      	ldr	r0, [pc, #56]	; (800132c <rand+0x74>)
 80012f4:	690b      	ldr	r3, [r1, #16]
 80012f6:	694c      	ldr	r4, [r1, #20]
 80012f8:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <rand+0x78>)
 80012fa:	4358      	muls	r0, r3
 80012fc:	fb02 0004 	mla	r0, r2, r4, r0
 8001300:	fba3 3202 	umull	r3, r2, r3, r2
 8001304:	3301      	adds	r3, #1
 8001306:	eb40 0002 	adc.w	r0, r0, r2
 800130a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800130e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001312:	bd10      	pop	{r4, pc}
 8001314:	20000070 	.word	0x20000070
 8001318:	0800230d 	.word	0x0800230d
 800131c:	08002324 	.word	0x08002324
 8001320:	abcd330e 	.word	0xabcd330e
 8001324:	e66d1234 	.word	0xe66d1234
 8001328:	0005deec 	.word	0x0005deec
 800132c:	5851f42d 	.word	0x5851f42d
 8001330:	4c957f2d 	.word	0x4c957f2d

08001334 <std>:
 8001334:	2300      	movs	r3, #0
 8001336:	b510      	push	{r4, lr}
 8001338:	4604      	mov	r4, r0
 800133a:	e9c0 3300 	strd	r3, r3, [r0]
 800133e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001342:	6083      	str	r3, [r0, #8]
 8001344:	8181      	strh	r1, [r0, #12]
 8001346:	6643      	str	r3, [r0, #100]	; 0x64
 8001348:	81c2      	strh	r2, [r0, #14]
 800134a:	6183      	str	r3, [r0, #24]
 800134c:	4619      	mov	r1, r3
 800134e:	2208      	movs	r2, #8
 8001350:	305c      	adds	r0, #92	; 0x5c
 8001352:	f000 f906 	bl	8001562 <memset>
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <std+0x58>)
 8001358:	6263      	str	r3, [r4, #36]	; 0x24
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <std+0x5c>)
 800135c:	62a3      	str	r3, [r4, #40]	; 0x28
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <std+0x60>)
 8001360:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <std+0x64>)
 8001364:	6323      	str	r3, [r4, #48]	; 0x30
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <std+0x68>)
 8001368:	6224      	str	r4, [r4, #32]
 800136a:	429c      	cmp	r4, r3
 800136c:	d006      	beq.n	800137c <std+0x48>
 800136e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001372:	4294      	cmp	r4, r2
 8001374:	d002      	beq.n	800137c <std+0x48>
 8001376:	33d0      	adds	r3, #208	; 0xd0
 8001378:	429c      	cmp	r4, r3
 800137a:	d105      	bne.n	8001388 <std+0x54>
 800137c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001384:	f000 b966 	b.w	8001654 <__retarget_lock_init_recursive>
 8001388:	bd10      	pop	{r4, pc}
 800138a:	bf00      	nop
 800138c:	080014dd 	.word	0x080014dd
 8001390:	080014ff 	.word	0x080014ff
 8001394:	08001537 	.word	0x08001537
 8001398:	0800155b 	.word	0x0800155b
 800139c:	200000d0 	.word	0x200000d0

080013a0 <stdio_exit_handler>:
 80013a0:	4a02      	ldr	r2, [pc, #8]	; (80013ac <stdio_exit_handler+0xc>)
 80013a2:	4903      	ldr	r1, [pc, #12]	; (80013b0 <stdio_exit_handler+0x10>)
 80013a4:	4803      	ldr	r0, [pc, #12]	; (80013b4 <stdio_exit_handler+0x14>)
 80013a6:	f000 b869 	b.w	800147c <_fwalk_sglue>
 80013aa:	bf00      	nop
 80013ac:	20000018 	.word	0x20000018
 80013b0:	08001f4d 	.word	0x08001f4d
 80013b4:	20000024 	.word	0x20000024

080013b8 <cleanup_stdio>:
 80013b8:	6841      	ldr	r1, [r0, #4]
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <cleanup_stdio+0x34>)
 80013bc:	4299      	cmp	r1, r3
 80013be:	b510      	push	{r4, lr}
 80013c0:	4604      	mov	r4, r0
 80013c2:	d001      	beq.n	80013c8 <cleanup_stdio+0x10>
 80013c4:	f000 fdc2 	bl	8001f4c <_fflush_r>
 80013c8:	68a1      	ldr	r1, [r4, #8]
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <cleanup_stdio+0x38>)
 80013cc:	4299      	cmp	r1, r3
 80013ce:	d002      	beq.n	80013d6 <cleanup_stdio+0x1e>
 80013d0:	4620      	mov	r0, r4
 80013d2:	f000 fdbb 	bl	8001f4c <_fflush_r>
 80013d6:	68e1      	ldr	r1, [r4, #12]
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <cleanup_stdio+0x3c>)
 80013da:	4299      	cmp	r1, r3
 80013dc:	d004      	beq.n	80013e8 <cleanup_stdio+0x30>
 80013de:	4620      	mov	r0, r4
 80013e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013e4:	f000 bdb2 	b.w	8001f4c <_fflush_r>
 80013e8:	bd10      	pop	{r4, pc}
 80013ea:	bf00      	nop
 80013ec:	200000d0 	.word	0x200000d0
 80013f0:	20000138 	.word	0x20000138
 80013f4:	200001a0 	.word	0x200001a0

080013f8 <global_stdio_init.part.0>:
 80013f8:	b510      	push	{r4, lr}
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <global_stdio_init.part.0+0x30>)
 80013fc:	4c0b      	ldr	r4, [pc, #44]	; (800142c <global_stdio_init.part.0+0x34>)
 80013fe:	4a0c      	ldr	r2, [pc, #48]	; (8001430 <global_stdio_init.part.0+0x38>)
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	4620      	mov	r0, r4
 8001404:	2200      	movs	r2, #0
 8001406:	2104      	movs	r1, #4
 8001408:	f7ff ff94 	bl	8001334 <std>
 800140c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001410:	2201      	movs	r2, #1
 8001412:	2109      	movs	r1, #9
 8001414:	f7ff ff8e 	bl	8001334 <std>
 8001418:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800141c:	2202      	movs	r2, #2
 800141e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001422:	2112      	movs	r1, #18
 8001424:	f7ff bf86 	b.w	8001334 <std>
 8001428:	20000208 	.word	0x20000208
 800142c:	200000d0 	.word	0x200000d0
 8001430:	080013a1 	.word	0x080013a1

08001434 <__sfp_lock_acquire>:
 8001434:	4801      	ldr	r0, [pc, #4]	; (800143c <__sfp_lock_acquire+0x8>)
 8001436:	f000 b90e 	b.w	8001656 <__retarget_lock_acquire_recursive>
 800143a:	bf00      	nop
 800143c:	20000211 	.word	0x20000211

08001440 <__sfp_lock_release>:
 8001440:	4801      	ldr	r0, [pc, #4]	; (8001448 <__sfp_lock_release+0x8>)
 8001442:	f000 b909 	b.w	8001658 <__retarget_lock_release_recursive>
 8001446:	bf00      	nop
 8001448:	20000211 	.word	0x20000211

0800144c <__sinit>:
 800144c:	b510      	push	{r4, lr}
 800144e:	4604      	mov	r4, r0
 8001450:	f7ff fff0 	bl	8001434 <__sfp_lock_acquire>
 8001454:	6a23      	ldr	r3, [r4, #32]
 8001456:	b11b      	cbz	r3, 8001460 <__sinit+0x14>
 8001458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800145c:	f7ff bff0 	b.w	8001440 <__sfp_lock_release>
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <__sinit+0x28>)
 8001462:	6223      	str	r3, [r4, #32]
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <__sinit+0x2c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1f5      	bne.n	8001458 <__sinit+0xc>
 800146c:	f7ff ffc4 	bl	80013f8 <global_stdio_init.part.0>
 8001470:	e7f2      	b.n	8001458 <__sinit+0xc>
 8001472:	bf00      	nop
 8001474:	080013b9 	.word	0x080013b9
 8001478:	20000208 	.word	0x20000208

0800147c <_fwalk_sglue>:
 800147c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001480:	4607      	mov	r7, r0
 8001482:	4688      	mov	r8, r1
 8001484:	4614      	mov	r4, r2
 8001486:	2600      	movs	r6, #0
 8001488:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800148c:	f1b9 0901 	subs.w	r9, r9, #1
 8001490:	d505      	bpl.n	800149e <_fwalk_sglue+0x22>
 8001492:	6824      	ldr	r4, [r4, #0]
 8001494:	2c00      	cmp	r4, #0
 8001496:	d1f7      	bne.n	8001488 <_fwalk_sglue+0xc>
 8001498:	4630      	mov	r0, r6
 800149a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800149e:	89ab      	ldrh	r3, [r5, #12]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d907      	bls.n	80014b4 <_fwalk_sglue+0x38>
 80014a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80014a8:	3301      	adds	r3, #1
 80014aa:	d003      	beq.n	80014b4 <_fwalk_sglue+0x38>
 80014ac:	4629      	mov	r1, r5
 80014ae:	4638      	mov	r0, r7
 80014b0:	47c0      	blx	r8
 80014b2:	4306      	orrs	r6, r0
 80014b4:	3568      	adds	r5, #104	; 0x68
 80014b6:	e7e9      	b.n	800148c <_fwalk_sglue+0x10>

080014b8 <iprintf>:
 80014b8:	b40f      	push	{r0, r1, r2, r3}
 80014ba:	b507      	push	{r0, r1, r2, lr}
 80014bc:	4906      	ldr	r1, [pc, #24]	; (80014d8 <iprintf+0x20>)
 80014be:	ab04      	add	r3, sp, #16
 80014c0:	6808      	ldr	r0, [r1, #0]
 80014c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80014c6:	6881      	ldr	r1, [r0, #8]
 80014c8:	9301      	str	r3, [sp, #4]
 80014ca:	f000 fa0f 	bl	80018ec <_vfiprintf_r>
 80014ce:	b003      	add	sp, #12
 80014d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80014d4:	b004      	add	sp, #16
 80014d6:	4770      	bx	lr
 80014d8:	20000070 	.word	0x20000070

080014dc <__sread>:
 80014dc:	b510      	push	{r4, lr}
 80014de:	460c      	mov	r4, r1
 80014e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014e4:	f000 f868 	bl	80015b8 <_read_r>
 80014e8:	2800      	cmp	r0, #0
 80014ea:	bfab      	itete	ge
 80014ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80014ee:	89a3      	ldrhlt	r3, [r4, #12]
 80014f0:	181b      	addge	r3, r3, r0
 80014f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80014f6:	bfac      	ite	ge
 80014f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80014fa:	81a3      	strhlt	r3, [r4, #12]
 80014fc:	bd10      	pop	{r4, pc}

080014fe <__swrite>:
 80014fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001502:	461f      	mov	r7, r3
 8001504:	898b      	ldrh	r3, [r1, #12]
 8001506:	05db      	lsls	r3, r3, #23
 8001508:	4605      	mov	r5, r0
 800150a:	460c      	mov	r4, r1
 800150c:	4616      	mov	r6, r2
 800150e:	d505      	bpl.n	800151c <__swrite+0x1e>
 8001510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001514:	2302      	movs	r3, #2
 8001516:	2200      	movs	r2, #0
 8001518:	f000 f83c 	bl	8001594 <_lseek_r>
 800151c:	89a3      	ldrh	r3, [r4, #12]
 800151e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001522:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001526:	81a3      	strh	r3, [r4, #12]
 8001528:	4632      	mov	r2, r6
 800152a:	463b      	mov	r3, r7
 800152c:	4628      	mov	r0, r5
 800152e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001532:	f000 b853 	b.w	80015dc <_write_r>

08001536 <__sseek>:
 8001536:	b510      	push	{r4, lr}
 8001538:	460c      	mov	r4, r1
 800153a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800153e:	f000 f829 	bl	8001594 <_lseek_r>
 8001542:	1c43      	adds	r3, r0, #1
 8001544:	89a3      	ldrh	r3, [r4, #12]
 8001546:	bf15      	itete	ne
 8001548:	6560      	strne	r0, [r4, #84]	; 0x54
 800154a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800154e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001552:	81a3      	strheq	r3, [r4, #12]
 8001554:	bf18      	it	ne
 8001556:	81a3      	strhne	r3, [r4, #12]
 8001558:	bd10      	pop	{r4, pc}

0800155a <__sclose>:
 800155a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800155e:	f000 b809 	b.w	8001574 <_close_r>

08001562 <memset>:
 8001562:	4402      	add	r2, r0
 8001564:	4603      	mov	r3, r0
 8001566:	4293      	cmp	r3, r2
 8001568:	d100      	bne.n	800156c <memset+0xa>
 800156a:	4770      	bx	lr
 800156c:	f803 1b01 	strb.w	r1, [r3], #1
 8001570:	e7f9      	b.n	8001566 <memset+0x4>
	...

08001574 <_close_r>:
 8001574:	b538      	push	{r3, r4, r5, lr}
 8001576:	4d06      	ldr	r5, [pc, #24]	; (8001590 <_close_r+0x1c>)
 8001578:	2300      	movs	r3, #0
 800157a:	4604      	mov	r4, r0
 800157c:	4608      	mov	r0, r1
 800157e:	602b      	str	r3, [r5, #0]
 8001580:	f7ff fb25 	bl	8000bce <_close>
 8001584:	1c43      	adds	r3, r0, #1
 8001586:	d102      	bne.n	800158e <_close_r+0x1a>
 8001588:	682b      	ldr	r3, [r5, #0]
 800158a:	b103      	cbz	r3, 800158e <_close_r+0x1a>
 800158c:	6023      	str	r3, [r4, #0]
 800158e:	bd38      	pop	{r3, r4, r5, pc}
 8001590:	2000020c 	.word	0x2000020c

08001594 <_lseek_r>:
 8001594:	b538      	push	{r3, r4, r5, lr}
 8001596:	4d07      	ldr	r5, [pc, #28]	; (80015b4 <_lseek_r+0x20>)
 8001598:	4604      	mov	r4, r0
 800159a:	4608      	mov	r0, r1
 800159c:	4611      	mov	r1, r2
 800159e:	2200      	movs	r2, #0
 80015a0:	602a      	str	r2, [r5, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	f7ff fb3a 	bl	8000c1c <_lseek>
 80015a8:	1c43      	adds	r3, r0, #1
 80015aa:	d102      	bne.n	80015b2 <_lseek_r+0x1e>
 80015ac:	682b      	ldr	r3, [r5, #0]
 80015ae:	b103      	cbz	r3, 80015b2 <_lseek_r+0x1e>
 80015b0:	6023      	str	r3, [r4, #0]
 80015b2:	bd38      	pop	{r3, r4, r5, pc}
 80015b4:	2000020c 	.word	0x2000020c

080015b8 <_read_r>:
 80015b8:	b538      	push	{r3, r4, r5, lr}
 80015ba:	4d07      	ldr	r5, [pc, #28]	; (80015d8 <_read_r+0x20>)
 80015bc:	4604      	mov	r4, r0
 80015be:	4608      	mov	r0, r1
 80015c0:	4611      	mov	r1, r2
 80015c2:	2200      	movs	r2, #0
 80015c4:	602a      	str	r2, [r5, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	f7ff fac8 	bl	8000b5c <_read>
 80015cc:	1c43      	adds	r3, r0, #1
 80015ce:	d102      	bne.n	80015d6 <_read_r+0x1e>
 80015d0:	682b      	ldr	r3, [r5, #0]
 80015d2:	b103      	cbz	r3, 80015d6 <_read_r+0x1e>
 80015d4:	6023      	str	r3, [r4, #0]
 80015d6:	bd38      	pop	{r3, r4, r5, pc}
 80015d8:	2000020c 	.word	0x2000020c

080015dc <_write_r>:
 80015dc:	b538      	push	{r3, r4, r5, lr}
 80015de:	4d07      	ldr	r5, [pc, #28]	; (80015fc <_write_r+0x20>)
 80015e0:	4604      	mov	r4, r0
 80015e2:	4608      	mov	r0, r1
 80015e4:	4611      	mov	r1, r2
 80015e6:	2200      	movs	r2, #0
 80015e8:	602a      	str	r2, [r5, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	f7ff fad3 	bl	8000b96 <_write>
 80015f0:	1c43      	adds	r3, r0, #1
 80015f2:	d102      	bne.n	80015fa <_write_r+0x1e>
 80015f4:	682b      	ldr	r3, [r5, #0]
 80015f6:	b103      	cbz	r3, 80015fa <_write_r+0x1e>
 80015f8:	6023      	str	r3, [r4, #0]
 80015fa:	bd38      	pop	{r3, r4, r5, pc}
 80015fc:	2000020c 	.word	0x2000020c

08001600 <__errno>:
 8001600:	4b01      	ldr	r3, [pc, #4]	; (8001608 <__errno+0x8>)
 8001602:	6818      	ldr	r0, [r3, #0]
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000070 	.word	0x20000070

0800160c <__libc_init_array>:
 800160c:	b570      	push	{r4, r5, r6, lr}
 800160e:	4d0d      	ldr	r5, [pc, #52]	; (8001644 <__libc_init_array+0x38>)
 8001610:	4c0d      	ldr	r4, [pc, #52]	; (8001648 <__libc_init_array+0x3c>)
 8001612:	1b64      	subs	r4, r4, r5
 8001614:	10a4      	asrs	r4, r4, #2
 8001616:	2600      	movs	r6, #0
 8001618:	42a6      	cmp	r6, r4
 800161a:	d109      	bne.n	8001630 <__libc_init_array+0x24>
 800161c:	4d0b      	ldr	r5, [pc, #44]	; (800164c <__libc_init_array+0x40>)
 800161e:	4c0c      	ldr	r4, [pc, #48]	; (8001650 <__libc_init_array+0x44>)
 8001620:	f000 fe44 	bl	80022ac <_init>
 8001624:	1b64      	subs	r4, r4, r5
 8001626:	10a4      	asrs	r4, r4, #2
 8001628:	2600      	movs	r6, #0
 800162a:	42a6      	cmp	r6, r4
 800162c:	d105      	bne.n	800163a <__libc_init_array+0x2e>
 800162e:	bd70      	pop	{r4, r5, r6, pc}
 8001630:	f855 3b04 	ldr.w	r3, [r5], #4
 8001634:	4798      	blx	r3
 8001636:	3601      	adds	r6, #1
 8001638:	e7ee      	b.n	8001618 <__libc_init_array+0xc>
 800163a:	f855 3b04 	ldr.w	r3, [r5], #4
 800163e:	4798      	blx	r3
 8001640:	3601      	adds	r6, #1
 8001642:	e7f2      	b.n	800162a <__libc_init_array+0x1e>
 8001644:	080023ec 	.word	0x080023ec
 8001648:	080023ec 	.word	0x080023ec
 800164c:	080023ec 	.word	0x080023ec
 8001650:	080023f0 	.word	0x080023f0

08001654 <__retarget_lock_init_recursive>:
 8001654:	4770      	bx	lr

08001656 <__retarget_lock_acquire_recursive>:
 8001656:	4770      	bx	lr

08001658 <__retarget_lock_release_recursive>:
 8001658:	4770      	bx	lr
	...

0800165c <__assert_func>:
 800165c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800165e:	4614      	mov	r4, r2
 8001660:	461a      	mov	r2, r3
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <__assert_func+0x2c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4605      	mov	r5, r0
 8001668:	68d8      	ldr	r0, [r3, #12]
 800166a:	b14c      	cbz	r4, 8001680 <__assert_func+0x24>
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <__assert_func+0x30>)
 800166e:	9100      	str	r1, [sp, #0]
 8001670:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001674:	4906      	ldr	r1, [pc, #24]	; (8001690 <__assert_func+0x34>)
 8001676:	462b      	mov	r3, r5
 8001678:	f000 fc90 	bl	8001f9c <fiprintf>
 800167c:	f000 fd46 	bl	800210c <abort>
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <__assert_func+0x38>)
 8001682:	461c      	mov	r4, r3
 8001684:	e7f3      	b.n	800166e <__assert_func+0x12>
 8001686:	bf00      	nop
 8001688:	20000070 	.word	0x20000070
 800168c:	0800237c 	.word	0x0800237c
 8001690:	08002389 	.word	0x08002389
 8001694:	080023b7 	.word	0x080023b7

08001698 <_free_r>:
 8001698:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800169a:	2900      	cmp	r1, #0
 800169c:	d044      	beq.n	8001728 <_free_r+0x90>
 800169e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016a2:	9001      	str	r0, [sp, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f1a1 0404 	sub.w	r4, r1, #4
 80016aa:	bfb8      	it	lt
 80016ac:	18e4      	addlt	r4, r4, r3
 80016ae:	f000 f8e7 	bl	8001880 <__malloc_lock>
 80016b2:	4a1e      	ldr	r2, [pc, #120]	; (800172c <_free_r+0x94>)
 80016b4:	9801      	ldr	r0, [sp, #4]
 80016b6:	6813      	ldr	r3, [r2, #0]
 80016b8:	b933      	cbnz	r3, 80016c8 <_free_r+0x30>
 80016ba:	6063      	str	r3, [r4, #4]
 80016bc:	6014      	str	r4, [r2, #0]
 80016be:	b003      	add	sp, #12
 80016c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80016c4:	f000 b8e2 	b.w	800188c <__malloc_unlock>
 80016c8:	42a3      	cmp	r3, r4
 80016ca:	d908      	bls.n	80016de <_free_r+0x46>
 80016cc:	6825      	ldr	r5, [r4, #0]
 80016ce:	1961      	adds	r1, r4, r5
 80016d0:	428b      	cmp	r3, r1
 80016d2:	bf01      	itttt	eq
 80016d4:	6819      	ldreq	r1, [r3, #0]
 80016d6:	685b      	ldreq	r3, [r3, #4]
 80016d8:	1949      	addeq	r1, r1, r5
 80016da:	6021      	streq	r1, [r4, #0]
 80016dc:	e7ed      	b.n	80016ba <_free_r+0x22>
 80016de:	461a      	mov	r2, r3
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	b10b      	cbz	r3, 80016e8 <_free_r+0x50>
 80016e4:	42a3      	cmp	r3, r4
 80016e6:	d9fa      	bls.n	80016de <_free_r+0x46>
 80016e8:	6811      	ldr	r1, [r2, #0]
 80016ea:	1855      	adds	r5, r2, r1
 80016ec:	42a5      	cmp	r5, r4
 80016ee:	d10b      	bne.n	8001708 <_free_r+0x70>
 80016f0:	6824      	ldr	r4, [r4, #0]
 80016f2:	4421      	add	r1, r4
 80016f4:	1854      	adds	r4, r2, r1
 80016f6:	42a3      	cmp	r3, r4
 80016f8:	6011      	str	r1, [r2, #0]
 80016fa:	d1e0      	bne.n	80016be <_free_r+0x26>
 80016fc:	681c      	ldr	r4, [r3, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	6053      	str	r3, [r2, #4]
 8001702:	440c      	add	r4, r1
 8001704:	6014      	str	r4, [r2, #0]
 8001706:	e7da      	b.n	80016be <_free_r+0x26>
 8001708:	d902      	bls.n	8001710 <_free_r+0x78>
 800170a:	230c      	movs	r3, #12
 800170c:	6003      	str	r3, [r0, #0]
 800170e:	e7d6      	b.n	80016be <_free_r+0x26>
 8001710:	6825      	ldr	r5, [r4, #0]
 8001712:	1961      	adds	r1, r4, r5
 8001714:	428b      	cmp	r3, r1
 8001716:	bf04      	itt	eq
 8001718:	6819      	ldreq	r1, [r3, #0]
 800171a:	685b      	ldreq	r3, [r3, #4]
 800171c:	6063      	str	r3, [r4, #4]
 800171e:	bf04      	itt	eq
 8001720:	1949      	addeq	r1, r1, r5
 8001722:	6021      	streq	r1, [r4, #0]
 8001724:	6054      	str	r4, [r2, #4]
 8001726:	e7ca      	b.n	80016be <_free_r+0x26>
 8001728:	b003      	add	sp, #12
 800172a:	bd30      	pop	{r4, r5, pc}
 800172c:	20000214 	.word	0x20000214

08001730 <malloc>:
 8001730:	4b02      	ldr	r3, [pc, #8]	; (800173c <malloc+0xc>)
 8001732:	4601      	mov	r1, r0
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	f000 b823 	b.w	8001780 <_malloc_r>
 800173a:	bf00      	nop
 800173c:	20000070 	.word	0x20000070

08001740 <sbrk_aligned>:
 8001740:	b570      	push	{r4, r5, r6, lr}
 8001742:	4e0e      	ldr	r6, [pc, #56]	; (800177c <sbrk_aligned+0x3c>)
 8001744:	460c      	mov	r4, r1
 8001746:	6831      	ldr	r1, [r6, #0]
 8001748:	4605      	mov	r5, r0
 800174a:	b911      	cbnz	r1, 8001752 <sbrk_aligned+0x12>
 800174c:	f000 fcce 	bl	80020ec <_sbrk_r>
 8001750:	6030      	str	r0, [r6, #0]
 8001752:	4621      	mov	r1, r4
 8001754:	4628      	mov	r0, r5
 8001756:	f000 fcc9 	bl	80020ec <_sbrk_r>
 800175a:	1c43      	adds	r3, r0, #1
 800175c:	d00a      	beq.n	8001774 <sbrk_aligned+0x34>
 800175e:	1cc4      	adds	r4, r0, #3
 8001760:	f024 0403 	bic.w	r4, r4, #3
 8001764:	42a0      	cmp	r0, r4
 8001766:	d007      	beq.n	8001778 <sbrk_aligned+0x38>
 8001768:	1a21      	subs	r1, r4, r0
 800176a:	4628      	mov	r0, r5
 800176c:	f000 fcbe 	bl	80020ec <_sbrk_r>
 8001770:	3001      	adds	r0, #1
 8001772:	d101      	bne.n	8001778 <sbrk_aligned+0x38>
 8001774:	f04f 34ff 	mov.w	r4, #4294967295
 8001778:	4620      	mov	r0, r4
 800177a:	bd70      	pop	{r4, r5, r6, pc}
 800177c:	20000218 	.word	0x20000218

08001780 <_malloc_r>:
 8001780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001784:	1ccd      	adds	r5, r1, #3
 8001786:	f025 0503 	bic.w	r5, r5, #3
 800178a:	3508      	adds	r5, #8
 800178c:	2d0c      	cmp	r5, #12
 800178e:	bf38      	it	cc
 8001790:	250c      	movcc	r5, #12
 8001792:	2d00      	cmp	r5, #0
 8001794:	4607      	mov	r7, r0
 8001796:	db01      	blt.n	800179c <_malloc_r+0x1c>
 8001798:	42a9      	cmp	r1, r5
 800179a:	d905      	bls.n	80017a8 <_malloc_r+0x28>
 800179c:	230c      	movs	r3, #12
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	2600      	movs	r6, #0
 80017a2:	4630      	mov	r0, r6
 80017a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800187c <_malloc_r+0xfc>
 80017ac:	f000 f868 	bl	8001880 <__malloc_lock>
 80017b0:	f8d8 3000 	ldr.w	r3, [r8]
 80017b4:	461c      	mov	r4, r3
 80017b6:	bb5c      	cbnz	r4, 8001810 <_malloc_r+0x90>
 80017b8:	4629      	mov	r1, r5
 80017ba:	4638      	mov	r0, r7
 80017bc:	f7ff ffc0 	bl	8001740 <sbrk_aligned>
 80017c0:	1c43      	adds	r3, r0, #1
 80017c2:	4604      	mov	r4, r0
 80017c4:	d155      	bne.n	8001872 <_malloc_r+0xf2>
 80017c6:	f8d8 4000 	ldr.w	r4, [r8]
 80017ca:	4626      	mov	r6, r4
 80017cc:	2e00      	cmp	r6, #0
 80017ce:	d145      	bne.n	800185c <_malloc_r+0xdc>
 80017d0:	2c00      	cmp	r4, #0
 80017d2:	d048      	beq.n	8001866 <_malloc_r+0xe6>
 80017d4:	6823      	ldr	r3, [r4, #0]
 80017d6:	4631      	mov	r1, r6
 80017d8:	4638      	mov	r0, r7
 80017da:	eb04 0903 	add.w	r9, r4, r3
 80017de:	f000 fc85 	bl	80020ec <_sbrk_r>
 80017e2:	4581      	cmp	r9, r0
 80017e4:	d13f      	bne.n	8001866 <_malloc_r+0xe6>
 80017e6:	6821      	ldr	r1, [r4, #0]
 80017e8:	1a6d      	subs	r5, r5, r1
 80017ea:	4629      	mov	r1, r5
 80017ec:	4638      	mov	r0, r7
 80017ee:	f7ff ffa7 	bl	8001740 <sbrk_aligned>
 80017f2:	3001      	adds	r0, #1
 80017f4:	d037      	beq.n	8001866 <_malloc_r+0xe6>
 80017f6:	6823      	ldr	r3, [r4, #0]
 80017f8:	442b      	add	r3, r5
 80017fa:	6023      	str	r3, [r4, #0]
 80017fc:	f8d8 3000 	ldr.w	r3, [r8]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d038      	beq.n	8001876 <_malloc_r+0xf6>
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	42a2      	cmp	r2, r4
 8001808:	d12b      	bne.n	8001862 <_malloc_r+0xe2>
 800180a:	2200      	movs	r2, #0
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	e00f      	b.n	8001830 <_malloc_r+0xb0>
 8001810:	6822      	ldr	r2, [r4, #0]
 8001812:	1b52      	subs	r2, r2, r5
 8001814:	d41f      	bmi.n	8001856 <_malloc_r+0xd6>
 8001816:	2a0b      	cmp	r2, #11
 8001818:	d917      	bls.n	800184a <_malloc_r+0xca>
 800181a:	1961      	adds	r1, r4, r5
 800181c:	42a3      	cmp	r3, r4
 800181e:	6025      	str	r5, [r4, #0]
 8001820:	bf18      	it	ne
 8001822:	6059      	strne	r1, [r3, #4]
 8001824:	6863      	ldr	r3, [r4, #4]
 8001826:	bf08      	it	eq
 8001828:	f8c8 1000 	streq.w	r1, [r8]
 800182c:	5162      	str	r2, [r4, r5]
 800182e:	604b      	str	r3, [r1, #4]
 8001830:	4638      	mov	r0, r7
 8001832:	f104 060b 	add.w	r6, r4, #11
 8001836:	f000 f829 	bl	800188c <__malloc_unlock>
 800183a:	f026 0607 	bic.w	r6, r6, #7
 800183e:	1d23      	adds	r3, r4, #4
 8001840:	1af2      	subs	r2, r6, r3
 8001842:	d0ae      	beq.n	80017a2 <_malloc_r+0x22>
 8001844:	1b9b      	subs	r3, r3, r6
 8001846:	50a3      	str	r3, [r4, r2]
 8001848:	e7ab      	b.n	80017a2 <_malloc_r+0x22>
 800184a:	42a3      	cmp	r3, r4
 800184c:	6862      	ldr	r2, [r4, #4]
 800184e:	d1dd      	bne.n	800180c <_malloc_r+0x8c>
 8001850:	f8c8 2000 	str.w	r2, [r8]
 8001854:	e7ec      	b.n	8001830 <_malloc_r+0xb0>
 8001856:	4623      	mov	r3, r4
 8001858:	6864      	ldr	r4, [r4, #4]
 800185a:	e7ac      	b.n	80017b6 <_malloc_r+0x36>
 800185c:	4634      	mov	r4, r6
 800185e:	6876      	ldr	r6, [r6, #4]
 8001860:	e7b4      	b.n	80017cc <_malloc_r+0x4c>
 8001862:	4613      	mov	r3, r2
 8001864:	e7cc      	b.n	8001800 <_malloc_r+0x80>
 8001866:	230c      	movs	r3, #12
 8001868:	603b      	str	r3, [r7, #0]
 800186a:	4638      	mov	r0, r7
 800186c:	f000 f80e 	bl	800188c <__malloc_unlock>
 8001870:	e797      	b.n	80017a2 <_malloc_r+0x22>
 8001872:	6025      	str	r5, [r4, #0]
 8001874:	e7dc      	b.n	8001830 <_malloc_r+0xb0>
 8001876:	605b      	str	r3, [r3, #4]
 8001878:	deff      	udf	#255	; 0xff
 800187a:	bf00      	nop
 800187c:	20000214 	.word	0x20000214

08001880 <__malloc_lock>:
 8001880:	4801      	ldr	r0, [pc, #4]	; (8001888 <__malloc_lock+0x8>)
 8001882:	f7ff bee8 	b.w	8001656 <__retarget_lock_acquire_recursive>
 8001886:	bf00      	nop
 8001888:	20000210 	.word	0x20000210

0800188c <__malloc_unlock>:
 800188c:	4801      	ldr	r0, [pc, #4]	; (8001894 <__malloc_unlock+0x8>)
 800188e:	f7ff bee3 	b.w	8001658 <__retarget_lock_release_recursive>
 8001892:	bf00      	nop
 8001894:	20000210 	.word	0x20000210

08001898 <__sfputc_r>:
 8001898:	6893      	ldr	r3, [r2, #8]
 800189a:	3b01      	subs	r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	b410      	push	{r4}
 80018a0:	6093      	str	r3, [r2, #8]
 80018a2:	da08      	bge.n	80018b6 <__sfputc_r+0x1e>
 80018a4:	6994      	ldr	r4, [r2, #24]
 80018a6:	42a3      	cmp	r3, r4
 80018a8:	db01      	blt.n	80018ae <__sfputc_r+0x16>
 80018aa:	290a      	cmp	r1, #10
 80018ac:	d103      	bne.n	80018b6 <__sfputc_r+0x1e>
 80018ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018b2:	f000 bb85 	b.w	8001fc0 <__swbuf_r>
 80018b6:	6813      	ldr	r3, [r2, #0]
 80018b8:	1c58      	adds	r0, r3, #1
 80018ba:	6010      	str	r0, [r2, #0]
 80018bc:	7019      	strb	r1, [r3, #0]
 80018be:	4608      	mov	r0, r1
 80018c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <__sfputs_r>:
 80018c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018c8:	4606      	mov	r6, r0
 80018ca:	460f      	mov	r7, r1
 80018cc:	4614      	mov	r4, r2
 80018ce:	18d5      	adds	r5, r2, r3
 80018d0:	42ac      	cmp	r4, r5
 80018d2:	d101      	bne.n	80018d8 <__sfputs_r+0x12>
 80018d4:	2000      	movs	r0, #0
 80018d6:	e007      	b.n	80018e8 <__sfputs_r+0x22>
 80018d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018dc:	463a      	mov	r2, r7
 80018de:	4630      	mov	r0, r6
 80018e0:	f7ff ffda 	bl	8001898 <__sfputc_r>
 80018e4:	1c43      	adds	r3, r0, #1
 80018e6:	d1f3      	bne.n	80018d0 <__sfputs_r+0xa>
 80018e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080018ec <_vfiprintf_r>:
 80018ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018f0:	460d      	mov	r5, r1
 80018f2:	b09d      	sub	sp, #116	; 0x74
 80018f4:	4614      	mov	r4, r2
 80018f6:	4698      	mov	r8, r3
 80018f8:	4606      	mov	r6, r0
 80018fa:	b118      	cbz	r0, 8001904 <_vfiprintf_r+0x18>
 80018fc:	6a03      	ldr	r3, [r0, #32]
 80018fe:	b90b      	cbnz	r3, 8001904 <_vfiprintf_r+0x18>
 8001900:	f7ff fda4 	bl	800144c <__sinit>
 8001904:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001906:	07d9      	lsls	r1, r3, #31
 8001908:	d405      	bmi.n	8001916 <_vfiprintf_r+0x2a>
 800190a:	89ab      	ldrh	r3, [r5, #12]
 800190c:	059a      	lsls	r2, r3, #22
 800190e:	d402      	bmi.n	8001916 <_vfiprintf_r+0x2a>
 8001910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001912:	f7ff fea0 	bl	8001656 <__retarget_lock_acquire_recursive>
 8001916:	89ab      	ldrh	r3, [r5, #12]
 8001918:	071b      	lsls	r3, r3, #28
 800191a:	d501      	bpl.n	8001920 <_vfiprintf_r+0x34>
 800191c:	692b      	ldr	r3, [r5, #16]
 800191e:	b99b      	cbnz	r3, 8001948 <_vfiprintf_r+0x5c>
 8001920:	4629      	mov	r1, r5
 8001922:	4630      	mov	r0, r6
 8001924:	f000 fb8a 	bl	800203c <__swsetup_r>
 8001928:	b170      	cbz	r0, 8001948 <_vfiprintf_r+0x5c>
 800192a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800192c:	07dc      	lsls	r4, r3, #31
 800192e:	d504      	bpl.n	800193a <_vfiprintf_r+0x4e>
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	b01d      	add	sp, #116	; 0x74
 8001936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800193a:	89ab      	ldrh	r3, [r5, #12]
 800193c:	0598      	lsls	r0, r3, #22
 800193e:	d4f7      	bmi.n	8001930 <_vfiprintf_r+0x44>
 8001940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001942:	f7ff fe89 	bl	8001658 <__retarget_lock_release_recursive>
 8001946:	e7f3      	b.n	8001930 <_vfiprintf_r+0x44>
 8001948:	2300      	movs	r3, #0
 800194a:	9309      	str	r3, [sp, #36]	; 0x24
 800194c:	2320      	movs	r3, #32
 800194e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001952:	f8cd 800c 	str.w	r8, [sp, #12]
 8001956:	2330      	movs	r3, #48	; 0x30
 8001958:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001b0c <_vfiprintf_r+0x220>
 800195c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001960:	f04f 0901 	mov.w	r9, #1
 8001964:	4623      	mov	r3, r4
 8001966:	469a      	mov	sl, r3
 8001968:	f813 2b01 	ldrb.w	r2, [r3], #1
 800196c:	b10a      	cbz	r2, 8001972 <_vfiprintf_r+0x86>
 800196e:	2a25      	cmp	r2, #37	; 0x25
 8001970:	d1f9      	bne.n	8001966 <_vfiprintf_r+0x7a>
 8001972:	ebba 0b04 	subs.w	fp, sl, r4
 8001976:	d00b      	beq.n	8001990 <_vfiprintf_r+0xa4>
 8001978:	465b      	mov	r3, fp
 800197a:	4622      	mov	r2, r4
 800197c:	4629      	mov	r1, r5
 800197e:	4630      	mov	r0, r6
 8001980:	f7ff ffa1 	bl	80018c6 <__sfputs_r>
 8001984:	3001      	adds	r0, #1
 8001986:	f000 80a9 	beq.w	8001adc <_vfiprintf_r+0x1f0>
 800198a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800198c:	445a      	add	r2, fp
 800198e:	9209      	str	r2, [sp, #36]	; 0x24
 8001990:	f89a 3000 	ldrb.w	r3, [sl]
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 80a1 	beq.w	8001adc <_vfiprintf_r+0x1f0>
 800199a:	2300      	movs	r3, #0
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80019a4:	f10a 0a01 	add.w	sl, sl, #1
 80019a8:	9304      	str	r3, [sp, #16]
 80019aa:	9307      	str	r3, [sp, #28]
 80019ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80019b0:	931a      	str	r3, [sp, #104]	; 0x68
 80019b2:	4654      	mov	r4, sl
 80019b4:	2205      	movs	r2, #5
 80019b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019ba:	4854      	ldr	r0, [pc, #336]	; (8001b0c <_vfiprintf_r+0x220>)
 80019bc:	f7fe fc10 	bl	80001e0 <memchr>
 80019c0:	9a04      	ldr	r2, [sp, #16]
 80019c2:	b9d8      	cbnz	r0, 80019fc <_vfiprintf_r+0x110>
 80019c4:	06d1      	lsls	r1, r2, #27
 80019c6:	bf44      	itt	mi
 80019c8:	2320      	movmi	r3, #32
 80019ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80019ce:	0713      	lsls	r3, r2, #28
 80019d0:	bf44      	itt	mi
 80019d2:	232b      	movmi	r3, #43	; 0x2b
 80019d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80019d8:	f89a 3000 	ldrb.w	r3, [sl]
 80019dc:	2b2a      	cmp	r3, #42	; 0x2a
 80019de:	d015      	beq.n	8001a0c <_vfiprintf_r+0x120>
 80019e0:	9a07      	ldr	r2, [sp, #28]
 80019e2:	4654      	mov	r4, sl
 80019e4:	2000      	movs	r0, #0
 80019e6:	f04f 0c0a 	mov.w	ip, #10
 80019ea:	4621      	mov	r1, r4
 80019ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80019f0:	3b30      	subs	r3, #48	; 0x30
 80019f2:	2b09      	cmp	r3, #9
 80019f4:	d94d      	bls.n	8001a92 <_vfiprintf_r+0x1a6>
 80019f6:	b1b0      	cbz	r0, 8001a26 <_vfiprintf_r+0x13a>
 80019f8:	9207      	str	r2, [sp, #28]
 80019fa:	e014      	b.n	8001a26 <_vfiprintf_r+0x13a>
 80019fc:	eba0 0308 	sub.w	r3, r0, r8
 8001a00:	fa09 f303 	lsl.w	r3, r9, r3
 8001a04:	4313      	orrs	r3, r2
 8001a06:	9304      	str	r3, [sp, #16]
 8001a08:	46a2      	mov	sl, r4
 8001a0a:	e7d2      	b.n	80019b2 <_vfiprintf_r+0xc6>
 8001a0c:	9b03      	ldr	r3, [sp, #12]
 8001a0e:	1d19      	adds	r1, r3, #4
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	9103      	str	r1, [sp, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	bfbb      	ittet	lt
 8001a18:	425b      	neglt	r3, r3
 8001a1a:	f042 0202 	orrlt.w	r2, r2, #2
 8001a1e:	9307      	strge	r3, [sp, #28]
 8001a20:	9307      	strlt	r3, [sp, #28]
 8001a22:	bfb8      	it	lt
 8001a24:	9204      	strlt	r2, [sp, #16]
 8001a26:	7823      	ldrb	r3, [r4, #0]
 8001a28:	2b2e      	cmp	r3, #46	; 0x2e
 8001a2a:	d10c      	bne.n	8001a46 <_vfiprintf_r+0x15a>
 8001a2c:	7863      	ldrb	r3, [r4, #1]
 8001a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8001a30:	d134      	bne.n	8001a9c <_vfiprintf_r+0x1b0>
 8001a32:	9b03      	ldr	r3, [sp, #12]
 8001a34:	1d1a      	adds	r2, r3, #4
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	9203      	str	r2, [sp, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	bfb8      	it	lt
 8001a3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001a42:	3402      	adds	r4, #2
 8001a44:	9305      	str	r3, [sp, #20]
 8001a46:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8001b1c <_vfiprintf_r+0x230>
 8001a4a:	7821      	ldrb	r1, [r4, #0]
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	4650      	mov	r0, sl
 8001a50:	f7fe fbc6 	bl	80001e0 <memchr>
 8001a54:	b138      	cbz	r0, 8001a66 <_vfiprintf_r+0x17a>
 8001a56:	9b04      	ldr	r3, [sp, #16]
 8001a58:	eba0 000a 	sub.w	r0, r0, sl
 8001a5c:	2240      	movs	r2, #64	; 0x40
 8001a5e:	4082      	lsls	r2, r0
 8001a60:	4313      	orrs	r3, r2
 8001a62:	3401      	adds	r4, #1
 8001a64:	9304      	str	r3, [sp, #16]
 8001a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a6a:	4829      	ldr	r0, [pc, #164]	; (8001b10 <_vfiprintf_r+0x224>)
 8001a6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a70:	2206      	movs	r2, #6
 8001a72:	f7fe fbb5 	bl	80001e0 <memchr>
 8001a76:	2800      	cmp	r0, #0
 8001a78:	d03f      	beq.n	8001afa <_vfiprintf_r+0x20e>
 8001a7a:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <_vfiprintf_r+0x228>)
 8001a7c:	bb1b      	cbnz	r3, 8001ac6 <_vfiprintf_r+0x1da>
 8001a7e:	9b03      	ldr	r3, [sp, #12]
 8001a80:	3307      	adds	r3, #7
 8001a82:	f023 0307 	bic.w	r3, r3, #7
 8001a86:	3308      	adds	r3, #8
 8001a88:	9303      	str	r3, [sp, #12]
 8001a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a8c:	443b      	add	r3, r7
 8001a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8001a90:	e768      	b.n	8001964 <_vfiprintf_r+0x78>
 8001a92:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a96:	460c      	mov	r4, r1
 8001a98:	2001      	movs	r0, #1
 8001a9a:	e7a6      	b.n	80019ea <_vfiprintf_r+0xfe>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	3401      	adds	r4, #1
 8001aa0:	9305      	str	r3, [sp, #20]
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f04f 0c0a 	mov.w	ip, #10
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001aae:	3a30      	subs	r2, #48	; 0x30
 8001ab0:	2a09      	cmp	r2, #9
 8001ab2:	d903      	bls.n	8001abc <_vfiprintf_r+0x1d0>
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0c6      	beq.n	8001a46 <_vfiprintf_r+0x15a>
 8001ab8:	9105      	str	r1, [sp, #20]
 8001aba:	e7c4      	b.n	8001a46 <_vfiprintf_r+0x15a>
 8001abc:	fb0c 2101 	mla	r1, ip, r1, r2
 8001ac0:	4604      	mov	r4, r0
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e7f0      	b.n	8001aa8 <_vfiprintf_r+0x1bc>
 8001ac6:	ab03      	add	r3, sp, #12
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	462a      	mov	r2, r5
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <_vfiprintf_r+0x22c>)
 8001ace:	a904      	add	r1, sp, #16
 8001ad0:	4630      	mov	r0, r6
 8001ad2:	f3af 8000 	nop.w
 8001ad6:	4607      	mov	r7, r0
 8001ad8:	1c78      	adds	r0, r7, #1
 8001ada:	d1d6      	bne.n	8001a8a <_vfiprintf_r+0x19e>
 8001adc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001ade:	07d9      	lsls	r1, r3, #31
 8001ae0:	d405      	bmi.n	8001aee <_vfiprintf_r+0x202>
 8001ae2:	89ab      	ldrh	r3, [r5, #12]
 8001ae4:	059a      	lsls	r2, r3, #22
 8001ae6:	d402      	bmi.n	8001aee <_vfiprintf_r+0x202>
 8001ae8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001aea:	f7ff fdb5 	bl	8001658 <__retarget_lock_release_recursive>
 8001aee:	89ab      	ldrh	r3, [r5, #12]
 8001af0:	065b      	lsls	r3, r3, #25
 8001af2:	f53f af1d 	bmi.w	8001930 <_vfiprintf_r+0x44>
 8001af6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001af8:	e71c      	b.n	8001934 <_vfiprintf_r+0x48>
 8001afa:	ab03      	add	r3, sp, #12
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	462a      	mov	r2, r5
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <_vfiprintf_r+0x22c>)
 8001b02:	a904      	add	r1, sp, #16
 8001b04:	4630      	mov	r0, r6
 8001b06:	f000 f879 	bl	8001bfc <_printf_i>
 8001b0a:	e7e4      	b.n	8001ad6 <_vfiprintf_r+0x1ea>
 8001b0c:	080023b8 	.word	0x080023b8
 8001b10:	080023c2 	.word	0x080023c2
 8001b14:	00000000 	.word	0x00000000
 8001b18:	080018c7 	.word	0x080018c7
 8001b1c:	080023be 	.word	0x080023be

08001b20 <_printf_common>:
 8001b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b24:	4616      	mov	r6, r2
 8001b26:	4699      	mov	r9, r3
 8001b28:	688a      	ldr	r2, [r1, #8]
 8001b2a:	690b      	ldr	r3, [r1, #16]
 8001b2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b30:	4293      	cmp	r3, r2
 8001b32:	bfb8      	it	lt
 8001b34:	4613      	movlt	r3, r2
 8001b36:	6033      	str	r3, [r6, #0]
 8001b38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b3c:	4607      	mov	r7, r0
 8001b3e:	460c      	mov	r4, r1
 8001b40:	b10a      	cbz	r2, 8001b46 <_printf_common+0x26>
 8001b42:	3301      	adds	r3, #1
 8001b44:	6033      	str	r3, [r6, #0]
 8001b46:	6823      	ldr	r3, [r4, #0]
 8001b48:	0699      	lsls	r1, r3, #26
 8001b4a:	bf42      	ittt	mi
 8001b4c:	6833      	ldrmi	r3, [r6, #0]
 8001b4e:	3302      	addmi	r3, #2
 8001b50:	6033      	strmi	r3, [r6, #0]
 8001b52:	6825      	ldr	r5, [r4, #0]
 8001b54:	f015 0506 	ands.w	r5, r5, #6
 8001b58:	d106      	bne.n	8001b68 <_printf_common+0x48>
 8001b5a:	f104 0a19 	add.w	sl, r4, #25
 8001b5e:	68e3      	ldr	r3, [r4, #12]
 8001b60:	6832      	ldr	r2, [r6, #0]
 8001b62:	1a9b      	subs	r3, r3, r2
 8001b64:	42ab      	cmp	r3, r5
 8001b66:	dc26      	bgt.n	8001bb6 <_printf_common+0x96>
 8001b68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001b6c:	1e13      	subs	r3, r2, #0
 8001b6e:	6822      	ldr	r2, [r4, #0]
 8001b70:	bf18      	it	ne
 8001b72:	2301      	movne	r3, #1
 8001b74:	0692      	lsls	r2, r2, #26
 8001b76:	d42b      	bmi.n	8001bd0 <_printf_common+0xb0>
 8001b78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b7c:	4649      	mov	r1, r9
 8001b7e:	4638      	mov	r0, r7
 8001b80:	47c0      	blx	r8
 8001b82:	3001      	adds	r0, #1
 8001b84:	d01e      	beq.n	8001bc4 <_printf_common+0xa4>
 8001b86:	6823      	ldr	r3, [r4, #0]
 8001b88:	6922      	ldr	r2, [r4, #16]
 8001b8a:	f003 0306 	and.w	r3, r3, #6
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	bf02      	ittt	eq
 8001b92:	68e5      	ldreq	r5, [r4, #12]
 8001b94:	6833      	ldreq	r3, [r6, #0]
 8001b96:	1aed      	subeq	r5, r5, r3
 8001b98:	68a3      	ldr	r3, [r4, #8]
 8001b9a:	bf0c      	ite	eq
 8001b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ba0:	2500      	movne	r5, #0
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	bfc4      	itt	gt
 8001ba6:	1a9b      	subgt	r3, r3, r2
 8001ba8:	18ed      	addgt	r5, r5, r3
 8001baa:	2600      	movs	r6, #0
 8001bac:	341a      	adds	r4, #26
 8001bae:	42b5      	cmp	r5, r6
 8001bb0:	d11a      	bne.n	8001be8 <_printf_common+0xc8>
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	e008      	b.n	8001bc8 <_printf_common+0xa8>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	4652      	mov	r2, sl
 8001bba:	4649      	mov	r1, r9
 8001bbc:	4638      	mov	r0, r7
 8001bbe:	47c0      	blx	r8
 8001bc0:	3001      	adds	r0, #1
 8001bc2:	d103      	bne.n	8001bcc <_printf_common+0xac>
 8001bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bcc:	3501      	adds	r5, #1
 8001bce:	e7c6      	b.n	8001b5e <_printf_common+0x3e>
 8001bd0:	18e1      	adds	r1, r4, r3
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	2030      	movs	r0, #48	; 0x30
 8001bd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001bda:	4422      	add	r2, r4
 8001bdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001be0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001be4:	3302      	adds	r3, #2
 8001be6:	e7c7      	b.n	8001b78 <_printf_common+0x58>
 8001be8:	2301      	movs	r3, #1
 8001bea:	4622      	mov	r2, r4
 8001bec:	4649      	mov	r1, r9
 8001bee:	4638      	mov	r0, r7
 8001bf0:	47c0      	blx	r8
 8001bf2:	3001      	adds	r0, #1
 8001bf4:	d0e6      	beq.n	8001bc4 <_printf_common+0xa4>
 8001bf6:	3601      	adds	r6, #1
 8001bf8:	e7d9      	b.n	8001bae <_printf_common+0x8e>
	...

08001bfc <_printf_i>:
 8001bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c00:	7e0f      	ldrb	r7, [r1, #24]
 8001c02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001c04:	2f78      	cmp	r7, #120	; 0x78
 8001c06:	4691      	mov	r9, r2
 8001c08:	4680      	mov	r8, r0
 8001c0a:	460c      	mov	r4, r1
 8001c0c:	469a      	mov	sl, r3
 8001c0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001c12:	d807      	bhi.n	8001c24 <_printf_i+0x28>
 8001c14:	2f62      	cmp	r7, #98	; 0x62
 8001c16:	d80a      	bhi.n	8001c2e <_printf_i+0x32>
 8001c18:	2f00      	cmp	r7, #0
 8001c1a:	f000 80d4 	beq.w	8001dc6 <_printf_i+0x1ca>
 8001c1e:	2f58      	cmp	r7, #88	; 0x58
 8001c20:	f000 80c0 	beq.w	8001da4 <_printf_i+0x1a8>
 8001c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001c2c:	e03a      	b.n	8001ca4 <_printf_i+0xa8>
 8001c2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001c32:	2b15      	cmp	r3, #21
 8001c34:	d8f6      	bhi.n	8001c24 <_printf_i+0x28>
 8001c36:	a101      	add	r1, pc, #4	; (adr r1, 8001c3c <_printf_i+0x40>)
 8001c38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001c3c:	08001c95 	.word	0x08001c95
 8001c40:	08001ca9 	.word	0x08001ca9
 8001c44:	08001c25 	.word	0x08001c25
 8001c48:	08001c25 	.word	0x08001c25
 8001c4c:	08001c25 	.word	0x08001c25
 8001c50:	08001c25 	.word	0x08001c25
 8001c54:	08001ca9 	.word	0x08001ca9
 8001c58:	08001c25 	.word	0x08001c25
 8001c5c:	08001c25 	.word	0x08001c25
 8001c60:	08001c25 	.word	0x08001c25
 8001c64:	08001c25 	.word	0x08001c25
 8001c68:	08001dad 	.word	0x08001dad
 8001c6c:	08001cd5 	.word	0x08001cd5
 8001c70:	08001d67 	.word	0x08001d67
 8001c74:	08001c25 	.word	0x08001c25
 8001c78:	08001c25 	.word	0x08001c25
 8001c7c:	08001dcf 	.word	0x08001dcf
 8001c80:	08001c25 	.word	0x08001c25
 8001c84:	08001cd5 	.word	0x08001cd5
 8001c88:	08001c25 	.word	0x08001c25
 8001c8c:	08001c25 	.word	0x08001c25
 8001c90:	08001d6f 	.word	0x08001d6f
 8001c94:	682b      	ldr	r3, [r5, #0]
 8001c96:	1d1a      	adds	r2, r3, #4
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	602a      	str	r2, [r5, #0]
 8001c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e09f      	b.n	8001de8 <_printf_i+0x1ec>
 8001ca8:	6820      	ldr	r0, [r4, #0]
 8001caa:	682b      	ldr	r3, [r5, #0]
 8001cac:	0607      	lsls	r7, r0, #24
 8001cae:	f103 0104 	add.w	r1, r3, #4
 8001cb2:	6029      	str	r1, [r5, #0]
 8001cb4:	d501      	bpl.n	8001cba <_printf_i+0xbe>
 8001cb6:	681e      	ldr	r6, [r3, #0]
 8001cb8:	e003      	b.n	8001cc2 <_printf_i+0xc6>
 8001cba:	0646      	lsls	r6, r0, #25
 8001cbc:	d5fb      	bpl.n	8001cb6 <_printf_i+0xba>
 8001cbe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001cc2:	2e00      	cmp	r6, #0
 8001cc4:	da03      	bge.n	8001cce <_printf_i+0xd2>
 8001cc6:	232d      	movs	r3, #45	; 0x2d
 8001cc8:	4276      	negs	r6, r6
 8001cca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001cce:	485a      	ldr	r0, [pc, #360]	; (8001e38 <_printf_i+0x23c>)
 8001cd0:	230a      	movs	r3, #10
 8001cd2:	e012      	b.n	8001cfa <_printf_i+0xfe>
 8001cd4:	682b      	ldr	r3, [r5, #0]
 8001cd6:	6820      	ldr	r0, [r4, #0]
 8001cd8:	1d19      	adds	r1, r3, #4
 8001cda:	6029      	str	r1, [r5, #0]
 8001cdc:	0605      	lsls	r5, r0, #24
 8001cde:	d501      	bpl.n	8001ce4 <_printf_i+0xe8>
 8001ce0:	681e      	ldr	r6, [r3, #0]
 8001ce2:	e002      	b.n	8001cea <_printf_i+0xee>
 8001ce4:	0641      	lsls	r1, r0, #25
 8001ce6:	d5fb      	bpl.n	8001ce0 <_printf_i+0xe4>
 8001ce8:	881e      	ldrh	r6, [r3, #0]
 8001cea:	4853      	ldr	r0, [pc, #332]	; (8001e38 <_printf_i+0x23c>)
 8001cec:	2f6f      	cmp	r7, #111	; 0x6f
 8001cee:	bf0c      	ite	eq
 8001cf0:	2308      	moveq	r3, #8
 8001cf2:	230a      	movne	r3, #10
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001cfa:	6865      	ldr	r5, [r4, #4]
 8001cfc:	60a5      	str	r5, [r4, #8]
 8001cfe:	2d00      	cmp	r5, #0
 8001d00:	bfa2      	ittt	ge
 8001d02:	6821      	ldrge	r1, [r4, #0]
 8001d04:	f021 0104 	bicge.w	r1, r1, #4
 8001d08:	6021      	strge	r1, [r4, #0]
 8001d0a:	b90e      	cbnz	r6, 8001d10 <_printf_i+0x114>
 8001d0c:	2d00      	cmp	r5, #0
 8001d0e:	d04b      	beq.n	8001da8 <_printf_i+0x1ac>
 8001d10:	4615      	mov	r5, r2
 8001d12:	fbb6 f1f3 	udiv	r1, r6, r3
 8001d16:	fb03 6711 	mls	r7, r3, r1, r6
 8001d1a:	5dc7      	ldrb	r7, [r0, r7]
 8001d1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001d20:	4637      	mov	r7, r6
 8001d22:	42bb      	cmp	r3, r7
 8001d24:	460e      	mov	r6, r1
 8001d26:	d9f4      	bls.n	8001d12 <_printf_i+0x116>
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d10b      	bne.n	8001d44 <_printf_i+0x148>
 8001d2c:	6823      	ldr	r3, [r4, #0]
 8001d2e:	07de      	lsls	r6, r3, #31
 8001d30:	d508      	bpl.n	8001d44 <_printf_i+0x148>
 8001d32:	6923      	ldr	r3, [r4, #16]
 8001d34:	6861      	ldr	r1, [r4, #4]
 8001d36:	4299      	cmp	r1, r3
 8001d38:	bfde      	ittt	le
 8001d3a:	2330      	movle	r3, #48	; 0x30
 8001d3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001d40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001d44:	1b52      	subs	r2, r2, r5
 8001d46:	6122      	str	r2, [r4, #16]
 8001d48:	f8cd a000 	str.w	sl, [sp]
 8001d4c:	464b      	mov	r3, r9
 8001d4e:	aa03      	add	r2, sp, #12
 8001d50:	4621      	mov	r1, r4
 8001d52:	4640      	mov	r0, r8
 8001d54:	f7ff fee4 	bl	8001b20 <_printf_common>
 8001d58:	3001      	adds	r0, #1
 8001d5a:	d14a      	bne.n	8001df2 <_printf_i+0x1f6>
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	b004      	add	sp, #16
 8001d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d66:	6823      	ldr	r3, [r4, #0]
 8001d68:	f043 0320 	orr.w	r3, r3, #32
 8001d6c:	6023      	str	r3, [r4, #0]
 8001d6e:	4833      	ldr	r0, [pc, #204]	; (8001e3c <_printf_i+0x240>)
 8001d70:	2778      	movs	r7, #120	; 0x78
 8001d72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001d76:	6823      	ldr	r3, [r4, #0]
 8001d78:	6829      	ldr	r1, [r5, #0]
 8001d7a:	061f      	lsls	r7, r3, #24
 8001d7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8001d80:	d402      	bmi.n	8001d88 <_printf_i+0x18c>
 8001d82:	065f      	lsls	r7, r3, #25
 8001d84:	bf48      	it	mi
 8001d86:	b2b6      	uxthmi	r6, r6
 8001d88:	07df      	lsls	r7, r3, #31
 8001d8a:	bf48      	it	mi
 8001d8c:	f043 0320 	orrmi.w	r3, r3, #32
 8001d90:	6029      	str	r1, [r5, #0]
 8001d92:	bf48      	it	mi
 8001d94:	6023      	strmi	r3, [r4, #0]
 8001d96:	b91e      	cbnz	r6, 8001da0 <_printf_i+0x1a4>
 8001d98:	6823      	ldr	r3, [r4, #0]
 8001d9a:	f023 0320 	bic.w	r3, r3, #32
 8001d9e:	6023      	str	r3, [r4, #0]
 8001da0:	2310      	movs	r3, #16
 8001da2:	e7a7      	b.n	8001cf4 <_printf_i+0xf8>
 8001da4:	4824      	ldr	r0, [pc, #144]	; (8001e38 <_printf_i+0x23c>)
 8001da6:	e7e4      	b.n	8001d72 <_printf_i+0x176>
 8001da8:	4615      	mov	r5, r2
 8001daa:	e7bd      	b.n	8001d28 <_printf_i+0x12c>
 8001dac:	682b      	ldr	r3, [r5, #0]
 8001dae:	6826      	ldr	r6, [r4, #0]
 8001db0:	6961      	ldr	r1, [r4, #20]
 8001db2:	1d18      	adds	r0, r3, #4
 8001db4:	6028      	str	r0, [r5, #0]
 8001db6:	0635      	lsls	r5, r6, #24
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	d501      	bpl.n	8001dc0 <_printf_i+0x1c4>
 8001dbc:	6019      	str	r1, [r3, #0]
 8001dbe:	e002      	b.n	8001dc6 <_printf_i+0x1ca>
 8001dc0:	0670      	lsls	r0, r6, #25
 8001dc2:	d5fb      	bpl.n	8001dbc <_printf_i+0x1c0>
 8001dc4:	8019      	strh	r1, [r3, #0]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	6123      	str	r3, [r4, #16]
 8001dca:	4615      	mov	r5, r2
 8001dcc:	e7bc      	b.n	8001d48 <_printf_i+0x14c>
 8001dce:	682b      	ldr	r3, [r5, #0]
 8001dd0:	1d1a      	adds	r2, r3, #4
 8001dd2:	602a      	str	r2, [r5, #0]
 8001dd4:	681d      	ldr	r5, [r3, #0]
 8001dd6:	6862      	ldr	r2, [r4, #4]
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4628      	mov	r0, r5
 8001ddc:	f7fe fa00 	bl	80001e0 <memchr>
 8001de0:	b108      	cbz	r0, 8001de6 <_printf_i+0x1ea>
 8001de2:	1b40      	subs	r0, r0, r5
 8001de4:	6060      	str	r0, [r4, #4]
 8001de6:	6863      	ldr	r3, [r4, #4]
 8001de8:	6123      	str	r3, [r4, #16]
 8001dea:	2300      	movs	r3, #0
 8001dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001df0:	e7aa      	b.n	8001d48 <_printf_i+0x14c>
 8001df2:	6923      	ldr	r3, [r4, #16]
 8001df4:	462a      	mov	r2, r5
 8001df6:	4649      	mov	r1, r9
 8001df8:	4640      	mov	r0, r8
 8001dfa:	47d0      	blx	sl
 8001dfc:	3001      	adds	r0, #1
 8001dfe:	d0ad      	beq.n	8001d5c <_printf_i+0x160>
 8001e00:	6823      	ldr	r3, [r4, #0]
 8001e02:	079b      	lsls	r3, r3, #30
 8001e04:	d413      	bmi.n	8001e2e <_printf_i+0x232>
 8001e06:	68e0      	ldr	r0, [r4, #12]
 8001e08:	9b03      	ldr	r3, [sp, #12]
 8001e0a:	4298      	cmp	r0, r3
 8001e0c:	bfb8      	it	lt
 8001e0e:	4618      	movlt	r0, r3
 8001e10:	e7a6      	b.n	8001d60 <_printf_i+0x164>
 8001e12:	2301      	movs	r3, #1
 8001e14:	4632      	mov	r2, r6
 8001e16:	4649      	mov	r1, r9
 8001e18:	4640      	mov	r0, r8
 8001e1a:	47d0      	blx	sl
 8001e1c:	3001      	adds	r0, #1
 8001e1e:	d09d      	beq.n	8001d5c <_printf_i+0x160>
 8001e20:	3501      	adds	r5, #1
 8001e22:	68e3      	ldr	r3, [r4, #12]
 8001e24:	9903      	ldr	r1, [sp, #12]
 8001e26:	1a5b      	subs	r3, r3, r1
 8001e28:	42ab      	cmp	r3, r5
 8001e2a:	dcf2      	bgt.n	8001e12 <_printf_i+0x216>
 8001e2c:	e7eb      	b.n	8001e06 <_printf_i+0x20a>
 8001e2e:	2500      	movs	r5, #0
 8001e30:	f104 0619 	add.w	r6, r4, #25
 8001e34:	e7f5      	b.n	8001e22 <_printf_i+0x226>
 8001e36:	bf00      	nop
 8001e38:	080023c9 	.word	0x080023c9
 8001e3c:	080023da 	.word	0x080023da

08001e40 <__sflush_r>:
 8001e40:	898a      	ldrh	r2, [r1, #12]
 8001e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e46:	4605      	mov	r5, r0
 8001e48:	0710      	lsls	r0, r2, #28
 8001e4a:	460c      	mov	r4, r1
 8001e4c:	d458      	bmi.n	8001f00 <__sflush_r+0xc0>
 8001e4e:	684b      	ldr	r3, [r1, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	dc05      	bgt.n	8001e60 <__sflush_r+0x20>
 8001e54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	dc02      	bgt.n	8001e60 <__sflush_r+0x20>
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e62:	2e00      	cmp	r6, #0
 8001e64:	d0f9      	beq.n	8001e5a <__sflush_r+0x1a>
 8001e66:	2300      	movs	r3, #0
 8001e68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001e6c:	682f      	ldr	r7, [r5, #0]
 8001e6e:	6a21      	ldr	r1, [r4, #32]
 8001e70:	602b      	str	r3, [r5, #0]
 8001e72:	d032      	beq.n	8001eda <__sflush_r+0x9a>
 8001e74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e76:	89a3      	ldrh	r3, [r4, #12]
 8001e78:	075a      	lsls	r2, r3, #29
 8001e7a:	d505      	bpl.n	8001e88 <__sflush_r+0x48>
 8001e7c:	6863      	ldr	r3, [r4, #4]
 8001e7e:	1ac0      	subs	r0, r0, r3
 8001e80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e82:	b10b      	cbz	r3, 8001e88 <__sflush_r+0x48>
 8001e84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e86:	1ac0      	subs	r0, r0, r3
 8001e88:	2300      	movs	r3, #0
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e8e:	6a21      	ldr	r1, [r4, #32]
 8001e90:	4628      	mov	r0, r5
 8001e92:	47b0      	blx	r6
 8001e94:	1c43      	adds	r3, r0, #1
 8001e96:	89a3      	ldrh	r3, [r4, #12]
 8001e98:	d106      	bne.n	8001ea8 <__sflush_r+0x68>
 8001e9a:	6829      	ldr	r1, [r5, #0]
 8001e9c:	291d      	cmp	r1, #29
 8001e9e:	d82b      	bhi.n	8001ef8 <__sflush_r+0xb8>
 8001ea0:	4a29      	ldr	r2, [pc, #164]	; (8001f48 <__sflush_r+0x108>)
 8001ea2:	410a      	asrs	r2, r1
 8001ea4:	07d6      	lsls	r6, r2, #31
 8001ea6:	d427      	bmi.n	8001ef8 <__sflush_r+0xb8>
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	6062      	str	r2, [r4, #4]
 8001eac:	04d9      	lsls	r1, r3, #19
 8001eae:	6922      	ldr	r2, [r4, #16]
 8001eb0:	6022      	str	r2, [r4, #0]
 8001eb2:	d504      	bpl.n	8001ebe <__sflush_r+0x7e>
 8001eb4:	1c42      	adds	r2, r0, #1
 8001eb6:	d101      	bne.n	8001ebc <__sflush_r+0x7c>
 8001eb8:	682b      	ldr	r3, [r5, #0]
 8001eba:	b903      	cbnz	r3, 8001ebe <__sflush_r+0x7e>
 8001ebc:	6560      	str	r0, [r4, #84]	; 0x54
 8001ebe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ec0:	602f      	str	r7, [r5, #0]
 8001ec2:	2900      	cmp	r1, #0
 8001ec4:	d0c9      	beq.n	8001e5a <__sflush_r+0x1a>
 8001ec6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001eca:	4299      	cmp	r1, r3
 8001ecc:	d002      	beq.n	8001ed4 <__sflush_r+0x94>
 8001ece:	4628      	mov	r0, r5
 8001ed0:	f7ff fbe2 	bl	8001698 <_free_r>
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	6360      	str	r0, [r4, #52]	; 0x34
 8001ed8:	e7c0      	b.n	8001e5c <__sflush_r+0x1c>
 8001eda:	2301      	movs	r3, #1
 8001edc:	4628      	mov	r0, r5
 8001ede:	47b0      	blx	r6
 8001ee0:	1c41      	adds	r1, r0, #1
 8001ee2:	d1c8      	bne.n	8001e76 <__sflush_r+0x36>
 8001ee4:	682b      	ldr	r3, [r5, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0c5      	beq.n	8001e76 <__sflush_r+0x36>
 8001eea:	2b1d      	cmp	r3, #29
 8001eec:	d001      	beq.n	8001ef2 <__sflush_r+0xb2>
 8001eee:	2b16      	cmp	r3, #22
 8001ef0:	d101      	bne.n	8001ef6 <__sflush_r+0xb6>
 8001ef2:	602f      	str	r7, [r5, #0]
 8001ef4:	e7b1      	b.n	8001e5a <__sflush_r+0x1a>
 8001ef6:	89a3      	ldrh	r3, [r4, #12]
 8001ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001efc:	81a3      	strh	r3, [r4, #12]
 8001efe:	e7ad      	b.n	8001e5c <__sflush_r+0x1c>
 8001f00:	690f      	ldr	r7, [r1, #16]
 8001f02:	2f00      	cmp	r7, #0
 8001f04:	d0a9      	beq.n	8001e5a <__sflush_r+0x1a>
 8001f06:	0793      	lsls	r3, r2, #30
 8001f08:	680e      	ldr	r6, [r1, #0]
 8001f0a:	bf08      	it	eq
 8001f0c:	694b      	ldreq	r3, [r1, #20]
 8001f0e:	600f      	str	r7, [r1, #0]
 8001f10:	bf18      	it	ne
 8001f12:	2300      	movne	r3, #0
 8001f14:	eba6 0807 	sub.w	r8, r6, r7
 8001f18:	608b      	str	r3, [r1, #8]
 8001f1a:	f1b8 0f00 	cmp.w	r8, #0
 8001f1e:	dd9c      	ble.n	8001e5a <__sflush_r+0x1a>
 8001f20:	6a21      	ldr	r1, [r4, #32]
 8001f22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001f24:	4643      	mov	r3, r8
 8001f26:	463a      	mov	r2, r7
 8001f28:	4628      	mov	r0, r5
 8001f2a:	47b0      	blx	r6
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	dc06      	bgt.n	8001f3e <__sflush_r+0xfe>
 8001f30:	89a3      	ldrh	r3, [r4, #12]
 8001f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f36:	81a3      	strh	r3, [r4, #12]
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3c:	e78e      	b.n	8001e5c <__sflush_r+0x1c>
 8001f3e:	4407      	add	r7, r0
 8001f40:	eba8 0800 	sub.w	r8, r8, r0
 8001f44:	e7e9      	b.n	8001f1a <__sflush_r+0xda>
 8001f46:	bf00      	nop
 8001f48:	dfbffffe 	.word	0xdfbffffe

08001f4c <_fflush_r>:
 8001f4c:	b538      	push	{r3, r4, r5, lr}
 8001f4e:	690b      	ldr	r3, [r1, #16]
 8001f50:	4605      	mov	r5, r0
 8001f52:	460c      	mov	r4, r1
 8001f54:	b913      	cbnz	r3, 8001f5c <_fflush_r+0x10>
 8001f56:	2500      	movs	r5, #0
 8001f58:	4628      	mov	r0, r5
 8001f5a:	bd38      	pop	{r3, r4, r5, pc}
 8001f5c:	b118      	cbz	r0, 8001f66 <_fflush_r+0x1a>
 8001f5e:	6a03      	ldr	r3, [r0, #32]
 8001f60:	b90b      	cbnz	r3, 8001f66 <_fflush_r+0x1a>
 8001f62:	f7ff fa73 	bl	800144c <__sinit>
 8001f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f3      	beq.n	8001f56 <_fflush_r+0xa>
 8001f6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001f70:	07d0      	lsls	r0, r2, #31
 8001f72:	d404      	bmi.n	8001f7e <_fflush_r+0x32>
 8001f74:	0599      	lsls	r1, r3, #22
 8001f76:	d402      	bmi.n	8001f7e <_fflush_r+0x32>
 8001f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f7a:	f7ff fb6c 	bl	8001656 <__retarget_lock_acquire_recursive>
 8001f7e:	4628      	mov	r0, r5
 8001f80:	4621      	mov	r1, r4
 8001f82:	f7ff ff5d 	bl	8001e40 <__sflush_r>
 8001f86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f88:	07da      	lsls	r2, r3, #31
 8001f8a:	4605      	mov	r5, r0
 8001f8c:	d4e4      	bmi.n	8001f58 <_fflush_r+0xc>
 8001f8e:	89a3      	ldrh	r3, [r4, #12]
 8001f90:	059b      	lsls	r3, r3, #22
 8001f92:	d4e1      	bmi.n	8001f58 <_fflush_r+0xc>
 8001f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f96:	f7ff fb5f 	bl	8001658 <__retarget_lock_release_recursive>
 8001f9a:	e7dd      	b.n	8001f58 <_fflush_r+0xc>

08001f9c <fiprintf>:
 8001f9c:	b40e      	push	{r1, r2, r3}
 8001f9e:	b503      	push	{r0, r1, lr}
 8001fa0:	4601      	mov	r1, r0
 8001fa2:	ab03      	add	r3, sp, #12
 8001fa4:	4805      	ldr	r0, [pc, #20]	; (8001fbc <fiprintf+0x20>)
 8001fa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8001faa:	6800      	ldr	r0, [r0, #0]
 8001fac:	9301      	str	r3, [sp, #4]
 8001fae:	f7ff fc9d 	bl	80018ec <_vfiprintf_r>
 8001fb2:	b002      	add	sp, #8
 8001fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8001fb8:	b003      	add	sp, #12
 8001fba:	4770      	bx	lr
 8001fbc:	20000070 	.word	0x20000070

08001fc0 <__swbuf_r>:
 8001fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fc2:	460e      	mov	r6, r1
 8001fc4:	4614      	mov	r4, r2
 8001fc6:	4605      	mov	r5, r0
 8001fc8:	b118      	cbz	r0, 8001fd2 <__swbuf_r+0x12>
 8001fca:	6a03      	ldr	r3, [r0, #32]
 8001fcc:	b90b      	cbnz	r3, 8001fd2 <__swbuf_r+0x12>
 8001fce:	f7ff fa3d 	bl	800144c <__sinit>
 8001fd2:	69a3      	ldr	r3, [r4, #24]
 8001fd4:	60a3      	str	r3, [r4, #8]
 8001fd6:	89a3      	ldrh	r3, [r4, #12]
 8001fd8:	071a      	lsls	r2, r3, #28
 8001fda:	d525      	bpl.n	8002028 <__swbuf_r+0x68>
 8001fdc:	6923      	ldr	r3, [r4, #16]
 8001fde:	b31b      	cbz	r3, 8002028 <__swbuf_r+0x68>
 8001fe0:	6823      	ldr	r3, [r4, #0]
 8001fe2:	6922      	ldr	r2, [r4, #16]
 8001fe4:	1a98      	subs	r0, r3, r2
 8001fe6:	6963      	ldr	r3, [r4, #20]
 8001fe8:	b2f6      	uxtb	r6, r6
 8001fea:	4283      	cmp	r3, r0
 8001fec:	4637      	mov	r7, r6
 8001fee:	dc04      	bgt.n	8001ffa <__swbuf_r+0x3a>
 8001ff0:	4621      	mov	r1, r4
 8001ff2:	4628      	mov	r0, r5
 8001ff4:	f7ff ffaa 	bl	8001f4c <_fflush_r>
 8001ff8:	b9e0      	cbnz	r0, 8002034 <__swbuf_r+0x74>
 8001ffa:	68a3      	ldr	r3, [r4, #8]
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	60a3      	str	r3, [r4, #8]
 8002000:	6823      	ldr	r3, [r4, #0]
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	6022      	str	r2, [r4, #0]
 8002006:	701e      	strb	r6, [r3, #0]
 8002008:	6962      	ldr	r2, [r4, #20]
 800200a:	1c43      	adds	r3, r0, #1
 800200c:	429a      	cmp	r2, r3
 800200e:	d004      	beq.n	800201a <__swbuf_r+0x5a>
 8002010:	89a3      	ldrh	r3, [r4, #12]
 8002012:	07db      	lsls	r3, r3, #31
 8002014:	d506      	bpl.n	8002024 <__swbuf_r+0x64>
 8002016:	2e0a      	cmp	r6, #10
 8002018:	d104      	bne.n	8002024 <__swbuf_r+0x64>
 800201a:	4621      	mov	r1, r4
 800201c:	4628      	mov	r0, r5
 800201e:	f7ff ff95 	bl	8001f4c <_fflush_r>
 8002022:	b938      	cbnz	r0, 8002034 <__swbuf_r+0x74>
 8002024:	4638      	mov	r0, r7
 8002026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002028:	4621      	mov	r1, r4
 800202a:	4628      	mov	r0, r5
 800202c:	f000 f806 	bl	800203c <__swsetup_r>
 8002030:	2800      	cmp	r0, #0
 8002032:	d0d5      	beq.n	8001fe0 <__swbuf_r+0x20>
 8002034:	f04f 37ff 	mov.w	r7, #4294967295
 8002038:	e7f4      	b.n	8002024 <__swbuf_r+0x64>
	...

0800203c <__swsetup_r>:
 800203c:	b538      	push	{r3, r4, r5, lr}
 800203e:	4b2a      	ldr	r3, [pc, #168]	; (80020e8 <__swsetup_r+0xac>)
 8002040:	4605      	mov	r5, r0
 8002042:	6818      	ldr	r0, [r3, #0]
 8002044:	460c      	mov	r4, r1
 8002046:	b118      	cbz	r0, 8002050 <__swsetup_r+0x14>
 8002048:	6a03      	ldr	r3, [r0, #32]
 800204a:	b90b      	cbnz	r3, 8002050 <__swsetup_r+0x14>
 800204c:	f7ff f9fe 	bl	800144c <__sinit>
 8002050:	89a3      	ldrh	r3, [r4, #12]
 8002052:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002056:	0718      	lsls	r0, r3, #28
 8002058:	d422      	bmi.n	80020a0 <__swsetup_r+0x64>
 800205a:	06d9      	lsls	r1, r3, #27
 800205c:	d407      	bmi.n	800206e <__swsetup_r+0x32>
 800205e:	2309      	movs	r3, #9
 8002060:	602b      	str	r3, [r5, #0]
 8002062:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002066:	81a3      	strh	r3, [r4, #12]
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	e034      	b.n	80020d8 <__swsetup_r+0x9c>
 800206e:	0758      	lsls	r0, r3, #29
 8002070:	d512      	bpl.n	8002098 <__swsetup_r+0x5c>
 8002072:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002074:	b141      	cbz	r1, 8002088 <__swsetup_r+0x4c>
 8002076:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800207a:	4299      	cmp	r1, r3
 800207c:	d002      	beq.n	8002084 <__swsetup_r+0x48>
 800207e:	4628      	mov	r0, r5
 8002080:	f7ff fb0a 	bl	8001698 <_free_r>
 8002084:	2300      	movs	r3, #0
 8002086:	6363      	str	r3, [r4, #52]	; 0x34
 8002088:	89a3      	ldrh	r3, [r4, #12]
 800208a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800208e:	81a3      	strh	r3, [r4, #12]
 8002090:	2300      	movs	r3, #0
 8002092:	6063      	str	r3, [r4, #4]
 8002094:	6923      	ldr	r3, [r4, #16]
 8002096:	6023      	str	r3, [r4, #0]
 8002098:	89a3      	ldrh	r3, [r4, #12]
 800209a:	f043 0308 	orr.w	r3, r3, #8
 800209e:	81a3      	strh	r3, [r4, #12]
 80020a0:	6923      	ldr	r3, [r4, #16]
 80020a2:	b94b      	cbnz	r3, 80020b8 <__swsetup_r+0x7c>
 80020a4:	89a3      	ldrh	r3, [r4, #12]
 80020a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80020aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020ae:	d003      	beq.n	80020b8 <__swsetup_r+0x7c>
 80020b0:	4621      	mov	r1, r4
 80020b2:	4628      	mov	r0, r5
 80020b4:	f000 f857 	bl	8002166 <__smakebuf_r>
 80020b8:	89a0      	ldrh	r0, [r4, #12]
 80020ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80020be:	f010 0301 	ands.w	r3, r0, #1
 80020c2:	d00a      	beq.n	80020da <__swsetup_r+0x9e>
 80020c4:	2300      	movs	r3, #0
 80020c6:	60a3      	str	r3, [r4, #8]
 80020c8:	6963      	ldr	r3, [r4, #20]
 80020ca:	425b      	negs	r3, r3
 80020cc:	61a3      	str	r3, [r4, #24]
 80020ce:	6923      	ldr	r3, [r4, #16]
 80020d0:	b943      	cbnz	r3, 80020e4 <__swsetup_r+0xa8>
 80020d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80020d6:	d1c4      	bne.n	8002062 <__swsetup_r+0x26>
 80020d8:	bd38      	pop	{r3, r4, r5, pc}
 80020da:	0781      	lsls	r1, r0, #30
 80020dc:	bf58      	it	pl
 80020de:	6963      	ldrpl	r3, [r4, #20]
 80020e0:	60a3      	str	r3, [r4, #8]
 80020e2:	e7f4      	b.n	80020ce <__swsetup_r+0x92>
 80020e4:	2000      	movs	r0, #0
 80020e6:	e7f7      	b.n	80020d8 <__swsetup_r+0x9c>
 80020e8:	20000070 	.word	0x20000070

080020ec <_sbrk_r>:
 80020ec:	b538      	push	{r3, r4, r5, lr}
 80020ee:	4d06      	ldr	r5, [pc, #24]	; (8002108 <_sbrk_r+0x1c>)
 80020f0:	2300      	movs	r3, #0
 80020f2:	4604      	mov	r4, r0
 80020f4:	4608      	mov	r0, r1
 80020f6:	602b      	str	r3, [r5, #0]
 80020f8:	f7fe fd9e 	bl	8000c38 <_sbrk>
 80020fc:	1c43      	adds	r3, r0, #1
 80020fe:	d102      	bne.n	8002106 <_sbrk_r+0x1a>
 8002100:	682b      	ldr	r3, [r5, #0]
 8002102:	b103      	cbz	r3, 8002106 <_sbrk_r+0x1a>
 8002104:	6023      	str	r3, [r4, #0]
 8002106:	bd38      	pop	{r3, r4, r5, pc}
 8002108:	2000020c 	.word	0x2000020c

0800210c <abort>:
 800210c:	b508      	push	{r3, lr}
 800210e:	2006      	movs	r0, #6
 8002110:	f000 f88e 	bl	8002230 <raise>
 8002114:	2001      	movs	r0, #1
 8002116:	f7fe fd17 	bl	8000b48 <_exit>

0800211a <__swhatbuf_r>:
 800211a:	b570      	push	{r4, r5, r6, lr}
 800211c:	460c      	mov	r4, r1
 800211e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002122:	2900      	cmp	r1, #0
 8002124:	b096      	sub	sp, #88	; 0x58
 8002126:	4615      	mov	r5, r2
 8002128:	461e      	mov	r6, r3
 800212a:	da0d      	bge.n	8002148 <__swhatbuf_r+0x2e>
 800212c:	89a3      	ldrh	r3, [r4, #12]
 800212e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002132:	f04f 0100 	mov.w	r1, #0
 8002136:	bf0c      	ite	eq
 8002138:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800213c:	2340      	movne	r3, #64	; 0x40
 800213e:	2000      	movs	r0, #0
 8002140:	6031      	str	r1, [r6, #0]
 8002142:	602b      	str	r3, [r5, #0]
 8002144:	b016      	add	sp, #88	; 0x58
 8002146:	bd70      	pop	{r4, r5, r6, pc}
 8002148:	466a      	mov	r2, sp
 800214a:	f000 f879 	bl	8002240 <_fstat_r>
 800214e:	2800      	cmp	r0, #0
 8002150:	dbec      	blt.n	800212c <__swhatbuf_r+0x12>
 8002152:	9901      	ldr	r1, [sp, #4]
 8002154:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002158:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800215c:	4259      	negs	r1, r3
 800215e:	4159      	adcs	r1, r3
 8002160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002164:	e7eb      	b.n	800213e <__swhatbuf_r+0x24>

08002166 <__smakebuf_r>:
 8002166:	898b      	ldrh	r3, [r1, #12]
 8002168:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800216a:	079d      	lsls	r5, r3, #30
 800216c:	4606      	mov	r6, r0
 800216e:	460c      	mov	r4, r1
 8002170:	d507      	bpl.n	8002182 <__smakebuf_r+0x1c>
 8002172:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002176:	6023      	str	r3, [r4, #0]
 8002178:	6123      	str	r3, [r4, #16]
 800217a:	2301      	movs	r3, #1
 800217c:	6163      	str	r3, [r4, #20]
 800217e:	b002      	add	sp, #8
 8002180:	bd70      	pop	{r4, r5, r6, pc}
 8002182:	ab01      	add	r3, sp, #4
 8002184:	466a      	mov	r2, sp
 8002186:	f7ff ffc8 	bl	800211a <__swhatbuf_r>
 800218a:	9900      	ldr	r1, [sp, #0]
 800218c:	4605      	mov	r5, r0
 800218e:	4630      	mov	r0, r6
 8002190:	f7ff faf6 	bl	8001780 <_malloc_r>
 8002194:	b948      	cbnz	r0, 80021aa <__smakebuf_r+0x44>
 8002196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800219a:	059a      	lsls	r2, r3, #22
 800219c:	d4ef      	bmi.n	800217e <__smakebuf_r+0x18>
 800219e:	f023 0303 	bic.w	r3, r3, #3
 80021a2:	f043 0302 	orr.w	r3, r3, #2
 80021a6:	81a3      	strh	r3, [r4, #12]
 80021a8:	e7e3      	b.n	8002172 <__smakebuf_r+0xc>
 80021aa:	89a3      	ldrh	r3, [r4, #12]
 80021ac:	6020      	str	r0, [r4, #0]
 80021ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021b2:	81a3      	strh	r3, [r4, #12]
 80021b4:	9b00      	ldr	r3, [sp, #0]
 80021b6:	6163      	str	r3, [r4, #20]
 80021b8:	9b01      	ldr	r3, [sp, #4]
 80021ba:	6120      	str	r0, [r4, #16]
 80021bc:	b15b      	cbz	r3, 80021d6 <__smakebuf_r+0x70>
 80021be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021c2:	4630      	mov	r0, r6
 80021c4:	f000 f84e 	bl	8002264 <_isatty_r>
 80021c8:	b128      	cbz	r0, 80021d6 <__smakebuf_r+0x70>
 80021ca:	89a3      	ldrh	r3, [r4, #12]
 80021cc:	f023 0303 	bic.w	r3, r3, #3
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	81a3      	strh	r3, [r4, #12]
 80021d6:	89a3      	ldrh	r3, [r4, #12]
 80021d8:	431d      	orrs	r5, r3
 80021da:	81a5      	strh	r5, [r4, #12]
 80021dc:	e7cf      	b.n	800217e <__smakebuf_r+0x18>

080021de <_raise_r>:
 80021de:	291f      	cmp	r1, #31
 80021e0:	b538      	push	{r3, r4, r5, lr}
 80021e2:	4604      	mov	r4, r0
 80021e4:	460d      	mov	r5, r1
 80021e6:	d904      	bls.n	80021f2 <_raise_r+0x14>
 80021e8:	2316      	movs	r3, #22
 80021ea:	6003      	str	r3, [r0, #0]
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295
 80021f0:	bd38      	pop	{r3, r4, r5, pc}
 80021f2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80021f4:	b112      	cbz	r2, 80021fc <_raise_r+0x1e>
 80021f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80021fa:	b94b      	cbnz	r3, 8002210 <_raise_r+0x32>
 80021fc:	4620      	mov	r0, r4
 80021fe:	f000 f853 	bl	80022a8 <_getpid_r>
 8002202:	462a      	mov	r2, r5
 8002204:	4601      	mov	r1, r0
 8002206:	4620      	mov	r0, r4
 8002208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800220c:	f000 b83a 	b.w	8002284 <_kill_r>
 8002210:	2b01      	cmp	r3, #1
 8002212:	d00a      	beq.n	800222a <_raise_r+0x4c>
 8002214:	1c59      	adds	r1, r3, #1
 8002216:	d103      	bne.n	8002220 <_raise_r+0x42>
 8002218:	2316      	movs	r3, #22
 800221a:	6003      	str	r3, [r0, #0]
 800221c:	2001      	movs	r0, #1
 800221e:	e7e7      	b.n	80021f0 <_raise_r+0x12>
 8002220:	2400      	movs	r4, #0
 8002222:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002226:	4628      	mov	r0, r5
 8002228:	4798      	blx	r3
 800222a:	2000      	movs	r0, #0
 800222c:	e7e0      	b.n	80021f0 <_raise_r+0x12>
	...

08002230 <raise>:
 8002230:	4b02      	ldr	r3, [pc, #8]	; (800223c <raise+0xc>)
 8002232:	4601      	mov	r1, r0
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	f7ff bfd2 	b.w	80021de <_raise_r>
 800223a:	bf00      	nop
 800223c:	20000070 	.word	0x20000070

08002240 <_fstat_r>:
 8002240:	b538      	push	{r3, r4, r5, lr}
 8002242:	4d07      	ldr	r5, [pc, #28]	; (8002260 <_fstat_r+0x20>)
 8002244:	2300      	movs	r3, #0
 8002246:	4604      	mov	r4, r0
 8002248:	4608      	mov	r0, r1
 800224a:	4611      	mov	r1, r2
 800224c:	602b      	str	r3, [r5, #0]
 800224e:	f7fe fcca 	bl	8000be6 <_fstat>
 8002252:	1c43      	adds	r3, r0, #1
 8002254:	d102      	bne.n	800225c <_fstat_r+0x1c>
 8002256:	682b      	ldr	r3, [r5, #0]
 8002258:	b103      	cbz	r3, 800225c <_fstat_r+0x1c>
 800225a:	6023      	str	r3, [r4, #0]
 800225c:	bd38      	pop	{r3, r4, r5, pc}
 800225e:	bf00      	nop
 8002260:	2000020c 	.word	0x2000020c

08002264 <_isatty_r>:
 8002264:	b538      	push	{r3, r4, r5, lr}
 8002266:	4d06      	ldr	r5, [pc, #24]	; (8002280 <_isatty_r+0x1c>)
 8002268:	2300      	movs	r3, #0
 800226a:	4604      	mov	r4, r0
 800226c:	4608      	mov	r0, r1
 800226e:	602b      	str	r3, [r5, #0]
 8002270:	f7fe fcc9 	bl	8000c06 <_isatty>
 8002274:	1c43      	adds	r3, r0, #1
 8002276:	d102      	bne.n	800227e <_isatty_r+0x1a>
 8002278:	682b      	ldr	r3, [r5, #0]
 800227a:	b103      	cbz	r3, 800227e <_isatty_r+0x1a>
 800227c:	6023      	str	r3, [r4, #0]
 800227e:	bd38      	pop	{r3, r4, r5, pc}
 8002280:	2000020c 	.word	0x2000020c

08002284 <_kill_r>:
 8002284:	b538      	push	{r3, r4, r5, lr}
 8002286:	4d07      	ldr	r5, [pc, #28]	; (80022a4 <_kill_r+0x20>)
 8002288:	2300      	movs	r3, #0
 800228a:	4604      	mov	r4, r0
 800228c:	4608      	mov	r0, r1
 800228e:	4611      	mov	r1, r2
 8002290:	602b      	str	r3, [r5, #0]
 8002292:	f7fe fc49 	bl	8000b28 <_kill>
 8002296:	1c43      	adds	r3, r0, #1
 8002298:	d102      	bne.n	80022a0 <_kill_r+0x1c>
 800229a:	682b      	ldr	r3, [r5, #0]
 800229c:	b103      	cbz	r3, 80022a0 <_kill_r+0x1c>
 800229e:	6023      	str	r3, [r4, #0]
 80022a0:	bd38      	pop	{r3, r4, r5, pc}
 80022a2:	bf00      	nop
 80022a4:	2000020c 	.word	0x2000020c

080022a8 <_getpid_r>:
 80022a8:	f7fe bc36 	b.w	8000b18 <_getpid>

080022ac <_init>:
 80022ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ae:	bf00      	nop
 80022b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022b2:	bc08      	pop	{r3}
 80022b4:	469e      	mov	lr, r3
 80022b6:	4770      	bx	lr

080022b8 <_fini>:
 80022b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ba:	bf00      	nop
 80022bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022be:	bc08      	pop	{r3}
 80022c0:	469e      	mov	lr, r3
 80022c2:	4770      	bx	lr
