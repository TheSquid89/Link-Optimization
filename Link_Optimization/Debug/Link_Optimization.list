
Link_Optimization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001404  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080015a4  080015a4  000115a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015e8  080015e8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080015e8  080015e8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015e8  080015e8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015e8  080015e8  000115e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015ec  080015ec  000115ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080015f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  0800164c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  0800164c  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001242  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005c2  00000000  00000000  00021311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a0  00000000  00000000  000218d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000011d  00000000  00000000  00021a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000202d  00000000  00000000  00021b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000230f  00000000  00000000  00023bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00055ad2  00000000  00000000  00025ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ca8  00000000  00000000  0007b9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  0007c64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800158c 	.word	0x0800158c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800158c 	.word	0x0800158c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
//void scanning_function(void);



int main()
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	/*init pwm at pa0 and pa1 */
	tim2_pa0_pa1_pwm_init();
 8000284:	f000 f8ba 	bl	80003fc <tim2_pa0_pa1_pwm_init>
	tim2_pa0_pa1_pwm_set_dutycycle(1,100);
 8000288:	2164      	movs	r1, #100	; 0x64
 800028a:	2001      	movs	r0, #1
 800028c:	f000 f96a 	bl	8000564 <tim2_pa0_pa1_pwm_set_dutycycle>
	tim2_pa0_pa1_pwm_set_dutycycle(2,100);
 8000290:	2164      	movs	r1, #100	; 0x64
 8000292:	2002      	movs	r0, #2
 8000294:	f000 f966 	bl	8000564 <tim2_pa0_pa1_pwm_set_dutycycle>
	uart2_tx_init();
 8000298:	f000 f9a4 	bl	80005e4 <uart2_tx_init>


	printf("welcome");
 800029c:	4803      	ldr	r0, [pc, #12]	; (80002ac <main+0x2c>)
 800029e:	f000 faff 	bl	80008a0 <iprintf>

	while(1)
	{

		printf("check");
 80002a2:	4803      	ldr	r0, [pc, #12]	; (80002b0 <main+0x30>)
 80002a4:	f000 fafc 	bl	80008a0 <iprintf>
 80002a8:	e7fb      	b.n	80002a2 <main+0x22>
 80002aa:	bf00      	nop
 80002ac:	080015a4 	.word	0x080015a4
 80002b0:	080015ac 	.word	0x080015ac

080002b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b086      	sub	sp, #24
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	60f8      	str	r0, [r7, #12]
 80002bc:	60b9      	str	r1, [r7, #8]
 80002be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002c0:	2300      	movs	r3, #0
 80002c2:	617b      	str	r3, [r7, #20]
 80002c4:	e00a      	b.n	80002dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80002c6:	f3af 8000 	nop.w
 80002ca:	4601      	mov	r1, r0
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	1c5a      	adds	r2, r3, #1
 80002d0:	60ba      	str	r2, [r7, #8]
 80002d2:	b2ca      	uxtb	r2, r1
 80002d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002d6:	697b      	ldr	r3, [r7, #20]
 80002d8:	3301      	adds	r3, #1
 80002da:	617b      	str	r3, [r7, #20]
 80002dc:	697a      	ldr	r2, [r7, #20]
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	429a      	cmp	r2, r3
 80002e2:	dbf0      	blt.n	80002c6 <_read+0x12>
  }

  return len;
 80002e4:	687b      	ldr	r3, [r7, #4]
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3718      	adds	r7, #24
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}

080002ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002ee:	b580      	push	{r7, lr}
 80002f0:	b086      	sub	sp, #24
 80002f2:	af00      	add	r7, sp, #0
 80002f4:	60f8      	str	r0, [r7, #12]
 80002f6:	60b9      	str	r1, [r7, #8]
 80002f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002fa:	2300      	movs	r3, #0
 80002fc:	617b      	str	r3, [r7, #20]
 80002fe:	e009      	b.n	8000314 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	1c5a      	adds	r2, r3, #1
 8000304:	60ba      	str	r2, [r7, #8]
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	4618      	mov	r0, r3
 800030a:	f000 f947 	bl	800059c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800030e:	697b      	ldr	r3, [r7, #20]
 8000310:	3301      	adds	r3, #1
 8000312:	617b      	str	r3, [r7, #20]
 8000314:	697a      	ldr	r2, [r7, #20]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	429a      	cmp	r2, r3
 800031a:	dbf1      	blt.n	8000300 <_write+0x12>
  }
  return len;
 800031c:	687b      	ldr	r3, [r7, #4]
}
 800031e:	4618      	mov	r0, r3
 8000320:	3718      	adds	r7, #24
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <_close>:

int _close(int file)
{
 8000326:	b480      	push	{r7}
 8000328:	b083      	sub	sp, #12
 800032a:	af00      	add	r7, sp, #0
 800032c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800032e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000332:	4618      	mov	r0, r3
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr

0800033e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800033e:	b480      	push	{r7}
 8000340:	b083      	sub	sp, #12
 8000342:	af00      	add	r7, sp, #0
 8000344:	6078      	str	r0, [r7, #4]
 8000346:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800034e:	605a      	str	r2, [r3, #4]
  return 0;
 8000350:	2300      	movs	r3, #0
}
 8000352:	4618      	mov	r0, r3
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr

0800035e <_isatty>:

int _isatty(int file)
{
 800035e:	b480      	push	{r7}
 8000360:	b083      	sub	sp, #12
 8000362:	af00      	add	r7, sp, #0
 8000364:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000366:	2301      	movs	r3, #1
}
 8000368:	4618      	mov	r0, r3
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	60f8      	str	r0, [r7, #12]
 800037c:	60b9      	str	r1, [r7, #8]
 800037e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000380:	2300      	movs	r3, #0
}
 8000382:	4618      	mov	r0, r3
 8000384:	3714      	adds	r7, #20
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
	...

08000390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b086      	sub	sp, #24
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000398:	4a14      	ldr	r2, [pc, #80]	; (80003ec <_sbrk+0x5c>)
 800039a:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <_sbrk+0x60>)
 800039c:	1ad3      	subs	r3, r2, r3
 800039e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003a4:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <_sbrk+0x64>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d102      	bne.n	80003b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <_sbrk+0x64>)
 80003ae:	4a12      	ldr	r2, [pc, #72]	; (80003f8 <_sbrk+0x68>)
 80003b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003b2:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <_sbrk+0x64>)
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4413      	add	r3, r2
 80003ba:	693a      	ldr	r2, [r7, #16]
 80003bc:	429a      	cmp	r2, r3
 80003be:	d207      	bcs.n	80003d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003c0:	f000 fb12 	bl	80009e8 <__errno>
 80003c4:	4603      	mov	r3, r0
 80003c6:	220c      	movs	r2, #12
 80003c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003ca:	f04f 33ff 	mov.w	r3, #4294967295
 80003ce:	e009      	b.n	80003e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003d0:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <_sbrk+0x64>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003d6:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <_sbrk+0x64>)
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4413      	add	r3, r2
 80003de:	4a05      	ldr	r2, [pc, #20]	; (80003f4 <_sbrk+0x64>)
 80003e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003e2:	68fb      	ldr	r3, [r7, #12]
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	3718      	adds	r7, #24
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20020000 	.word	0x20020000
 80003f0:	00000400 	.word	0x00000400
 80003f4:	20000078 	.word	0x20000078
 80003f8:	200001c8 	.word	0x200001c8

080003fc <tim2_pa0_pa1_pwm_init>:
#define TIM2EN			(1U<<0)
#define CR1_CEN			(1U<<0)


void tim2_pa0_pa1_pwm_init(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
	/*******GPIO Configuration*********/
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000400:	4b56      	ldr	r3, [pc, #344]	; (800055c <tim2_pa0_pa1_pwm_init+0x160>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000404:	4a55      	ldr	r2, [pc, #340]	; (800055c <tim2_pa0_pa1_pwm_init+0x160>)
 8000406:	f043 0301 	orr.w	r3, r3, #1
 800040a:	6313      	str	r3, [r2, #48]	; 0x30
	/*set PA0 and PA1 modes to alternate function mode*/
	/*PA0*/
	GPIOA->MODER &= ~(1U<<0);
 800040c:	4b54      	ldr	r3, [pc, #336]	; (8000560 <tim2_pa0_pa1_pwm_init+0x164>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a53      	ldr	r2, [pc, #332]	; (8000560 <tim2_pa0_pa1_pwm_init+0x164>)
 8000412:	f023 0301 	bic.w	r3, r3, #1
 8000416:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<1);
 8000418:	4b51      	ldr	r3, [pc, #324]	; (8000560 <tim2_pa0_pa1_pwm_init+0x164>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a50      	ldr	r2, [pc, #320]	; (8000560 <tim2_pa0_pa1_pwm_init+0x164>)
 800041e:	f043 0302 	orr.w	r3, r3, #2
 8000422:	6013      	str	r3, [r2, #0]

	/*PA1*/
	GPIOA->MODER &= ~(1U<<2);
 8000424:	4b4e      	ldr	r3, [pc, #312]	; (8000560 <tim2_pa0_pa1_pwm_init+0x164>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a4d      	ldr	r2, [pc, #308]	; (8000560 <tim2_pa0_pa1_pwm_init+0x164>)
 800042a:	f023 0304 	bic.w	r3, r3, #4
 800042e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<3);
 8000430:	4b4b      	ldr	r3, [pc, #300]	; (8000560 <tim2_pa0_pa1_pwm_init+0x164>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a4a      	ldr	r2, [pc, #296]	; (8000560 <tim2_pa0_pa1_pwm_init+0x164>)
 8000436:	f043 0308 	orr.w	r3, r3, #8
 800043a:	6013      	str	r3, [r2, #0]

	/*set alternate function type to TIM2 (AF01 0001)*/
	/*Set AFR for PA0*/
	GPIOA->AFR[0] |= (1U<<0);
 800043c:	4b48      	ldr	r3, [pc, #288]	; (8000560 <tim2_pa0_pa1_pwm_init+0x164>)
 800043e:	6a1b      	ldr	r3, [r3, #32]
 8000440:	4a47      	ldr	r2, [pc, #284]	; (8000560 <tim2_pa0_pa1_pwm_init+0x164>)
 8000442:	f043 0301 	orr.w	r3, r3, #1
 8000446:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<1);
 8000448:	4b45      	ldr	r3, [pc, #276]	; (8000560 <tim2_pa0_pa1_pwm_init+0x164>)
 800044a:	6a1b      	ldr	r3, [r3, #32]
 800044c:	4a44      	ldr	r2, [pc, #272]	; (8000560 <tim2_pa0_pa1_pwm_init+0x164>)
 800044e:	f023 0302 	bic.w	r3, r3, #2
 8000452:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<2);
 8000454:	4b42      	ldr	r3, [pc, #264]	; (8000560 <tim2_pa0_pa1_pwm_init+0x164>)
 8000456:	6a1b      	ldr	r3, [r3, #32]
 8000458:	4a41      	ldr	r2, [pc, #260]	; (8000560 <tim2_pa0_pa1_pwm_init+0x164>)
 800045a:	f023 0304 	bic.w	r3, r3, #4
 800045e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<3);
 8000460:	4b3f      	ldr	r3, [pc, #252]	; (8000560 <tim2_pa0_pa1_pwm_init+0x164>)
 8000462:	6a1b      	ldr	r3, [r3, #32]
 8000464:	4a3e      	ldr	r2, [pc, #248]	; (8000560 <tim2_pa0_pa1_pwm_init+0x164>)
 8000466:	f023 0308 	bic.w	r3, r3, #8
 800046a:	6213      	str	r3, [r2, #32]

	/*Set AFR for PA1*/
	GPIOA->AFR[0] |= (1U<<4);
 800046c:	4b3c      	ldr	r3, [pc, #240]	; (8000560 <tim2_pa0_pa1_pwm_init+0x164>)
 800046e:	6a1b      	ldr	r3, [r3, #32]
 8000470:	4a3b      	ldr	r2, [pc, #236]	; (8000560 <tim2_pa0_pa1_pwm_init+0x164>)
 8000472:	f043 0310 	orr.w	r3, r3, #16
 8000476:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<5);
 8000478:	4b39      	ldr	r3, [pc, #228]	; (8000560 <tim2_pa0_pa1_pwm_init+0x164>)
 800047a:	6a1b      	ldr	r3, [r3, #32]
 800047c:	4a38      	ldr	r2, [pc, #224]	; (8000560 <tim2_pa0_pa1_pwm_init+0x164>)
 800047e:	f023 0320 	bic.w	r3, r3, #32
 8000482:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<6);
 8000484:	4b36      	ldr	r3, [pc, #216]	; (8000560 <tim2_pa0_pa1_pwm_init+0x164>)
 8000486:	6a1b      	ldr	r3, [r3, #32]
 8000488:	4a35      	ldr	r2, [pc, #212]	; (8000560 <tim2_pa0_pa1_pwm_init+0x164>)
 800048a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800048e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<7);
 8000490:	4b33      	ldr	r3, [pc, #204]	; (8000560 <tim2_pa0_pa1_pwm_init+0x164>)
 8000492:	6a1b      	ldr	r3, [r3, #32]
 8000494:	4a32      	ldr	r2, [pc, #200]	; (8000560 <tim2_pa0_pa1_pwm_init+0x164>)
 8000496:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800049a:	6213      	str	r3, [r2, #32]
	/*******Tim2 Configuration*********/
	/*Enable clock access to TIM2*/
	RCC->APB1ENR |= TIM2EN;
 800049c:	4b2f      	ldr	r3, [pc, #188]	; (800055c <tim2_pa0_pa1_pwm_init+0x160>)
 800049e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004a0:	4a2e      	ldr	r2, [pc, #184]	; (800055c <tim2_pa0_pa1_pwm_init+0x160>)
 80004a2:	f043 0301 	orr.w	r3, r3, #1
 80004a6:	6413      	str	r3, [r2, #64]	; 0x40
	/*set timer prescaler*/
	TIM2->PSC = 80;  // 16 000 000 no divider = 16 000 000
 80004a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004ac:	2250      	movs	r2, #80	; 0x50
 80004ae:	629a      	str	r2, [r3, #40]	; 0x28
	/*set auto reload value*/
	TIM2->ARR = 400 - 1; //16 000 000 / 100 = 160 000
 80004b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004b4:	f240 128f 	movw	r2, #399	; 0x18f
 80004b8:	62da      	str	r2, [r3, #44]	; 0x2c
	/*reset the timer count*/
	TIM2->CNT = 0;
 80004ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004be:	2200      	movs	r2, #0
 80004c0:	625a      	str	r2, [r3, #36]	; 0x24
	/*Set PA1 (channel 2) and PA0 (channel 1) to 110 : PWM mode 1 finding OC1M (CH1) and OC2M (CH2) in the reference manual under CCMR1*/
	/*PA0*/
	TIM2->CCMR1 &= ~(1U<<4);
 80004c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004cc:	f023 0310 	bic.w	r3, r3, #16
 80004d0:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=  (1U<<5);
 80004d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004dc:	f043 0320 	orr.w	r3, r3, #32
 80004e0:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=  (1U<<6);
 80004e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004f0:	6193      	str	r3, [r2, #24]
	/*PA1*/
	TIM2->CCMR1 &= ~(1U<<12);
 80004f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000500:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=  (1U<<13);
 8000502:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800050c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000510:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=  (1U<<14);
 8000512:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800051c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000520:	6193      	str	r3, [r2, #24]
	/*Enable ch1 and ch2 search CCER in the reference manual*/
	/*Channel 1*/
	TIM2->CCER |= (1U<<0);
 8000522:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000526:	6a1b      	ldr	r3, [r3, #32]
 8000528:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6213      	str	r3, [r2, #32]
	/*Channel 2*/
	TIM2->CCER |= (1U<<4);
 8000532:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000536:	6a1b      	ldr	r3, [r3, #32]
 8000538:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800053c:	f043 0310 	orr.w	r3, r3, #16
 8000540:	6213      	str	r3, [r2, #32]
	/*enable timer find timx_cr1 in the reference manual and enable CEN (counter enable)*/
	TIM2->CR1 |= CR1_CEN;
 8000542:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6013      	str	r3, [r2, #0]

}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	40023800 	.word	0x40023800
 8000560:	40020000 	.word	0x40020000

08000564 <tim2_pa0_pa1_pwm_set_dutycycle>:



void tim2_pa0_pa1_pwm_set_dutycycle(uint8_t ch, uint32_t dutycycle)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	6039      	str	r1, [r7, #0]
 800056e:	71fb      	strb	r3, [r7, #7]
	/*Select Channel*/
	switch(ch)
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d002      	beq.n	800057c <tim2_pa0_pa1_pwm_set_dutycycle+0x18>
 8000576:	2b02      	cmp	r3, #2
 8000578:	d005      	beq.n	8000586 <tim2_pa0_pa1_pwm_set_dutycycle+0x22>
			TIM2->CCR1 = dutycycle;
			break;
		case 2:
			TIM2->CCR2 = dutycycle;
		default:
			break;
 800057a:	e008      	b.n	800058e <tim2_pa0_pa1_pwm_set_dutycycle+0x2a>
			TIM2->CCR1 = dutycycle;
 800057c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000584:	e004      	b.n	8000590 <tim2_pa0_pa1_pwm_set_dutycycle+0x2c>
			TIM2->CCR2 = dutycycle;
 8000586:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 800058e:	bf00      	nop
	}

}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <__io_putchar>:
	/* read data */
	return USART2->DR;
}

int __io_putchar(int ch) //allows printf to function calling the uart2_write(ch)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f000 f805 	bl	80005b4 <uart2_write>
	return ch;
 80005aa:	687b      	ldr	r3, [r7, #4]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <uart2_write>:


void uart2_write(int ch)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	/*make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}	//to read a register we use the & operation
 80005bc:	bf00      	nop
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <uart2_write+0x2c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f9      	beq.n	80005be <uart2_write+0xa>
	/*write to transmit data register*/

	USART2->DR = (ch & 0xFF);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <uart2_write+0x2c>)
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	6053      	str	r3, [r2, #4]
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40004400 	.word	0x40004400

080005e4 <uart2_tx_init>:




void uart2_tx_init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	/* ************* configure uart gpio pin ************/
	 //1. enable clock access to gpio a
	RCC->AHB1ENR |= GPIOAEN;
 80005e8:	4b20      	ldr	r3, [pc, #128]	; (800066c <uart2_tx_init+0x88>)
 80005ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ec:	4a1f      	ldr	r2, [pc, #124]	; (800066c <uart2_tx_init+0x88>)
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	6313      	str	r3, [r2, #48]	; 0x30
	 // 2. set PA2 mode to alternate function mode
	GPIOA->MODER &= ~(1U<<4);
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <uart2_tx_init+0x8c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a1d      	ldr	r2, [pc, #116]	; (8000670 <uart2_tx_init+0x8c>)
 80005fa:	f023 0310 	bic.w	r3, r3, #16
 80005fe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <uart2_tx_init+0x8c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a1a      	ldr	r2, [pc, #104]	; (8000670 <uart2_tx_init+0x8c>)
 8000606:	f043 0320 	orr.w	r3, r3, #32
 800060a:	6013      	str	r3, [r2, #0]
	 // 3. set PA2 alternate function type to UART_TX (AF07)
	GPIOA->AFR[0] |= (1U<<8);
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <uart2_tx_init+0x8c>)
 800060e:	6a1b      	ldr	r3, [r3, #32]
 8000610:	4a17      	ldr	r2, [pc, #92]	; (8000670 <uart2_tx_init+0x8c>)
 8000612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000616:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <uart2_tx_init+0x8c>)
 800061a:	6a1b      	ldr	r3, [r3, #32]
 800061c:	4a14      	ldr	r2, [pc, #80]	; (8000670 <uart2_tx_init+0x8c>)
 800061e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000622:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <uart2_tx_init+0x8c>)
 8000626:	6a1b      	ldr	r3, [r3, #32]
 8000628:	4a11      	ldr	r2, [pc, #68]	; (8000670 <uart2_tx_init+0x8c>)
 800062a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800062e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <uart2_tx_init+0x8c>)
 8000632:	6a1b      	ldr	r3, [r3, #32]
 8000634:	4a0e      	ldr	r2, [pc, #56]	; (8000670 <uart2_tx_init+0x8c>)
 8000636:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800063a:	6213      	str	r3, [r2, #32]

	/************** configure uart gpio pin ************/
	//Enable clock access to uart2
	RCC->APB1ENR |=UART2EN;
 800063c:	4b0b      	ldr	r3, [pc, #44]	; (800066c <uart2_tx_init+0x88>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a0a      	ldr	r2, [pc, #40]	; (800066c <uart2_tx_init+0x88>)
 8000642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
	//configure baudrate (there is an equation which is the bus frequency)
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800064c:	4909      	ldr	r1, [pc, #36]	; (8000674 <uart2_tx_init+0x90>)
 800064e:	480a      	ldr	r0, [pc, #40]	; (8000678 <uart2_tx_init+0x94>)
 8000650:	f000 f814 	bl	800067c <uart_set_baudrate>
	//configure the transfer direction
	USART2->CR1 = CR1_TE;
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <uart2_tx_init+0x94>)
 8000656:	2208      	movs	r2, #8
 8000658:	60da      	str	r2, [r3, #12]
	//enable uart module
	USART2->CR1 |= CR1_UE;		//the OR operator (|) keeps all 32 bits the same and only changes 13
 800065a:	4b07      	ldr	r3, [pc, #28]	; (8000678 <uart2_tx_init+0x94>)
 800065c:	68db      	ldr	r3, [r3, #12]
 800065e:	4a06      	ldr	r2, [pc, #24]	; (8000678 <uart2_tx_init+0x94>)
 8000660:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000664:	60d3      	str	r3, [r2, #12]
								//if the = operator is used than it will set all but 13 to zero and change only 13


}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40020000 	.word	0x40020000
 8000674:	00f42400 	.word	0x00f42400
 8000678:	40004400 	.word	0x40004400

0800067c <uart_set_baudrate>:
}



static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_BD(PeriphClk,BaudRate);
 8000688:	6879      	ldr	r1, [r7, #4]
 800068a:	68b8      	ldr	r0, [r7, #8]
 800068c:	f000 f808 	bl	80006a0 <compute_uart_BD>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	609a      	str	r2, [r3, #8]
}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <compute_uart_BD>:


static uint16_t compute_uart_BD(uint32_t PeriphClk, uint32_t BaudRate)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	085a      	lsrs	r2, r3, #1
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	441a      	add	r2, r3
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b8:	b29b      	uxth	r3, r3
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
	...

080006c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006c8:	480d      	ldr	r0, [pc, #52]	; (8000700 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <LoopForever+0x6>)
  ldr r1, =_edata
 80006d2:	490d      	ldr	r1, [pc, #52]	; (8000708 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d4:	4a0d      	ldr	r2, [pc, #52]	; (800070c <LoopForever+0xe>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d8:	e002      	b.n	80006e0 <LoopCopyDataInit>

080006da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006de:	3304      	adds	r3, #4

080006e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e4:	d3f9      	bcc.n	80006da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e8:	4c0a      	ldr	r4, [pc, #40]	; (8000714 <LoopForever+0x16>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ec:	e001      	b.n	80006f2 <LoopFillZerobss>

080006ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f0:	3204      	adds	r2, #4

080006f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f4:	d3fb      	bcc.n	80006ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006f6:	f000 f97d 	bl	80009f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fa:	f7ff fdc1 	bl	8000280 <main>

080006fe <LoopForever>:

LoopForever:
  b LoopForever
 80006fe:	e7fe      	b.n	80006fe <LoopForever>
  ldr   r0, =_estack
 8000700:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800070c:	080015f0 	.word	0x080015f0
  ldr r2, =_sbss
 8000710:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000714:	200001c8 	.word	0x200001c8

08000718 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC_IRQHandler>
	...

0800071c <std>:
 800071c:	2300      	movs	r3, #0
 800071e:	b510      	push	{r4, lr}
 8000720:	4604      	mov	r4, r0
 8000722:	e9c0 3300 	strd	r3, r3, [r0]
 8000726:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800072a:	6083      	str	r3, [r0, #8]
 800072c:	8181      	strh	r1, [r0, #12]
 800072e:	6643      	str	r3, [r0, #100]	; 0x64
 8000730:	81c2      	strh	r2, [r0, #14]
 8000732:	6183      	str	r3, [r0, #24]
 8000734:	4619      	mov	r1, r3
 8000736:	2208      	movs	r2, #8
 8000738:	305c      	adds	r0, #92	; 0x5c
 800073a:	f000 f906 	bl	800094a <memset>
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <std+0x58>)
 8000740:	6263      	str	r3, [r4, #36]	; 0x24
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <std+0x5c>)
 8000744:	62a3      	str	r3, [r4, #40]	; 0x28
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <std+0x60>)
 8000748:	62e3      	str	r3, [r4, #44]	; 0x2c
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <std+0x64>)
 800074c:	6323      	str	r3, [r4, #48]	; 0x30
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <std+0x68>)
 8000750:	6224      	str	r4, [r4, #32]
 8000752:	429c      	cmp	r4, r3
 8000754:	d006      	beq.n	8000764 <std+0x48>
 8000756:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800075a:	4294      	cmp	r4, r2
 800075c:	d002      	beq.n	8000764 <std+0x48>
 800075e:	33d0      	adds	r3, #208	; 0xd0
 8000760:	429c      	cmp	r4, r3
 8000762:	d105      	bne.n	8000770 <std+0x54>
 8000764:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800076c:	f000 b966 	b.w	8000a3c <__retarget_lock_init_recursive>
 8000770:	bd10      	pop	{r4, pc}
 8000772:	bf00      	nop
 8000774:	080008c5 	.word	0x080008c5
 8000778:	080008e7 	.word	0x080008e7
 800077c:	0800091f 	.word	0x0800091f
 8000780:	08000943 	.word	0x08000943
 8000784:	2000007c 	.word	0x2000007c

08000788 <stdio_exit_handler>:
 8000788:	4a02      	ldr	r2, [pc, #8]	; (8000794 <stdio_exit_handler+0xc>)
 800078a:	4903      	ldr	r1, [pc, #12]	; (8000798 <stdio_exit_handler+0x10>)
 800078c:	4803      	ldr	r0, [pc, #12]	; (800079c <stdio_exit_handler+0x14>)
 800078e:	f000 b869 	b.w	8000864 <_fwalk_sglue>
 8000792:	bf00      	nop
 8000794:	20000000 	.word	0x20000000
 8000798:	080012e9 	.word	0x080012e9
 800079c:	2000000c 	.word	0x2000000c

080007a0 <cleanup_stdio>:
 80007a0:	6841      	ldr	r1, [r0, #4]
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <cleanup_stdio+0x34>)
 80007a4:	4299      	cmp	r1, r3
 80007a6:	b510      	push	{r4, lr}
 80007a8:	4604      	mov	r4, r0
 80007aa:	d001      	beq.n	80007b0 <cleanup_stdio+0x10>
 80007ac:	f000 fd9c 	bl	80012e8 <_fflush_r>
 80007b0:	68a1      	ldr	r1, [r4, #8]
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <cleanup_stdio+0x38>)
 80007b4:	4299      	cmp	r1, r3
 80007b6:	d002      	beq.n	80007be <cleanup_stdio+0x1e>
 80007b8:	4620      	mov	r0, r4
 80007ba:	f000 fd95 	bl	80012e8 <_fflush_r>
 80007be:	68e1      	ldr	r1, [r4, #12]
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <cleanup_stdio+0x3c>)
 80007c2:	4299      	cmp	r1, r3
 80007c4:	d004      	beq.n	80007d0 <cleanup_stdio+0x30>
 80007c6:	4620      	mov	r0, r4
 80007c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007cc:	f000 bd8c 	b.w	80012e8 <_fflush_r>
 80007d0:	bd10      	pop	{r4, pc}
 80007d2:	bf00      	nop
 80007d4:	2000007c 	.word	0x2000007c
 80007d8:	200000e4 	.word	0x200000e4
 80007dc:	2000014c 	.word	0x2000014c

080007e0 <global_stdio_init.part.0>:
 80007e0:	b510      	push	{r4, lr}
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <global_stdio_init.part.0+0x30>)
 80007e4:	4c0b      	ldr	r4, [pc, #44]	; (8000814 <global_stdio_init.part.0+0x34>)
 80007e6:	4a0c      	ldr	r2, [pc, #48]	; (8000818 <global_stdio_init.part.0+0x38>)
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	4620      	mov	r0, r4
 80007ec:	2200      	movs	r2, #0
 80007ee:	2104      	movs	r1, #4
 80007f0:	f7ff ff94 	bl	800071c <std>
 80007f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80007f8:	2201      	movs	r2, #1
 80007fa:	2109      	movs	r1, #9
 80007fc:	f7ff ff8e 	bl	800071c <std>
 8000800:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000804:	2202      	movs	r2, #2
 8000806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800080a:	2112      	movs	r1, #18
 800080c:	f7ff bf86 	b.w	800071c <std>
 8000810:	200001b4 	.word	0x200001b4
 8000814:	2000007c 	.word	0x2000007c
 8000818:	08000789 	.word	0x08000789

0800081c <__sfp_lock_acquire>:
 800081c:	4801      	ldr	r0, [pc, #4]	; (8000824 <__sfp_lock_acquire+0x8>)
 800081e:	f000 b90e 	b.w	8000a3e <__retarget_lock_acquire_recursive>
 8000822:	bf00      	nop
 8000824:	200001bd 	.word	0x200001bd

08000828 <__sfp_lock_release>:
 8000828:	4801      	ldr	r0, [pc, #4]	; (8000830 <__sfp_lock_release+0x8>)
 800082a:	f000 b909 	b.w	8000a40 <__retarget_lock_release_recursive>
 800082e:	bf00      	nop
 8000830:	200001bd 	.word	0x200001bd

08000834 <__sinit>:
 8000834:	b510      	push	{r4, lr}
 8000836:	4604      	mov	r4, r0
 8000838:	f7ff fff0 	bl	800081c <__sfp_lock_acquire>
 800083c:	6a23      	ldr	r3, [r4, #32]
 800083e:	b11b      	cbz	r3, 8000848 <__sinit+0x14>
 8000840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000844:	f7ff bff0 	b.w	8000828 <__sfp_lock_release>
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <__sinit+0x28>)
 800084a:	6223      	str	r3, [r4, #32]
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <__sinit+0x2c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d1f5      	bne.n	8000840 <__sinit+0xc>
 8000854:	f7ff ffc4 	bl	80007e0 <global_stdio_init.part.0>
 8000858:	e7f2      	b.n	8000840 <__sinit+0xc>
 800085a:	bf00      	nop
 800085c:	080007a1 	.word	0x080007a1
 8000860:	200001b4 	.word	0x200001b4

08000864 <_fwalk_sglue>:
 8000864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000868:	4607      	mov	r7, r0
 800086a:	4688      	mov	r8, r1
 800086c:	4614      	mov	r4, r2
 800086e:	2600      	movs	r6, #0
 8000870:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000874:	f1b9 0901 	subs.w	r9, r9, #1
 8000878:	d505      	bpl.n	8000886 <_fwalk_sglue+0x22>
 800087a:	6824      	ldr	r4, [r4, #0]
 800087c:	2c00      	cmp	r4, #0
 800087e:	d1f7      	bne.n	8000870 <_fwalk_sglue+0xc>
 8000880:	4630      	mov	r0, r6
 8000882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000886:	89ab      	ldrh	r3, [r5, #12]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d907      	bls.n	800089c <_fwalk_sglue+0x38>
 800088c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000890:	3301      	adds	r3, #1
 8000892:	d003      	beq.n	800089c <_fwalk_sglue+0x38>
 8000894:	4629      	mov	r1, r5
 8000896:	4638      	mov	r0, r7
 8000898:	47c0      	blx	r8
 800089a:	4306      	orrs	r6, r0
 800089c:	3568      	adds	r5, #104	; 0x68
 800089e:	e7e9      	b.n	8000874 <_fwalk_sglue+0x10>

080008a0 <iprintf>:
 80008a0:	b40f      	push	{r0, r1, r2, r3}
 80008a2:	b507      	push	{r0, r1, r2, lr}
 80008a4:	4906      	ldr	r1, [pc, #24]	; (80008c0 <iprintf+0x20>)
 80008a6:	ab04      	add	r3, sp, #16
 80008a8:	6808      	ldr	r0, [r1, #0]
 80008aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80008ae:	6881      	ldr	r1, [r0, #8]
 80008b0:	9301      	str	r3, [sp, #4]
 80008b2:	f000 f9e9 	bl	8000c88 <_vfiprintf_r>
 80008b6:	b003      	add	sp, #12
 80008b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80008bc:	b004      	add	sp, #16
 80008be:	4770      	bx	lr
 80008c0:	20000058 	.word	0x20000058

080008c4 <__sread>:
 80008c4:	b510      	push	{r4, lr}
 80008c6:	460c      	mov	r4, r1
 80008c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008cc:	f000 f868 	bl	80009a0 <_read_r>
 80008d0:	2800      	cmp	r0, #0
 80008d2:	bfab      	itete	ge
 80008d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80008d6:	89a3      	ldrhlt	r3, [r4, #12]
 80008d8:	181b      	addge	r3, r3, r0
 80008da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80008de:	bfac      	ite	ge
 80008e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80008e2:	81a3      	strhlt	r3, [r4, #12]
 80008e4:	bd10      	pop	{r4, pc}

080008e6 <__swrite>:
 80008e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008ea:	461f      	mov	r7, r3
 80008ec:	898b      	ldrh	r3, [r1, #12]
 80008ee:	05db      	lsls	r3, r3, #23
 80008f0:	4605      	mov	r5, r0
 80008f2:	460c      	mov	r4, r1
 80008f4:	4616      	mov	r6, r2
 80008f6:	d505      	bpl.n	8000904 <__swrite+0x1e>
 80008f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008fc:	2302      	movs	r3, #2
 80008fe:	2200      	movs	r2, #0
 8000900:	f000 f83c 	bl	800097c <_lseek_r>
 8000904:	89a3      	ldrh	r3, [r4, #12]
 8000906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800090a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800090e:	81a3      	strh	r3, [r4, #12]
 8000910:	4632      	mov	r2, r6
 8000912:	463b      	mov	r3, r7
 8000914:	4628      	mov	r0, r5
 8000916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800091a:	f000 b853 	b.w	80009c4 <_write_r>

0800091e <__sseek>:
 800091e:	b510      	push	{r4, lr}
 8000920:	460c      	mov	r4, r1
 8000922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000926:	f000 f829 	bl	800097c <_lseek_r>
 800092a:	1c43      	adds	r3, r0, #1
 800092c:	89a3      	ldrh	r3, [r4, #12]
 800092e:	bf15      	itete	ne
 8000930:	6560      	strne	r0, [r4, #84]	; 0x54
 8000932:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000936:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800093a:	81a3      	strheq	r3, [r4, #12]
 800093c:	bf18      	it	ne
 800093e:	81a3      	strhne	r3, [r4, #12]
 8000940:	bd10      	pop	{r4, pc}

08000942 <__sclose>:
 8000942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000946:	f000 b809 	b.w	800095c <_close_r>

0800094a <memset>:
 800094a:	4402      	add	r2, r0
 800094c:	4603      	mov	r3, r0
 800094e:	4293      	cmp	r3, r2
 8000950:	d100      	bne.n	8000954 <memset+0xa>
 8000952:	4770      	bx	lr
 8000954:	f803 1b01 	strb.w	r1, [r3], #1
 8000958:	e7f9      	b.n	800094e <memset+0x4>
	...

0800095c <_close_r>:
 800095c:	b538      	push	{r3, r4, r5, lr}
 800095e:	4d06      	ldr	r5, [pc, #24]	; (8000978 <_close_r+0x1c>)
 8000960:	2300      	movs	r3, #0
 8000962:	4604      	mov	r4, r0
 8000964:	4608      	mov	r0, r1
 8000966:	602b      	str	r3, [r5, #0]
 8000968:	f7ff fcdd 	bl	8000326 <_close>
 800096c:	1c43      	adds	r3, r0, #1
 800096e:	d102      	bne.n	8000976 <_close_r+0x1a>
 8000970:	682b      	ldr	r3, [r5, #0]
 8000972:	b103      	cbz	r3, 8000976 <_close_r+0x1a>
 8000974:	6023      	str	r3, [r4, #0]
 8000976:	bd38      	pop	{r3, r4, r5, pc}
 8000978:	200001b8 	.word	0x200001b8

0800097c <_lseek_r>:
 800097c:	b538      	push	{r3, r4, r5, lr}
 800097e:	4d07      	ldr	r5, [pc, #28]	; (800099c <_lseek_r+0x20>)
 8000980:	4604      	mov	r4, r0
 8000982:	4608      	mov	r0, r1
 8000984:	4611      	mov	r1, r2
 8000986:	2200      	movs	r2, #0
 8000988:	602a      	str	r2, [r5, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	f7ff fcf2 	bl	8000374 <_lseek>
 8000990:	1c43      	adds	r3, r0, #1
 8000992:	d102      	bne.n	800099a <_lseek_r+0x1e>
 8000994:	682b      	ldr	r3, [r5, #0]
 8000996:	b103      	cbz	r3, 800099a <_lseek_r+0x1e>
 8000998:	6023      	str	r3, [r4, #0]
 800099a:	bd38      	pop	{r3, r4, r5, pc}
 800099c:	200001b8 	.word	0x200001b8

080009a0 <_read_r>:
 80009a0:	b538      	push	{r3, r4, r5, lr}
 80009a2:	4d07      	ldr	r5, [pc, #28]	; (80009c0 <_read_r+0x20>)
 80009a4:	4604      	mov	r4, r0
 80009a6:	4608      	mov	r0, r1
 80009a8:	4611      	mov	r1, r2
 80009aa:	2200      	movs	r2, #0
 80009ac:	602a      	str	r2, [r5, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	f7ff fc80 	bl	80002b4 <_read>
 80009b4:	1c43      	adds	r3, r0, #1
 80009b6:	d102      	bne.n	80009be <_read_r+0x1e>
 80009b8:	682b      	ldr	r3, [r5, #0]
 80009ba:	b103      	cbz	r3, 80009be <_read_r+0x1e>
 80009bc:	6023      	str	r3, [r4, #0]
 80009be:	bd38      	pop	{r3, r4, r5, pc}
 80009c0:	200001b8 	.word	0x200001b8

080009c4 <_write_r>:
 80009c4:	b538      	push	{r3, r4, r5, lr}
 80009c6:	4d07      	ldr	r5, [pc, #28]	; (80009e4 <_write_r+0x20>)
 80009c8:	4604      	mov	r4, r0
 80009ca:	4608      	mov	r0, r1
 80009cc:	4611      	mov	r1, r2
 80009ce:	2200      	movs	r2, #0
 80009d0:	602a      	str	r2, [r5, #0]
 80009d2:	461a      	mov	r2, r3
 80009d4:	f7ff fc8b 	bl	80002ee <_write>
 80009d8:	1c43      	adds	r3, r0, #1
 80009da:	d102      	bne.n	80009e2 <_write_r+0x1e>
 80009dc:	682b      	ldr	r3, [r5, #0]
 80009de:	b103      	cbz	r3, 80009e2 <_write_r+0x1e>
 80009e0:	6023      	str	r3, [r4, #0]
 80009e2:	bd38      	pop	{r3, r4, r5, pc}
 80009e4:	200001b8 	.word	0x200001b8

080009e8 <__errno>:
 80009e8:	4b01      	ldr	r3, [pc, #4]	; (80009f0 <__errno+0x8>)
 80009ea:	6818      	ldr	r0, [r3, #0]
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000058 	.word	0x20000058

080009f4 <__libc_init_array>:
 80009f4:	b570      	push	{r4, r5, r6, lr}
 80009f6:	4d0d      	ldr	r5, [pc, #52]	; (8000a2c <__libc_init_array+0x38>)
 80009f8:	4c0d      	ldr	r4, [pc, #52]	; (8000a30 <__libc_init_array+0x3c>)
 80009fa:	1b64      	subs	r4, r4, r5
 80009fc:	10a4      	asrs	r4, r4, #2
 80009fe:	2600      	movs	r6, #0
 8000a00:	42a6      	cmp	r6, r4
 8000a02:	d109      	bne.n	8000a18 <__libc_init_array+0x24>
 8000a04:	4d0b      	ldr	r5, [pc, #44]	; (8000a34 <__libc_init_array+0x40>)
 8000a06:	4c0c      	ldr	r4, [pc, #48]	; (8000a38 <__libc_init_array+0x44>)
 8000a08:	f000 fdc0 	bl	800158c <_init>
 8000a0c:	1b64      	subs	r4, r4, r5
 8000a0e:	10a4      	asrs	r4, r4, #2
 8000a10:	2600      	movs	r6, #0
 8000a12:	42a6      	cmp	r6, r4
 8000a14:	d105      	bne.n	8000a22 <__libc_init_array+0x2e>
 8000a16:	bd70      	pop	{r4, r5, r6, pc}
 8000a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a1c:	4798      	blx	r3
 8000a1e:	3601      	adds	r6, #1
 8000a20:	e7ee      	b.n	8000a00 <__libc_init_array+0xc>
 8000a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a26:	4798      	blx	r3
 8000a28:	3601      	adds	r6, #1
 8000a2a:	e7f2      	b.n	8000a12 <__libc_init_array+0x1e>
 8000a2c:	080015e8 	.word	0x080015e8
 8000a30:	080015e8 	.word	0x080015e8
 8000a34:	080015e8 	.word	0x080015e8
 8000a38:	080015ec 	.word	0x080015ec

08000a3c <__retarget_lock_init_recursive>:
 8000a3c:	4770      	bx	lr

08000a3e <__retarget_lock_acquire_recursive>:
 8000a3e:	4770      	bx	lr

08000a40 <__retarget_lock_release_recursive>:
 8000a40:	4770      	bx	lr
	...

08000a44 <_free_r>:
 8000a44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000a46:	2900      	cmp	r1, #0
 8000a48:	d044      	beq.n	8000ad4 <_free_r+0x90>
 8000a4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a4e:	9001      	str	r0, [sp, #4]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	f1a1 0404 	sub.w	r4, r1, #4
 8000a56:	bfb8      	it	lt
 8000a58:	18e4      	addlt	r4, r4, r3
 8000a5a:	f000 f8df 	bl	8000c1c <__malloc_lock>
 8000a5e:	4a1e      	ldr	r2, [pc, #120]	; (8000ad8 <_free_r+0x94>)
 8000a60:	9801      	ldr	r0, [sp, #4]
 8000a62:	6813      	ldr	r3, [r2, #0]
 8000a64:	b933      	cbnz	r3, 8000a74 <_free_r+0x30>
 8000a66:	6063      	str	r3, [r4, #4]
 8000a68:	6014      	str	r4, [r2, #0]
 8000a6a:	b003      	add	sp, #12
 8000a6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000a70:	f000 b8da 	b.w	8000c28 <__malloc_unlock>
 8000a74:	42a3      	cmp	r3, r4
 8000a76:	d908      	bls.n	8000a8a <_free_r+0x46>
 8000a78:	6825      	ldr	r5, [r4, #0]
 8000a7a:	1961      	adds	r1, r4, r5
 8000a7c:	428b      	cmp	r3, r1
 8000a7e:	bf01      	itttt	eq
 8000a80:	6819      	ldreq	r1, [r3, #0]
 8000a82:	685b      	ldreq	r3, [r3, #4]
 8000a84:	1949      	addeq	r1, r1, r5
 8000a86:	6021      	streq	r1, [r4, #0]
 8000a88:	e7ed      	b.n	8000a66 <_free_r+0x22>
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	b10b      	cbz	r3, 8000a94 <_free_r+0x50>
 8000a90:	42a3      	cmp	r3, r4
 8000a92:	d9fa      	bls.n	8000a8a <_free_r+0x46>
 8000a94:	6811      	ldr	r1, [r2, #0]
 8000a96:	1855      	adds	r5, r2, r1
 8000a98:	42a5      	cmp	r5, r4
 8000a9a:	d10b      	bne.n	8000ab4 <_free_r+0x70>
 8000a9c:	6824      	ldr	r4, [r4, #0]
 8000a9e:	4421      	add	r1, r4
 8000aa0:	1854      	adds	r4, r2, r1
 8000aa2:	42a3      	cmp	r3, r4
 8000aa4:	6011      	str	r1, [r2, #0]
 8000aa6:	d1e0      	bne.n	8000a6a <_free_r+0x26>
 8000aa8:	681c      	ldr	r4, [r3, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	6053      	str	r3, [r2, #4]
 8000aae:	440c      	add	r4, r1
 8000ab0:	6014      	str	r4, [r2, #0]
 8000ab2:	e7da      	b.n	8000a6a <_free_r+0x26>
 8000ab4:	d902      	bls.n	8000abc <_free_r+0x78>
 8000ab6:	230c      	movs	r3, #12
 8000ab8:	6003      	str	r3, [r0, #0]
 8000aba:	e7d6      	b.n	8000a6a <_free_r+0x26>
 8000abc:	6825      	ldr	r5, [r4, #0]
 8000abe:	1961      	adds	r1, r4, r5
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	bf04      	itt	eq
 8000ac4:	6819      	ldreq	r1, [r3, #0]
 8000ac6:	685b      	ldreq	r3, [r3, #4]
 8000ac8:	6063      	str	r3, [r4, #4]
 8000aca:	bf04      	itt	eq
 8000acc:	1949      	addeq	r1, r1, r5
 8000ace:	6021      	streq	r1, [r4, #0]
 8000ad0:	6054      	str	r4, [r2, #4]
 8000ad2:	e7ca      	b.n	8000a6a <_free_r+0x26>
 8000ad4:	b003      	add	sp, #12
 8000ad6:	bd30      	pop	{r4, r5, pc}
 8000ad8:	200001c0 	.word	0x200001c0

08000adc <sbrk_aligned>:
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	4e0e      	ldr	r6, [pc, #56]	; (8000b18 <sbrk_aligned+0x3c>)
 8000ae0:	460c      	mov	r4, r1
 8000ae2:	6831      	ldr	r1, [r6, #0]
 8000ae4:	4605      	mov	r5, r0
 8000ae6:	b911      	cbnz	r1, 8000aee <sbrk_aligned+0x12>
 8000ae8:	f000 fcbc 	bl	8001464 <_sbrk_r>
 8000aec:	6030      	str	r0, [r6, #0]
 8000aee:	4621      	mov	r1, r4
 8000af0:	4628      	mov	r0, r5
 8000af2:	f000 fcb7 	bl	8001464 <_sbrk_r>
 8000af6:	1c43      	adds	r3, r0, #1
 8000af8:	d00a      	beq.n	8000b10 <sbrk_aligned+0x34>
 8000afa:	1cc4      	adds	r4, r0, #3
 8000afc:	f024 0403 	bic.w	r4, r4, #3
 8000b00:	42a0      	cmp	r0, r4
 8000b02:	d007      	beq.n	8000b14 <sbrk_aligned+0x38>
 8000b04:	1a21      	subs	r1, r4, r0
 8000b06:	4628      	mov	r0, r5
 8000b08:	f000 fcac 	bl	8001464 <_sbrk_r>
 8000b0c:	3001      	adds	r0, #1
 8000b0e:	d101      	bne.n	8000b14 <sbrk_aligned+0x38>
 8000b10:	f04f 34ff 	mov.w	r4, #4294967295
 8000b14:	4620      	mov	r0, r4
 8000b16:	bd70      	pop	{r4, r5, r6, pc}
 8000b18:	200001c4 	.word	0x200001c4

08000b1c <_malloc_r>:
 8000b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b20:	1ccd      	adds	r5, r1, #3
 8000b22:	f025 0503 	bic.w	r5, r5, #3
 8000b26:	3508      	adds	r5, #8
 8000b28:	2d0c      	cmp	r5, #12
 8000b2a:	bf38      	it	cc
 8000b2c:	250c      	movcc	r5, #12
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	4607      	mov	r7, r0
 8000b32:	db01      	blt.n	8000b38 <_malloc_r+0x1c>
 8000b34:	42a9      	cmp	r1, r5
 8000b36:	d905      	bls.n	8000b44 <_malloc_r+0x28>
 8000b38:	230c      	movs	r3, #12
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	2600      	movs	r6, #0
 8000b3e:	4630      	mov	r0, r6
 8000b40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000c18 <_malloc_r+0xfc>
 8000b48:	f000 f868 	bl	8000c1c <__malloc_lock>
 8000b4c:	f8d8 3000 	ldr.w	r3, [r8]
 8000b50:	461c      	mov	r4, r3
 8000b52:	bb5c      	cbnz	r4, 8000bac <_malloc_r+0x90>
 8000b54:	4629      	mov	r1, r5
 8000b56:	4638      	mov	r0, r7
 8000b58:	f7ff ffc0 	bl	8000adc <sbrk_aligned>
 8000b5c:	1c43      	adds	r3, r0, #1
 8000b5e:	4604      	mov	r4, r0
 8000b60:	d155      	bne.n	8000c0e <_malloc_r+0xf2>
 8000b62:	f8d8 4000 	ldr.w	r4, [r8]
 8000b66:	4626      	mov	r6, r4
 8000b68:	2e00      	cmp	r6, #0
 8000b6a:	d145      	bne.n	8000bf8 <_malloc_r+0xdc>
 8000b6c:	2c00      	cmp	r4, #0
 8000b6e:	d048      	beq.n	8000c02 <_malloc_r+0xe6>
 8000b70:	6823      	ldr	r3, [r4, #0]
 8000b72:	4631      	mov	r1, r6
 8000b74:	4638      	mov	r0, r7
 8000b76:	eb04 0903 	add.w	r9, r4, r3
 8000b7a:	f000 fc73 	bl	8001464 <_sbrk_r>
 8000b7e:	4581      	cmp	r9, r0
 8000b80:	d13f      	bne.n	8000c02 <_malloc_r+0xe6>
 8000b82:	6821      	ldr	r1, [r4, #0]
 8000b84:	1a6d      	subs	r5, r5, r1
 8000b86:	4629      	mov	r1, r5
 8000b88:	4638      	mov	r0, r7
 8000b8a:	f7ff ffa7 	bl	8000adc <sbrk_aligned>
 8000b8e:	3001      	adds	r0, #1
 8000b90:	d037      	beq.n	8000c02 <_malloc_r+0xe6>
 8000b92:	6823      	ldr	r3, [r4, #0]
 8000b94:	442b      	add	r3, r5
 8000b96:	6023      	str	r3, [r4, #0]
 8000b98:	f8d8 3000 	ldr.w	r3, [r8]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d038      	beq.n	8000c12 <_malloc_r+0xf6>
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	42a2      	cmp	r2, r4
 8000ba4:	d12b      	bne.n	8000bfe <_malloc_r+0xe2>
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	e00f      	b.n	8000bcc <_malloc_r+0xb0>
 8000bac:	6822      	ldr	r2, [r4, #0]
 8000bae:	1b52      	subs	r2, r2, r5
 8000bb0:	d41f      	bmi.n	8000bf2 <_malloc_r+0xd6>
 8000bb2:	2a0b      	cmp	r2, #11
 8000bb4:	d917      	bls.n	8000be6 <_malloc_r+0xca>
 8000bb6:	1961      	adds	r1, r4, r5
 8000bb8:	42a3      	cmp	r3, r4
 8000bba:	6025      	str	r5, [r4, #0]
 8000bbc:	bf18      	it	ne
 8000bbe:	6059      	strne	r1, [r3, #4]
 8000bc0:	6863      	ldr	r3, [r4, #4]
 8000bc2:	bf08      	it	eq
 8000bc4:	f8c8 1000 	streq.w	r1, [r8]
 8000bc8:	5162      	str	r2, [r4, r5]
 8000bca:	604b      	str	r3, [r1, #4]
 8000bcc:	4638      	mov	r0, r7
 8000bce:	f104 060b 	add.w	r6, r4, #11
 8000bd2:	f000 f829 	bl	8000c28 <__malloc_unlock>
 8000bd6:	f026 0607 	bic.w	r6, r6, #7
 8000bda:	1d23      	adds	r3, r4, #4
 8000bdc:	1af2      	subs	r2, r6, r3
 8000bde:	d0ae      	beq.n	8000b3e <_malloc_r+0x22>
 8000be0:	1b9b      	subs	r3, r3, r6
 8000be2:	50a3      	str	r3, [r4, r2]
 8000be4:	e7ab      	b.n	8000b3e <_malloc_r+0x22>
 8000be6:	42a3      	cmp	r3, r4
 8000be8:	6862      	ldr	r2, [r4, #4]
 8000bea:	d1dd      	bne.n	8000ba8 <_malloc_r+0x8c>
 8000bec:	f8c8 2000 	str.w	r2, [r8]
 8000bf0:	e7ec      	b.n	8000bcc <_malloc_r+0xb0>
 8000bf2:	4623      	mov	r3, r4
 8000bf4:	6864      	ldr	r4, [r4, #4]
 8000bf6:	e7ac      	b.n	8000b52 <_malloc_r+0x36>
 8000bf8:	4634      	mov	r4, r6
 8000bfa:	6876      	ldr	r6, [r6, #4]
 8000bfc:	e7b4      	b.n	8000b68 <_malloc_r+0x4c>
 8000bfe:	4613      	mov	r3, r2
 8000c00:	e7cc      	b.n	8000b9c <_malloc_r+0x80>
 8000c02:	230c      	movs	r3, #12
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	4638      	mov	r0, r7
 8000c08:	f000 f80e 	bl	8000c28 <__malloc_unlock>
 8000c0c:	e797      	b.n	8000b3e <_malloc_r+0x22>
 8000c0e:	6025      	str	r5, [r4, #0]
 8000c10:	e7dc      	b.n	8000bcc <_malloc_r+0xb0>
 8000c12:	605b      	str	r3, [r3, #4]
 8000c14:	deff      	udf	#255	; 0xff
 8000c16:	bf00      	nop
 8000c18:	200001c0 	.word	0x200001c0

08000c1c <__malloc_lock>:
 8000c1c:	4801      	ldr	r0, [pc, #4]	; (8000c24 <__malloc_lock+0x8>)
 8000c1e:	f7ff bf0e 	b.w	8000a3e <__retarget_lock_acquire_recursive>
 8000c22:	bf00      	nop
 8000c24:	200001bc 	.word	0x200001bc

08000c28 <__malloc_unlock>:
 8000c28:	4801      	ldr	r0, [pc, #4]	; (8000c30 <__malloc_unlock+0x8>)
 8000c2a:	f7ff bf09 	b.w	8000a40 <__retarget_lock_release_recursive>
 8000c2e:	bf00      	nop
 8000c30:	200001bc 	.word	0x200001bc

08000c34 <__sfputc_r>:
 8000c34:	6893      	ldr	r3, [r2, #8]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	b410      	push	{r4}
 8000c3c:	6093      	str	r3, [r2, #8]
 8000c3e:	da08      	bge.n	8000c52 <__sfputc_r+0x1e>
 8000c40:	6994      	ldr	r4, [r2, #24]
 8000c42:	42a3      	cmp	r3, r4
 8000c44:	db01      	blt.n	8000c4a <__sfputc_r+0x16>
 8000c46:	290a      	cmp	r1, #10
 8000c48:	d103      	bne.n	8000c52 <__sfputc_r+0x1e>
 8000c4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c4e:	f000 bb73 	b.w	8001338 <__swbuf_r>
 8000c52:	6813      	ldr	r3, [r2, #0]
 8000c54:	1c58      	adds	r0, r3, #1
 8000c56:	6010      	str	r0, [r2, #0]
 8000c58:	7019      	strb	r1, [r3, #0]
 8000c5a:	4608      	mov	r0, r1
 8000c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <__sfputs_r>:
 8000c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c64:	4606      	mov	r6, r0
 8000c66:	460f      	mov	r7, r1
 8000c68:	4614      	mov	r4, r2
 8000c6a:	18d5      	adds	r5, r2, r3
 8000c6c:	42ac      	cmp	r4, r5
 8000c6e:	d101      	bne.n	8000c74 <__sfputs_r+0x12>
 8000c70:	2000      	movs	r0, #0
 8000c72:	e007      	b.n	8000c84 <__sfputs_r+0x22>
 8000c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c78:	463a      	mov	r2, r7
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	f7ff ffda 	bl	8000c34 <__sfputc_r>
 8000c80:	1c43      	adds	r3, r0, #1
 8000c82:	d1f3      	bne.n	8000c6c <__sfputs_r+0xa>
 8000c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c88 <_vfiprintf_r>:
 8000c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c8c:	460d      	mov	r5, r1
 8000c8e:	b09d      	sub	sp, #116	; 0x74
 8000c90:	4614      	mov	r4, r2
 8000c92:	4698      	mov	r8, r3
 8000c94:	4606      	mov	r6, r0
 8000c96:	b118      	cbz	r0, 8000ca0 <_vfiprintf_r+0x18>
 8000c98:	6a03      	ldr	r3, [r0, #32]
 8000c9a:	b90b      	cbnz	r3, 8000ca0 <_vfiprintf_r+0x18>
 8000c9c:	f7ff fdca 	bl	8000834 <__sinit>
 8000ca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ca2:	07d9      	lsls	r1, r3, #31
 8000ca4:	d405      	bmi.n	8000cb2 <_vfiprintf_r+0x2a>
 8000ca6:	89ab      	ldrh	r3, [r5, #12]
 8000ca8:	059a      	lsls	r2, r3, #22
 8000caa:	d402      	bmi.n	8000cb2 <_vfiprintf_r+0x2a>
 8000cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000cae:	f7ff fec6 	bl	8000a3e <__retarget_lock_acquire_recursive>
 8000cb2:	89ab      	ldrh	r3, [r5, #12]
 8000cb4:	071b      	lsls	r3, r3, #28
 8000cb6:	d501      	bpl.n	8000cbc <_vfiprintf_r+0x34>
 8000cb8:	692b      	ldr	r3, [r5, #16]
 8000cba:	b99b      	cbnz	r3, 8000ce4 <_vfiprintf_r+0x5c>
 8000cbc:	4629      	mov	r1, r5
 8000cbe:	4630      	mov	r0, r6
 8000cc0:	f000 fb78 	bl	80013b4 <__swsetup_r>
 8000cc4:	b170      	cbz	r0, 8000ce4 <_vfiprintf_r+0x5c>
 8000cc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000cc8:	07dc      	lsls	r4, r3, #31
 8000cca:	d504      	bpl.n	8000cd6 <_vfiprintf_r+0x4e>
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	b01d      	add	sp, #116	; 0x74
 8000cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cd6:	89ab      	ldrh	r3, [r5, #12]
 8000cd8:	0598      	lsls	r0, r3, #22
 8000cda:	d4f7      	bmi.n	8000ccc <_vfiprintf_r+0x44>
 8000cdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000cde:	f7ff feaf 	bl	8000a40 <__retarget_lock_release_recursive>
 8000ce2:	e7f3      	b.n	8000ccc <_vfiprintf_r+0x44>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8000ce8:	2320      	movs	r3, #32
 8000cea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000cee:	f8cd 800c 	str.w	r8, [sp, #12]
 8000cf2:	2330      	movs	r3, #48	; 0x30
 8000cf4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000ea8 <_vfiprintf_r+0x220>
 8000cf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000cfc:	f04f 0901 	mov.w	r9, #1
 8000d00:	4623      	mov	r3, r4
 8000d02:	469a      	mov	sl, r3
 8000d04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d08:	b10a      	cbz	r2, 8000d0e <_vfiprintf_r+0x86>
 8000d0a:	2a25      	cmp	r2, #37	; 0x25
 8000d0c:	d1f9      	bne.n	8000d02 <_vfiprintf_r+0x7a>
 8000d0e:	ebba 0b04 	subs.w	fp, sl, r4
 8000d12:	d00b      	beq.n	8000d2c <_vfiprintf_r+0xa4>
 8000d14:	465b      	mov	r3, fp
 8000d16:	4622      	mov	r2, r4
 8000d18:	4629      	mov	r1, r5
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	f7ff ffa1 	bl	8000c62 <__sfputs_r>
 8000d20:	3001      	adds	r0, #1
 8000d22:	f000 80a9 	beq.w	8000e78 <_vfiprintf_r+0x1f0>
 8000d26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000d28:	445a      	add	r2, fp
 8000d2a:	9209      	str	r2, [sp, #36]	; 0x24
 8000d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	f000 80a1 	beq.w	8000e78 <_vfiprintf_r+0x1f0>
 8000d36:	2300      	movs	r3, #0
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d40:	f10a 0a01 	add.w	sl, sl, #1
 8000d44:	9304      	str	r3, [sp, #16]
 8000d46:	9307      	str	r3, [sp, #28]
 8000d48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000d4c:	931a      	str	r3, [sp, #104]	; 0x68
 8000d4e:	4654      	mov	r4, sl
 8000d50:	2205      	movs	r2, #5
 8000d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d56:	4854      	ldr	r0, [pc, #336]	; (8000ea8 <_vfiprintf_r+0x220>)
 8000d58:	f7ff fa42 	bl	80001e0 <memchr>
 8000d5c:	9a04      	ldr	r2, [sp, #16]
 8000d5e:	b9d8      	cbnz	r0, 8000d98 <_vfiprintf_r+0x110>
 8000d60:	06d1      	lsls	r1, r2, #27
 8000d62:	bf44      	itt	mi
 8000d64:	2320      	movmi	r3, #32
 8000d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d6a:	0713      	lsls	r3, r2, #28
 8000d6c:	bf44      	itt	mi
 8000d6e:	232b      	movmi	r3, #43	; 0x2b
 8000d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d74:	f89a 3000 	ldrb.w	r3, [sl]
 8000d78:	2b2a      	cmp	r3, #42	; 0x2a
 8000d7a:	d015      	beq.n	8000da8 <_vfiprintf_r+0x120>
 8000d7c:	9a07      	ldr	r2, [sp, #28]
 8000d7e:	4654      	mov	r4, sl
 8000d80:	2000      	movs	r0, #0
 8000d82:	f04f 0c0a 	mov.w	ip, #10
 8000d86:	4621      	mov	r1, r4
 8000d88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d8c:	3b30      	subs	r3, #48	; 0x30
 8000d8e:	2b09      	cmp	r3, #9
 8000d90:	d94d      	bls.n	8000e2e <_vfiprintf_r+0x1a6>
 8000d92:	b1b0      	cbz	r0, 8000dc2 <_vfiprintf_r+0x13a>
 8000d94:	9207      	str	r2, [sp, #28]
 8000d96:	e014      	b.n	8000dc2 <_vfiprintf_r+0x13a>
 8000d98:	eba0 0308 	sub.w	r3, r0, r8
 8000d9c:	fa09 f303 	lsl.w	r3, r9, r3
 8000da0:	4313      	orrs	r3, r2
 8000da2:	9304      	str	r3, [sp, #16]
 8000da4:	46a2      	mov	sl, r4
 8000da6:	e7d2      	b.n	8000d4e <_vfiprintf_r+0xc6>
 8000da8:	9b03      	ldr	r3, [sp, #12]
 8000daa:	1d19      	adds	r1, r3, #4
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	9103      	str	r1, [sp, #12]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	bfbb      	ittet	lt
 8000db4:	425b      	neglt	r3, r3
 8000db6:	f042 0202 	orrlt.w	r2, r2, #2
 8000dba:	9307      	strge	r3, [sp, #28]
 8000dbc:	9307      	strlt	r3, [sp, #28]
 8000dbe:	bfb8      	it	lt
 8000dc0:	9204      	strlt	r2, [sp, #16]
 8000dc2:	7823      	ldrb	r3, [r4, #0]
 8000dc4:	2b2e      	cmp	r3, #46	; 0x2e
 8000dc6:	d10c      	bne.n	8000de2 <_vfiprintf_r+0x15a>
 8000dc8:	7863      	ldrb	r3, [r4, #1]
 8000dca:	2b2a      	cmp	r3, #42	; 0x2a
 8000dcc:	d134      	bne.n	8000e38 <_vfiprintf_r+0x1b0>
 8000dce:	9b03      	ldr	r3, [sp, #12]
 8000dd0:	1d1a      	adds	r2, r3, #4
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	9203      	str	r2, [sp, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	bfb8      	it	lt
 8000dda:	f04f 33ff 	movlt.w	r3, #4294967295
 8000dde:	3402      	adds	r4, #2
 8000de0:	9305      	str	r3, [sp, #20]
 8000de2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000eb8 <_vfiprintf_r+0x230>
 8000de6:	7821      	ldrb	r1, [r4, #0]
 8000de8:	2203      	movs	r2, #3
 8000dea:	4650      	mov	r0, sl
 8000dec:	f7ff f9f8 	bl	80001e0 <memchr>
 8000df0:	b138      	cbz	r0, 8000e02 <_vfiprintf_r+0x17a>
 8000df2:	9b04      	ldr	r3, [sp, #16]
 8000df4:	eba0 000a 	sub.w	r0, r0, sl
 8000df8:	2240      	movs	r2, #64	; 0x40
 8000dfa:	4082      	lsls	r2, r0
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	3401      	adds	r4, #1
 8000e00:	9304      	str	r3, [sp, #16]
 8000e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e06:	4829      	ldr	r0, [pc, #164]	; (8000eac <_vfiprintf_r+0x224>)
 8000e08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000e0c:	2206      	movs	r2, #6
 8000e0e:	f7ff f9e7 	bl	80001e0 <memchr>
 8000e12:	2800      	cmp	r0, #0
 8000e14:	d03f      	beq.n	8000e96 <_vfiprintf_r+0x20e>
 8000e16:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <_vfiprintf_r+0x228>)
 8000e18:	bb1b      	cbnz	r3, 8000e62 <_vfiprintf_r+0x1da>
 8000e1a:	9b03      	ldr	r3, [sp, #12]
 8000e1c:	3307      	adds	r3, #7
 8000e1e:	f023 0307 	bic.w	r3, r3, #7
 8000e22:	3308      	adds	r3, #8
 8000e24:	9303      	str	r3, [sp, #12]
 8000e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e28:	443b      	add	r3, r7
 8000e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8000e2c:	e768      	b.n	8000d00 <_vfiprintf_r+0x78>
 8000e2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e32:	460c      	mov	r4, r1
 8000e34:	2001      	movs	r0, #1
 8000e36:	e7a6      	b.n	8000d86 <_vfiprintf_r+0xfe>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	3401      	adds	r4, #1
 8000e3c:	9305      	str	r3, [sp, #20]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f04f 0c0a 	mov.w	ip, #10
 8000e44:	4620      	mov	r0, r4
 8000e46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e4a:	3a30      	subs	r2, #48	; 0x30
 8000e4c:	2a09      	cmp	r2, #9
 8000e4e:	d903      	bls.n	8000e58 <_vfiprintf_r+0x1d0>
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d0c6      	beq.n	8000de2 <_vfiprintf_r+0x15a>
 8000e54:	9105      	str	r1, [sp, #20]
 8000e56:	e7c4      	b.n	8000de2 <_vfiprintf_r+0x15a>
 8000e58:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e5c:	4604      	mov	r4, r0
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e7f0      	b.n	8000e44 <_vfiprintf_r+0x1bc>
 8000e62:	ab03      	add	r3, sp, #12
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	462a      	mov	r2, r5
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <_vfiprintf_r+0x22c>)
 8000e6a:	a904      	add	r1, sp, #16
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	f3af 8000 	nop.w
 8000e72:	4607      	mov	r7, r0
 8000e74:	1c78      	adds	r0, r7, #1
 8000e76:	d1d6      	bne.n	8000e26 <_vfiprintf_r+0x19e>
 8000e78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e7a:	07d9      	lsls	r1, r3, #31
 8000e7c:	d405      	bmi.n	8000e8a <_vfiprintf_r+0x202>
 8000e7e:	89ab      	ldrh	r3, [r5, #12]
 8000e80:	059a      	lsls	r2, r3, #22
 8000e82:	d402      	bmi.n	8000e8a <_vfiprintf_r+0x202>
 8000e84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e86:	f7ff fddb 	bl	8000a40 <__retarget_lock_release_recursive>
 8000e8a:	89ab      	ldrh	r3, [r5, #12]
 8000e8c:	065b      	lsls	r3, r3, #25
 8000e8e:	f53f af1d 	bmi.w	8000ccc <_vfiprintf_r+0x44>
 8000e92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000e94:	e71c      	b.n	8000cd0 <_vfiprintf_r+0x48>
 8000e96:	ab03      	add	r3, sp, #12
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	462a      	mov	r2, r5
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <_vfiprintf_r+0x22c>)
 8000e9e:	a904      	add	r1, sp, #16
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	f000 f879 	bl	8000f98 <_printf_i>
 8000ea6:	e7e4      	b.n	8000e72 <_vfiprintf_r+0x1ea>
 8000ea8:	080015b2 	.word	0x080015b2
 8000eac:	080015bc 	.word	0x080015bc
 8000eb0:	00000000 	.word	0x00000000
 8000eb4:	08000c63 	.word	0x08000c63
 8000eb8:	080015b8 	.word	0x080015b8

08000ebc <_printf_common>:
 8000ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ec0:	4616      	mov	r6, r2
 8000ec2:	4699      	mov	r9, r3
 8000ec4:	688a      	ldr	r2, [r1, #8]
 8000ec6:	690b      	ldr	r3, [r1, #16]
 8000ec8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	bfb8      	it	lt
 8000ed0:	4613      	movlt	r3, r2
 8000ed2:	6033      	str	r3, [r6, #0]
 8000ed4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000ed8:	4607      	mov	r7, r0
 8000eda:	460c      	mov	r4, r1
 8000edc:	b10a      	cbz	r2, 8000ee2 <_printf_common+0x26>
 8000ede:	3301      	adds	r3, #1
 8000ee0:	6033      	str	r3, [r6, #0]
 8000ee2:	6823      	ldr	r3, [r4, #0]
 8000ee4:	0699      	lsls	r1, r3, #26
 8000ee6:	bf42      	ittt	mi
 8000ee8:	6833      	ldrmi	r3, [r6, #0]
 8000eea:	3302      	addmi	r3, #2
 8000eec:	6033      	strmi	r3, [r6, #0]
 8000eee:	6825      	ldr	r5, [r4, #0]
 8000ef0:	f015 0506 	ands.w	r5, r5, #6
 8000ef4:	d106      	bne.n	8000f04 <_printf_common+0x48>
 8000ef6:	f104 0a19 	add.w	sl, r4, #25
 8000efa:	68e3      	ldr	r3, [r4, #12]
 8000efc:	6832      	ldr	r2, [r6, #0]
 8000efe:	1a9b      	subs	r3, r3, r2
 8000f00:	42ab      	cmp	r3, r5
 8000f02:	dc26      	bgt.n	8000f52 <_printf_common+0x96>
 8000f04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000f08:	1e13      	subs	r3, r2, #0
 8000f0a:	6822      	ldr	r2, [r4, #0]
 8000f0c:	bf18      	it	ne
 8000f0e:	2301      	movne	r3, #1
 8000f10:	0692      	lsls	r2, r2, #26
 8000f12:	d42b      	bmi.n	8000f6c <_printf_common+0xb0>
 8000f14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000f18:	4649      	mov	r1, r9
 8000f1a:	4638      	mov	r0, r7
 8000f1c:	47c0      	blx	r8
 8000f1e:	3001      	adds	r0, #1
 8000f20:	d01e      	beq.n	8000f60 <_printf_common+0xa4>
 8000f22:	6823      	ldr	r3, [r4, #0]
 8000f24:	6922      	ldr	r2, [r4, #16]
 8000f26:	f003 0306 	and.w	r3, r3, #6
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf02      	ittt	eq
 8000f2e:	68e5      	ldreq	r5, [r4, #12]
 8000f30:	6833      	ldreq	r3, [r6, #0]
 8000f32:	1aed      	subeq	r5, r5, r3
 8000f34:	68a3      	ldr	r3, [r4, #8]
 8000f36:	bf0c      	ite	eq
 8000f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f3c:	2500      	movne	r5, #0
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	bfc4      	itt	gt
 8000f42:	1a9b      	subgt	r3, r3, r2
 8000f44:	18ed      	addgt	r5, r5, r3
 8000f46:	2600      	movs	r6, #0
 8000f48:	341a      	adds	r4, #26
 8000f4a:	42b5      	cmp	r5, r6
 8000f4c:	d11a      	bne.n	8000f84 <_printf_common+0xc8>
 8000f4e:	2000      	movs	r0, #0
 8000f50:	e008      	b.n	8000f64 <_printf_common+0xa8>
 8000f52:	2301      	movs	r3, #1
 8000f54:	4652      	mov	r2, sl
 8000f56:	4649      	mov	r1, r9
 8000f58:	4638      	mov	r0, r7
 8000f5a:	47c0      	blx	r8
 8000f5c:	3001      	adds	r0, #1
 8000f5e:	d103      	bne.n	8000f68 <_printf_common+0xac>
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f68:	3501      	adds	r5, #1
 8000f6a:	e7c6      	b.n	8000efa <_printf_common+0x3e>
 8000f6c:	18e1      	adds	r1, r4, r3
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	2030      	movs	r0, #48	; 0x30
 8000f72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000f76:	4422      	add	r2, r4
 8000f78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000f7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000f80:	3302      	adds	r3, #2
 8000f82:	e7c7      	b.n	8000f14 <_printf_common+0x58>
 8000f84:	2301      	movs	r3, #1
 8000f86:	4622      	mov	r2, r4
 8000f88:	4649      	mov	r1, r9
 8000f8a:	4638      	mov	r0, r7
 8000f8c:	47c0      	blx	r8
 8000f8e:	3001      	adds	r0, #1
 8000f90:	d0e6      	beq.n	8000f60 <_printf_common+0xa4>
 8000f92:	3601      	adds	r6, #1
 8000f94:	e7d9      	b.n	8000f4a <_printf_common+0x8e>
	...

08000f98 <_printf_i>:
 8000f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f9c:	7e0f      	ldrb	r7, [r1, #24]
 8000f9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000fa0:	2f78      	cmp	r7, #120	; 0x78
 8000fa2:	4691      	mov	r9, r2
 8000fa4:	4680      	mov	r8, r0
 8000fa6:	460c      	mov	r4, r1
 8000fa8:	469a      	mov	sl, r3
 8000faa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000fae:	d807      	bhi.n	8000fc0 <_printf_i+0x28>
 8000fb0:	2f62      	cmp	r7, #98	; 0x62
 8000fb2:	d80a      	bhi.n	8000fca <_printf_i+0x32>
 8000fb4:	2f00      	cmp	r7, #0
 8000fb6:	f000 80d4 	beq.w	8001162 <_printf_i+0x1ca>
 8000fba:	2f58      	cmp	r7, #88	; 0x58
 8000fbc:	f000 80c0 	beq.w	8001140 <_printf_i+0x1a8>
 8000fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000fc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000fc8:	e03a      	b.n	8001040 <_printf_i+0xa8>
 8000fca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000fce:	2b15      	cmp	r3, #21
 8000fd0:	d8f6      	bhi.n	8000fc0 <_printf_i+0x28>
 8000fd2:	a101      	add	r1, pc, #4	; (adr r1, 8000fd8 <_printf_i+0x40>)
 8000fd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000fd8:	08001031 	.word	0x08001031
 8000fdc:	08001045 	.word	0x08001045
 8000fe0:	08000fc1 	.word	0x08000fc1
 8000fe4:	08000fc1 	.word	0x08000fc1
 8000fe8:	08000fc1 	.word	0x08000fc1
 8000fec:	08000fc1 	.word	0x08000fc1
 8000ff0:	08001045 	.word	0x08001045
 8000ff4:	08000fc1 	.word	0x08000fc1
 8000ff8:	08000fc1 	.word	0x08000fc1
 8000ffc:	08000fc1 	.word	0x08000fc1
 8001000:	08000fc1 	.word	0x08000fc1
 8001004:	08001149 	.word	0x08001149
 8001008:	08001071 	.word	0x08001071
 800100c:	08001103 	.word	0x08001103
 8001010:	08000fc1 	.word	0x08000fc1
 8001014:	08000fc1 	.word	0x08000fc1
 8001018:	0800116b 	.word	0x0800116b
 800101c:	08000fc1 	.word	0x08000fc1
 8001020:	08001071 	.word	0x08001071
 8001024:	08000fc1 	.word	0x08000fc1
 8001028:	08000fc1 	.word	0x08000fc1
 800102c:	0800110b 	.word	0x0800110b
 8001030:	682b      	ldr	r3, [r5, #0]
 8001032:	1d1a      	adds	r2, r3, #4
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	602a      	str	r2, [r5, #0]
 8001038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800103c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001040:	2301      	movs	r3, #1
 8001042:	e09f      	b.n	8001184 <_printf_i+0x1ec>
 8001044:	6820      	ldr	r0, [r4, #0]
 8001046:	682b      	ldr	r3, [r5, #0]
 8001048:	0607      	lsls	r7, r0, #24
 800104a:	f103 0104 	add.w	r1, r3, #4
 800104e:	6029      	str	r1, [r5, #0]
 8001050:	d501      	bpl.n	8001056 <_printf_i+0xbe>
 8001052:	681e      	ldr	r6, [r3, #0]
 8001054:	e003      	b.n	800105e <_printf_i+0xc6>
 8001056:	0646      	lsls	r6, r0, #25
 8001058:	d5fb      	bpl.n	8001052 <_printf_i+0xba>
 800105a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800105e:	2e00      	cmp	r6, #0
 8001060:	da03      	bge.n	800106a <_printf_i+0xd2>
 8001062:	232d      	movs	r3, #45	; 0x2d
 8001064:	4276      	negs	r6, r6
 8001066:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800106a:	485a      	ldr	r0, [pc, #360]	; (80011d4 <_printf_i+0x23c>)
 800106c:	230a      	movs	r3, #10
 800106e:	e012      	b.n	8001096 <_printf_i+0xfe>
 8001070:	682b      	ldr	r3, [r5, #0]
 8001072:	6820      	ldr	r0, [r4, #0]
 8001074:	1d19      	adds	r1, r3, #4
 8001076:	6029      	str	r1, [r5, #0]
 8001078:	0605      	lsls	r5, r0, #24
 800107a:	d501      	bpl.n	8001080 <_printf_i+0xe8>
 800107c:	681e      	ldr	r6, [r3, #0]
 800107e:	e002      	b.n	8001086 <_printf_i+0xee>
 8001080:	0641      	lsls	r1, r0, #25
 8001082:	d5fb      	bpl.n	800107c <_printf_i+0xe4>
 8001084:	881e      	ldrh	r6, [r3, #0]
 8001086:	4853      	ldr	r0, [pc, #332]	; (80011d4 <_printf_i+0x23c>)
 8001088:	2f6f      	cmp	r7, #111	; 0x6f
 800108a:	bf0c      	ite	eq
 800108c:	2308      	moveq	r3, #8
 800108e:	230a      	movne	r3, #10
 8001090:	2100      	movs	r1, #0
 8001092:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001096:	6865      	ldr	r5, [r4, #4]
 8001098:	60a5      	str	r5, [r4, #8]
 800109a:	2d00      	cmp	r5, #0
 800109c:	bfa2      	ittt	ge
 800109e:	6821      	ldrge	r1, [r4, #0]
 80010a0:	f021 0104 	bicge.w	r1, r1, #4
 80010a4:	6021      	strge	r1, [r4, #0]
 80010a6:	b90e      	cbnz	r6, 80010ac <_printf_i+0x114>
 80010a8:	2d00      	cmp	r5, #0
 80010aa:	d04b      	beq.n	8001144 <_printf_i+0x1ac>
 80010ac:	4615      	mov	r5, r2
 80010ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80010b2:	fb03 6711 	mls	r7, r3, r1, r6
 80010b6:	5dc7      	ldrb	r7, [r0, r7]
 80010b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80010bc:	4637      	mov	r7, r6
 80010be:	42bb      	cmp	r3, r7
 80010c0:	460e      	mov	r6, r1
 80010c2:	d9f4      	bls.n	80010ae <_printf_i+0x116>
 80010c4:	2b08      	cmp	r3, #8
 80010c6:	d10b      	bne.n	80010e0 <_printf_i+0x148>
 80010c8:	6823      	ldr	r3, [r4, #0]
 80010ca:	07de      	lsls	r6, r3, #31
 80010cc:	d508      	bpl.n	80010e0 <_printf_i+0x148>
 80010ce:	6923      	ldr	r3, [r4, #16]
 80010d0:	6861      	ldr	r1, [r4, #4]
 80010d2:	4299      	cmp	r1, r3
 80010d4:	bfde      	ittt	le
 80010d6:	2330      	movle	r3, #48	; 0x30
 80010d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80010dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80010e0:	1b52      	subs	r2, r2, r5
 80010e2:	6122      	str	r2, [r4, #16]
 80010e4:	f8cd a000 	str.w	sl, [sp]
 80010e8:	464b      	mov	r3, r9
 80010ea:	aa03      	add	r2, sp, #12
 80010ec:	4621      	mov	r1, r4
 80010ee:	4640      	mov	r0, r8
 80010f0:	f7ff fee4 	bl	8000ebc <_printf_common>
 80010f4:	3001      	adds	r0, #1
 80010f6:	d14a      	bne.n	800118e <_printf_i+0x1f6>
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	b004      	add	sp, #16
 80010fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001102:	6823      	ldr	r3, [r4, #0]
 8001104:	f043 0320 	orr.w	r3, r3, #32
 8001108:	6023      	str	r3, [r4, #0]
 800110a:	4833      	ldr	r0, [pc, #204]	; (80011d8 <_printf_i+0x240>)
 800110c:	2778      	movs	r7, #120	; 0x78
 800110e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001112:	6823      	ldr	r3, [r4, #0]
 8001114:	6829      	ldr	r1, [r5, #0]
 8001116:	061f      	lsls	r7, r3, #24
 8001118:	f851 6b04 	ldr.w	r6, [r1], #4
 800111c:	d402      	bmi.n	8001124 <_printf_i+0x18c>
 800111e:	065f      	lsls	r7, r3, #25
 8001120:	bf48      	it	mi
 8001122:	b2b6      	uxthmi	r6, r6
 8001124:	07df      	lsls	r7, r3, #31
 8001126:	bf48      	it	mi
 8001128:	f043 0320 	orrmi.w	r3, r3, #32
 800112c:	6029      	str	r1, [r5, #0]
 800112e:	bf48      	it	mi
 8001130:	6023      	strmi	r3, [r4, #0]
 8001132:	b91e      	cbnz	r6, 800113c <_printf_i+0x1a4>
 8001134:	6823      	ldr	r3, [r4, #0]
 8001136:	f023 0320 	bic.w	r3, r3, #32
 800113a:	6023      	str	r3, [r4, #0]
 800113c:	2310      	movs	r3, #16
 800113e:	e7a7      	b.n	8001090 <_printf_i+0xf8>
 8001140:	4824      	ldr	r0, [pc, #144]	; (80011d4 <_printf_i+0x23c>)
 8001142:	e7e4      	b.n	800110e <_printf_i+0x176>
 8001144:	4615      	mov	r5, r2
 8001146:	e7bd      	b.n	80010c4 <_printf_i+0x12c>
 8001148:	682b      	ldr	r3, [r5, #0]
 800114a:	6826      	ldr	r6, [r4, #0]
 800114c:	6961      	ldr	r1, [r4, #20]
 800114e:	1d18      	adds	r0, r3, #4
 8001150:	6028      	str	r0, [r5, #0]
 8001152:	0635      	lsls	r5, r6, #24
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	d501      	bpl.n	800115c <_printf_i+0x1c4>
 8001158:	6019      	str	r1, [r3, #0]
 800115a:	e002      	b.n	8001162 <_printf_i+0x1ca>
 800115c:	0670      	lsls	r0, r6, #25
 800115e:	d5fb      	bpl.n	8001158 <_printf_i+0x1c0>
 8001160:	8019      	strh	r1, [r3, #0]
 8001162:	2300      	movs	r3, #0
 8001164:	6123      	str	r3, [r4, #16]
 8001166:	4615      	mov	r5, r2
 8001168:	e7bc      	b.n	80010e4 <_printf_i+0x14c>
 800116a:	682b      	ldr	r3, [r5, #0]
 800116c:	1d1a      	adds	r2, r3, #4
 800116e:	602a      	str	r2, [r5, #0]
 8001170:	681d      	ldr	r5, [r3, #0]
 8001172:	6862      	ldr	r2, [r4, #4]
 8001174:	2100      	movs	r1, #0
 8001176:	4628      	mov	r0, r5
 8001178:	f7ff f832 	bl	80001e0 <memchr>
 800117c:	b108      	cbz	r0, 8001182 <_printf_i+0x1ea>
 800117e:	1b40      	subs	r0, r0, r5
 8001180:	6060      	str	r0, [r4, #4]
 8001182:	6863      	ldr	r3, [r4, #4]
 8001184:	6123      	str	r3, [r4, #16]
 8001186:	2300      	movs	r3, #0
 8001188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800118c:	e7aa      	b.n	80010e4 <_printf_i+0x14c>
 800118e:	6923      	ldr	r3, [r4, #16]
 8001190:	462a      	mov	r2, r5
 8001192:	4649      	mov	r1, r9
 8001194:	4640      	mov	r0, r8
 8001196:	47d0      	blx	sl
 8001198:	3001      	adds	r0, #1
 800119a:	d0ad      	beq.n	80010f8 <_printf_i+0x160>
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	079b      	lsls	r3, r3, #30
 80011a0:	d413      	bmi.n	80011ca <_printf_i+0x232>
 80011a2:	68e0      	ldr	r0, [r4, #12]
 80011a4:	9b03      	ldr	r3, [sp, #12]
 80011a6:	4298      	cmp	r0, r3
 80011a8:	bfb8      	it	lt
 80011aa:	4618      	movlt	r0, r3
 80011ac:	e7a6      	b.n	80010fc <_printf_i+0x164>
 80011ae:	2301      	movs	r3, #1
 80011b0:	4632      	mov	r2, r6
 80011b2:	4649      	mov	r1, r9
 80011b4:	4640      	mov	r0, r8
 80011b6:	47d0      	blx	sl
 80011b8:	3001      	adds	r0, #1
 80011ba:	d09d      	beq.n	80010f8 <_printf_i+0x160>
 80011bc:	3501      	adds	r5, #1
 80011be:	68e3      	ldr	r3, [r4, #12]
 80011c0:	9903      	ldr	r1, [sp, #12]
 80011c2:	1a5b      	subs	r3, r3, r1
 80011c4:	42ab      	cmp	r3, r5
 80011c6:	dcf2      	bgt.n	80011ae <_printf_i+0x216>
 80011c8:	e7eb      	b.n	80011a2 <_printf_i+0x20a>
 80011ca:	2500      	movs	r5, #0
 80011cc:	f104 0619 	add.w	r6, r4, #25
 80011d0:	e7f5      	b.n	80011be <_printf_i+0x226>
 80011d2:	bf00      	nop
 80011d4:	080015c3 	.word	0x080015c3
 80011d8:	080015d4 	.word	0x080015d4

080011dc <__sflush_r>:
 80011dc:	898a      	ldrh	r2, [r1, #12]
 80011de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011e2:	4605      	mov	r5, r0
 80011e4:	0710      	lsls	r0, r2, #28
 80011e6:	460c      	mov	r4, r1
 80011e8:	d458      	bmi.n	800129c <__sflush_r+0xc0>
 80011ea:	684b      	ldr	r3, [r1, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	dc05      	bgt.n	80011fc <__sflush_r+0x20>
 80011f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	dc02      	bgt.n	80011fc <__sflush_r+0x20>
 80011f6:	2000      	movs	r0, #0
 80011f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011fe:	2e00      	cmp	r6, #0
 8001200:	d0f9      	beq.n	80011f6 <__sflush_r+0x1a>
 8001202:	2300      	movs	r3, #0
 8001204:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001208:	682f      	ldr	r7, [r5, #0]
 800120a:	6a21      	ldr	r1, [r4, #32]
 800120c:	602b      	str	r3, [r5, #0]
 800120e:	d032      	beq.n	8001276 <__sflush_r+0x9a>
 8001210:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001212:	89a3      	ldrh	r3, [r4, #12]
 8001214:	075a      	lsls	r2, r3, #29
 8001216:	d505      	bpl.n	8001224 <__sflush_r+0x48>
 8001218:	6863      	ldr	r3, [r4, #4]
 800121a:	1ac0      	subs	r0, r0, r3
 800121c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800121e:	b10b      	cbz	r3, 8001224 <__sflush_r+0x48>
 8001220:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001222:	1ac0      	subs	r0, r0, r3
 8001224:	2300      	movs	r3, #0
 8001226:	4602      	mov	r2, r0
 8001228:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800122a:	6a21      	ldr	r1, [r4, #32]
 800122c:	4628      	mov	r0, r5
 800122e:	47b0      	blx	r6
 8001230:	1c43      	adds	r3, r0, #1
 8001232:	89a3      	ldrh	r3, [r4, #12]
 8001234:	d106      	bne.n	8001244 <__sflush_r+0x68>
 8001236:	6829      	ldr	r1, [r5, #0]
 8001238:	291d      	cmp	r1, #29
 800123a:	d82b      	bhi.n	8001294 <__sflush_r+0xb8>
 800123c:	4a29      	ldr	r2, [pc, #164]	; (80012e4 <__sflush_r+0x108>)
 800123e:	410a      	asrs	r2, r1
 8001240:	07d6      	lsls	r6, r2, #31
 8001242:	d427      	bmi.n	8001294 <__sflush_r+0xb8>
 8001244:	2200      	movs	r2, #0
 8001246:	6062      	str	r2, [r4, #4]
 8001248:	04d9      	lsls	r1, r3, #19
 800124a:	6922      	ldr	r2, [r4, #16]
 800124c:	6022      	str	r2, [r4, #0]
 800124e:	d504      	bpl.n	800125a <__sflush_r+0x7e>
 8001250:	1c42      	adds	r2, r0, #1
 8001252:	d101      	bne.n	8001258 <__sflush_r+0x7c>
 8001254:	682b      	ldr	r3, [r5, #0]
 8001256:	b903      	cbnz	r3, 800125a <__sflush_r+0x7e>
 8001258:	6560      	str	r0, [r4, #84]	; 0x54
 800125a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800125c:	602f      	str	r7, [r5, #0]
 800125e:	2900      	cmp	r1, #0
 8001260:	d0c9      	beq.n	80011f6 <__sflush_r+0x1a>
 8001262:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001266:	4299      	cmp	r1, r3
 8001268:	d002      	beq.n	8001270 <__sflush_r+0x94>
 800126a:	4628      	mov	r0, r5
 800126c:	f7ff fbea 	bl	8000a44 <_free_r>
 8001270:	2000      	movs	r0, #0
 8001272:	6360      	str	r0, [r4, #52]	; 0x34
 8001274:	e7c0      	b.n	80011f8 <__sflush_r+0x1c>
 8001276:	2301      	movs	r3, #1
 8001278:	4628      	mov	r0, r5
 800127a:	47b0      	blx	r6
 800127c:	1c41      	adds	r1, r0, #1
 800127e:	d1c8      	bne.n	8001212 <__sflush_r+0x36>
 8001280:	682b      	ldr	r3, [r5, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0c5      	beq.n	8001212 <__sflush_r+0x36>
 8001286:	2b1d      	cmp	r3, #29
 8001288:	d001      	beq.n	800128e <__sflush_r+0xb2>
 800128a:	2b16      	cmp	r3, #22
 800128c:	d101      	bne.n	8001292 <__sflush_r+0xb6>
 800128e:	602f      	str	r7, [r5, #0]
 8001290:	e7b1      	b.n	80011f6 <__sflush_r+0x1a>
 8001292:	89a3      	ldrh	r3, [r4, #12]
 8001294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001298:	81a3      	strh	r3, [r4, #12]
 800129a:	e7ad      	b.n	80011f8 <__sflush_r+0x1c>
 800129c:	690f      	ldr	r7, [r1, #16]
 800129e:	2f00      	cmp	r7, #0
 80012a0:	d0a9      	beq.n	80011f6 <__sflush_r+0x1a>
 80012a2:	0793      	lsls	r3, r2, #30
 80012a4:	680e      	ldr	r6, [r1, #0]
 80012a6:	bf08      	it	eq
 80012a8:	694b      	ldreq	r3, [r1, #20]
 80012aa:	600f      	str	r7, [r1, #0]
 80012ac:	bf18      	it	ne
 80012ae:	2300      	movne	r3, #0
 80012b0:	eba6 0807 	sub.w	r8, r6, r7
 80012b4:	608b      	str	r3, [r1, #8]
 80012b6:	f1b8 0f00 	cmp.w	r8, #0
 80012ba:	dd9c      	ble.n	80011f6 <__sflush_r+0x1a>
 80012bc:	6a21      	ldr	r1, [r4, #32]
 80012be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80012c0:	4643      	mov	r3, r8
 80012c2:	463a      	mov	r2, r7
 80012c4:	4628      	mov	r0, r5
 80012c6:	47b0      	blx	r6
 80012c8:	2800      	cmp	r0, #0
 80012ca:	dc06      	bgt.n	80012da <__sflush_r+0xfe>
 80012cc:	89a3      	ldrh	r3, [r4, #12]
 80012ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012d2:	81a3      	strh	r3, [r4, #12]
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	e78e      	b.n	80011f8 <__sflush_r+0x1c>
 80012da:	4407      	add	r7, r0
 80012dc:	eba8 0800 	sub.w	r8, r8, r0
 80012e0:	e7e9      	b.n	80012b6 <__sflush_r+0xda>
 80012e2:	bf00      	nop
 80012e4:	dfbffffe 	.word	0xdfbffffe

080012e8 <_fflush_r>:
 80012e8:	b538      	push	{r3, r4, r5, lr}
 80012ea:	690b      	ldr	r3, [r1, #16]
 80012ec:	4605      	mov	r5, r0
 80012ee:	460c      	mov	r4, r1
 80012f0:	b913      	cbnz	r3, 80012f8 <_fflush_r+0x10>
 80012f2:	2500      	movs	r5, #0
 80012f4:	4628      	mov	r0, r5
 80012f6:	bd38      	pop	{r3, r4, r5, pc}
 80012f8:	b118      	cbz	r0, 8001302 <_fflush_r+0x1a>
 80012fa:	6a03      	ldr	r3, [r0, #32]
 80012fc:	b90b      	cbnz	r3, 8001302 <_fflush_r+0x1a>
 80012fe:	f7ff fa99 	bl	8000834 <__sinit>
 8001302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f3      	beq.n	80012f2 <_fflush_r+0xa>
 800130a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800130c:	07d0      	lsls	r0, r2, #31
 800130e:	d404      	bmi.n	800131a <_fflush_r+0x32>
 8001310:	0599      	lsls	r1, r3, #22
 8001312:	d402      	bmi.n	800131a <_fflush_r+0x32>
 8001314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001316:	f7ff fb92 	bl	8000a3e <__retarget_lock_acquire_recursive>
 800131a:	4628      	mov	r0, r5
 800131c:	4621      	mov	r1, r4
 800131e:	f7ff ff5d 	bl	80011dc <__sflush_r>
 8001322:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001324:	07da      	lsls	r2, r3, #31
 8001326:	4605      	mov	r5, r0
 8001328:	d4e4      	bmi.n	80012f4 <_fflush_r+0xc>
 800132a:	89a3      	ldrh	r3, [r4, #12]
 800132c:	059b      	lsls	r3, r3, #22
 800132e:	d4e1      	bmi.n	80012f4 <_fflush_r+0xc>
 8001330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001332:	f7ff fb85 	bl	8000a40 <__retarget_lock_release_recursive>
 8001336:	e7dd      	b.n	80012f4 <_fflush_r+0xc>

08001338 <__swbuf_r>:
 8001338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800133a:	460e      	mov	r6, r1
 800133c:	4614      	mov	r4, r2
 800133e:	4605      	mov	r5, r0
 8001340:	b118      	cbz	r0, 800134a <__swbuf_r+0x12>
 8001342:	6a03      	ldr	r3, [r0, #32]
 8001344:	b90b      	cbnz	r3, 800134a <__swbuf_r+0x12>
 8001346:	f7ff fa75 	bl	8000834 <__sinit>
 800134a:	69a3      	ldr	r3, [r4, #24]
 800134c:	60a3      	str	r3, [r4, #8]
 800134e:	89a3      	ldrh	r3, [r4, #12]
 8001350:	071a      	lsls	r2, r3, #28
 8001352:	d525      	bpl.n	80013a0 <__swbuf_r+0x68>
 8001354:	6923      	ldr	r3, [r4, #16]
 8001356:	b31b      	cbz	r3, 80013a0 <__swbuf_r+0x68>
 8001358:	6823      	ldr	r3, [r4, #0]
 800135a:	6922      	ldr	r2, [r4, #16]
 800135c:	1a98      	subs	r0, r3, r2
 800135e:	6963      	ldr	r3, [r4, #20]
 8001360:	b2f6      	uxtb	r6, r6
 8001362:	4283      	cmp	r3, r0
 8001364:	4637      	mov	r7, r6
 8001366:	dc04      	bgt.n	8001372 <__swbuf_r+0x3a>
 8001368:	4621      	mov	r1, r4
 800136a:	4628      	mov	r0, r5
 800136c:	f7ff ffbc 	bl	80012e8 <_fflush_r>
 8001370:	b9e0      	cbnz	r0, 80013ac <__swbuf_r+0x74>
 8001372:	68a3      	ldr	r3, [r4, #8]
 8001374:	3b01      	subs	r3, #1
 8001376:	60a3      	str	r3, [r4, #8]
 8001378:	6823      	ldr	r3, [r4, #0]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	6022      	str	r2, [r4, #0]
 800137e:	701e      	strb	r6, [r3, #0]
 8001380:	6962      	ldr	r2, [r4, #20]
 8001382:	1c43      	adds	r3, r0, #1
 8001384:	429a      	cmp	r2, r3
 8001386:	d004      	beq.n	8001392 <__swbuf_r+0x5a>
 8001388:	89a3      	ldrh	r3, [r4, #12]
 800138a:	07db      	lsls	r3, r3, #31
 800138c:	d506      	bpl.n	800139c <__swbuf_r+0x64>
 800138e:	2e0a      	cmp	r6, #10
 8001390:	d104      	bne.n	800139c <__swbuf_r+0x64>
 8001392:	4621      	mov	r1, r4
 8001394:	4628      	mov	r0, r5
 8001396:	f7ff ffa7 	bl	80012e8 <_fflush_r>
 800139a:	b938      	cbnz	r0, 80013ac <__swbuf_r+0x74>
 800139c:	4638      	mov	r0, r7
 800139e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013a0:	4621      	mov	r1, r4
 80013a2:	4628      	mov	r0, r5
 80013a4:	f000 f806 	bl	80013b4 <__swsetup_r>
 80013a8:	2800      	cmp	r0, #0
 80013aa:	d0d5      	beq.n	8001358 <__swbuf_r+0x20>
 80013ac:	f04f 37ff 	mov.w	r7, #4294967295
 80013b0:	e7f4      	b.n	800139c <__swbuf_r+0x64>
	...

080013b4 <__swsetup_r>:
 80013b4:	b538      	push	{r3, r4, r5, lr}
 80013b6:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <__swsetup_r+0xac>)
 80013b8:	4605      	mov	r5, r0
 80013ba:	6818      	ldr	r0, [r3, #0]
 80013bc:	460c      	mov	r4, r1
 80013be:	b118      	cbz	r0, 80013c8 <__swsetup_r+0x14>
 80013c0:	6a03      	ldr	r3, [r0, #32]
 80013c2:	b90b      	cbnz	r3, 80013c8 <__swsetup_r+0x14>
 80013c4:	f7ff fa36 	bl	8000834 <__sinit>
 80013c8:	89a3      	ldrh	r3, [r4, #12]
 80013ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80013ce:	0718      	lsls	r0, r3, #28
 80013d0:	d422      	bmi.n	8001418 <__swsetup_r+0x64>
 80013d2:	06d9      	lsls	r1, r3, #27
 80013d4:	d407      	bmi.n	80013e6 <__swsetup_r+0x32>
 80013d6:	2309      	movs	r3, #9
 80013d8:	602b      	str	r3, [r5, #0]
 80013da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80013de:	81a3      	strh	r3, [r4, #12]
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	e034      	b.n	8001450 <__swsetup_r+0x9c>
 80013e6:	0758      	lsls	r0, r3, #29
 80013e8:	d512      	bpl.n	8001410 <__swsetup_r+0x5c>
 80013ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013ec:	b141      	cbz	r1, 8001400 <__swsetup_r+0x4c>
 80013ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013f2:	4299      	cmp	r1, r3
 80013f4:	d002      	beq.n	80013fc <__swsetup_r+0x48>
 80013f6:	4628      	mov	r0, r5
 80013f8:	f7ff fb24 	bl	8000a44 <_free_r>
 80013fc:	2300      	movs	r3, #0
 80013fe:	6363      	str	r3, [r4, #52]	; 0x34
 8001400:	89a3      	ldrh	r3, [r4, #12]
 8001402:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001406:	81a3      	strh	r3, [r4, #12]
 8001408:	2300      	movs	r3, #0
 800140a:	6063      	str	r3, [r4, #4]
 800140c:	6923      	ldr	r3, [r4, #16]
 800140e:	6023      	str	r3, [r4, #0]
 8001410:	89a3      	ldrh	r3, [r4, #12]
 8001412:	f043 0308 	orr.w	r3, r3, #8
 8001416:	81a3      	strh	r3, [r4, #12]
 8001418:	6923      	ldr	r3, [r4, #16]
 800141a:	b94b      	cbnz	r3, 8001430 <__swsetup_r+0x7c>
 800141c:	89a3      	ldrh	r3, [r4, #12]
 800141e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001426:	d003      	beq.n	8001430 <__swsetup_r+0x7c>
 8001428:	4621      	mov	r1, r4
 800142a:	4628      	mov	r0, r5
 800142c:	f000 f850 	bl	80014d0 <__smakebuf_r>
 8001430:	89a0      	ldrh	r0, [r4, #12]
 8001432:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001436:	f010 0301 	ands.w	r3, r0, #1
 800143a:	d00a      	beq.n	8001452 <__swsetup_r+0x9e>
 800143c:	2300      	movs	r3, #0
 800143e:	60a3      	str	r3, [r4, #8]
 8001440:	6963      	ldr	r3, [r4, #20]
 8001442:	425b      	negs	r3, r3
 8001444:	61a3      	str	r3, [r4, #24]
 8001446:	6923      	ldr	r3, [r4, #16]
 8001448:	b943      	cbnz	r3, 800145c <__swsetup_r+0xa8>
 800144a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800144e:	d1c4      	bne.n	80013da <__swsetup_r+0x26>
 8001450:	bd38      	pop	{r3, r4, r5, pc}
 8001452:	0781      	lsls	r1, r0, #30
 8001454:	bf58      	it	pl
 8001456:	6963      	ldrpl	r3, [r4, #20]
 8001458:	60a3      	str	r3, [r4, #8]
 800145a:	e7f4      	b.n	8001446 <__swsetup_r+0x92>
 800145c:	2000      	movs	r0, #0
 800145e:	e7f7      	b.n	8001450 <__swsetup_r+0x9c>
 8001460:	20000058 	.word	0x20000058

08001464 <_sbrk_r>:
 8001464:	b538      	push	{r3, r4, r5, lr}
 8001466:	4d06      	ldr	r5, [pc, #24]	; (8001480 <_sbrk_r+0x1c>)
 8001468:	2300      	movs	r3, #0
 800146a:	4604      	mov	r4, r0
 800146c:	4608      	mov	r0, r1
 800146e:	602b      	str	r3, [r5, #0]
 8001470:	f7fe ff8e 	bl	8000390 <_sbrk>
 8001474:	1c43      	adds	r3, r0, #1
 8001476:	d102      	bne.n	800147e <_sbrk_r+0x1a>
 8001478:	682b      	ldr	r3, [r5, #0]
 800147a:	b103      	cbz	r3, 800147e <_sbrk_r+0x1a>
 800147c:	6023      	str	r3, [r4, #0]
 800147e:	bd38      	pop	{r3, r4, r5, pc}
 8001480:	200001b8 	.word	0x200001b8

08001484 <__swhatbuf_r>:
 8001484:	b570      	push	{r4, r5, r6, lr}
 8001486:	460c      	mov	r4, r1
 8001488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800148c:	2900      	cmp	r1, #0
 800148e:	b096      	sub	sp, #88	; 0x58
 8001490:	4615      	mov	r5, r2
 8001492:	461e      	mov	r6, r3
 8001494:	da0d      	bge.n	80014b2 <__swhatbuf_r+0x2e>
 8001496:	89a3      	ldrh	r3, [r4, #12]
 8001498:	f013 0f80 	tst.w	r3, #128	; 0x80
 800149c:	f04f 0100 	mov.w	r1, #0
 80014a0:	bf0c      	ite	eq
 80014a2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80014a6:	2340      	movne	r3, #64	; 0x40
 80014a8:	2000      	movs	r0, #0
 80014aa:	6031      	str	r1, [r6, #0]
 80014ac:	602b      	str	r3, [r5, #0]
 80014ae:	b016      	add	sp, #88	; 0x58
 80014b0:	bd70      	pop	{r4, r5, r6, pc}
 80014b2:	466a      	mov	r2, sp
 80014b4:	f000 f848 	bl	8001548 <_fstat_r>
 80014b8:	2800      	cmp	r0, #0
 80014ba:	dbec      	blt.n	8001496 <__swhatbuf_r+0x12>
 80014bc:	9901      	ldr	r1, [sp, #4]
 80014be:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80014c2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80014c6:	4259      	negs	r1, r3
 80014c8:	4159      	adcs	r1, r3
 80014ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ce:	e7eb      	b.n	80014a8 <__swhatbuf_r+0x24>

080014d0 <__smakebuf_r>:
 80014d0:	898b      	ldrh	r3, [r1, #12]
 80014d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80014d4:	079d      	lsls	r5, r3, #30
 80014d6:	4606      	mov	r6, r0
 80014d8:	460c      	mov	r4, r1
 80014da:	d507      	bpl.n	80014ec <__smakebuf_r+0x1c>
 80014dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80014e0:	6023      	str	r3, [r4, #0]
 80014e2:	6123      	str	r3, [r4, #16]
 80014e4:	2301      	movs	r3, #1
 80014e6:	6163      	str	r3, [r4, #20]
 80014e8:	b002      	add	sp, #8
 80014ea:	bd70      	pop	{r4, r5, r6, pc}
 80014ec:	ab01      	add	r3, sp, #4
 80014ee:	466a      	mov	r2, sp
 80014f0:	f7ff ffc8 	bl	8001484 <__swhatbuf_r>
 80014f4:	9900      	ldr	r1, [sp, #0]
 80014f6:	4605      	mov	r5, r0
 80014f8:	4630      	mov	r0, r6
 80014fa:	f7ff fb0f 	bl	8000b1c <_malloc_r>
 80014fe:	b948      	cbnz	r0, 8001514 <__smakebuf_r+0x44>
 8001500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001504:	059a      	lsls	r2, r3, #22
 8001506:	d4ef      	bmi.n	80014e8 <__smakebuf_r+0x18>
 8001508:	f023 0303 	bic.w	r3, r3, #3
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	81a3      	strh	r3, [r4, #12]
 8001512:	e7e3      	b.n	80014dc <__smakebuf_r+0xc>
 8001514:	89a3      	ldrh	r3, [r4, #12]
 8001516:	6020      	str	r0, [r4, #0]
 8001518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800151c:	81a3      	strh	r3, [r4, #12]
 800151e:	9b00      	ldr	r3, [sp, #0]
 8001520:	6163      	str	r3, [r4, #20]
 8001522:	9b01      	ldr	r3, [sp, #4]
 8001524:	6120      	str	r0, [r4, #16]
 8001526:	b15b      	cbz	r3, 8001540 <__smakebuf_r+0x70>
 8001528:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800152c:	4630      	mov	r0, r6
 800152e:	f000 f81d 	bl	800156c <_isatty_r>
 8001532:	b128      	cbz	r0, 8001540 <__smakebuf_r+0x70>
 8001534:	89a3      	ldrh	r3, [r4, #12]
 8001536:	f023 0303 	bic.w	r3, r3, #3
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	81a3      	strh	r3, [r4, #12]
 8001540:	89a3      	ldrh	r3, [r4, #12]
 8001542:	431d      	orrs	r5, r3
 8001544:	81a5      	strh	r5, [r4, #12]
 8001546:	e7cf      	b.n	80014e8 <__smakebuf_r+0x18>

08001548 <_fstat_r>:
 8001548:	b538      	push	{r3, r4, r5, lr}
 800154a:	4d07      	ldr	r5, [pc, #28]	; (8001568 <_fstat_r+0x20>)
 800154c:	2300      	movs	r3, #0
 800154e:	4604      	mov	r4, r0
 8001550:	4608      	mov	r0, r1
 8001552:	4611      	mov	r1, r2
 8001554:	602b      	str	r3, [r5, #0]
 8001556:	f7fe fef2 	bl	800033e <_fstat>
 800155a:	1c43      	adds	r3, r0, #1
 800155c:	d102      	bne.n	8001564 <_fstat_r+0x1c>
 800155e:	682b      	ldr	r3, [r5, #0]
 8001560:	b103      	cbz	r3, 8001564 <_fstat_r+0x1c>
 8001562:	6023      	str	r3, [r4, #0]
 8001564:	bd38      	pop	{r3, r4, r5, pc}
 8001566:	bf00      	nop
 8001568:	200001b8 	.word	0x200001b8

0800156c <_isatty_r>:
 800156c:	b538      	push	{r3, r4, r5, lr}
 800156e:	4d06      	ldr	r5, [pc, #24]	; (8001588 <_isatty_r+0x1c>)
 8001570:	2300      	movs	r3, #0
 8001572:	4604      	mov	r4, r0
 8001574:	4608      	mov	r0, r1
 8001576:	602b      	str	r3, [r5, #0]
 8001578:	f7fe fef1 	bl	800035e <_isatty>
 800157c:	1c43      	adds	r3, r0, #1
 800157e:	d102      	bne.n	8001586 <_isatty_r+0x1a>
 8001580:	682b      	ldr	r3, [r5, #0]
 8001582:	b103      	cbz	r3, 8001586 <_isatty_r+0x1a>
 8001584:	6023      	str	r3, [r4, #0]
 8001586:	bd38      	pop	{r3, r4, r5, pc}
 8001588:	200001b8 	.word	0x200001b8

0800158c <_init>:
 800158c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800158e:	bf00      	nop
 8001590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001592:	bc08      	pop	{r3}
 8001594:	469e      	mov	lr, r3
 8001596:	4770      	bx	lr

08001598 <_fini>:
 8001598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800159a:	bf00      	nop
 800159c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800159e:	bc08      	pop	{r3}
 80015a0:	469e      	mov	lr, r3
 80015a2:	4770      	bx	lr
